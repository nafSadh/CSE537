 --- modulename: pacman, funcname: <module>
pacman.py(35): """
pacman.py(36): from game import GameStateData
 --- modulename: game, funcname: <module>
game.py(9): from util import *
 --- modulename: util, funcname: <module>
util.py(9): import sys
util.py(10): import inspect
util.py(11): import heapq, random
 --- modulename: random, funcname: <module>
random.py(40): """
random.py(42): from __future__ import division
 --- modulename: __future__, funcname: <module>
__future__.py(48): """
__future__.py(51):     "nested_scopes",
__future__.py(52):     "generators",
__future__.py(53):     "division",
__future__.py(54):     "absolute_import",
__future__.py(55):     "with_statement",
__future__.py(56):     "print_function",
__future__.py(57):     "unicode_literals",
__future__.py(60): __all__ = ["all_feature_names"] + all_feature_names
__future__.py(66): CO_NESTED            = 0x0010   # nested_scopes
__future__.py(67): CO_GENERATOR_ALLOWED = 0        # generators (obsolete, was 0x1000)
__future__.py(68): CO_FUTURE_DIVISION   = 0x2000   # division
__future__.py(69): CO_FUTURE_ABSOLUTE_IMPORT = 0x4000 # perform absolute imports by default
__future__.py(70): CO_FUTURE_WITH_STATEMENT  = 0x8000   # with statement
__future__.py(71): CO_FUTURE_PRINT_FUNCTION  = 0x10000   # print function
__future__.py(72): CO_FUTURE_UNICODE_LITERALS = 0x20000 # unicode string literals
__future__.py(74): class _Feature:
 --- modulename: __future__, funcname: _Feature
__future__.py(74): class _Feature:
__future__.py(75):     def __init__(self, optionalRelease, mandatoryRelease, compiler_flag):
__future__.py(80):     def getOptionalRelease(self):
__future__.py(88):     def getMandatoryRelease(self):
__future__.py(97):     def __repr__(self):
__future__.py(102): nested_scopes = _Feature((2, 1, 0, "beta",  1),
__future__.py(103):                          (2, 2, 0, "alpha", 0),
__future__.py(104):                          CO_NESTED)
 --- modulename: __future__, funcname: __init__
__future__.py(76):         self.optional = optionalRelease
__future__.py(77):         self.mandatory = mandatoryRelease
__future__.py(78):         self.compiler_flag = compiler_flag
__future__.py(106): generators = _Feature((2, 2, 0, "alpha", 1),
__future__.py(107):                       (2, 3, 0, "final", 0),
__future__.py(108):                       CO_GENERATOR_ALLOWED)
 --- modulename: __future__, funcname: __init__
__future__.py(76):         self.optional = optionalRelease
__future__.py(77):         self.mandatory = mandatoryRelease
__future__.py(78):         self.compiler_flag = compiler_flag
__future__.py(110): division = _Feature((2, 2, 0, "alpha", 2),
__future__.py(111):                     (3, 0, 0, "alpha", 0),
__future__.py(112):                     CO_FUTURE_DIVISION)
 --- modulename: __future__, funcname: __init__
__future__.py(76):         self.optional = optionalRelease
__future__.py(77):         self.mandatory = mandatoryRelease
__future__.py(78):         self.compiler_flag = compiler_flag
__future__.py(114): absolute_import = _Feature((2, 5, 0, "alpha", 1),
__future__.py(115):                            (3, 0, 0, "alpha", 0),
__future__.py(116):                            CO_FUTURE_ABSOLUTE_IMPORT)
 --- modulename: __future__, funcname: __init__
__future__.py(76):         self.optional = optionalRelease
__future__.py(77):         self.mandatory = mandatoryRelease
__future__.py(78):         self.compiler_flag = compiler_flag
__future__.py(118): with_statement = _Feature((2, 5, 0, "alpha", 1),
__future__.py(119):                           (2, 6, 0, "alpha", 0),
__future__.py(120):                           CO_FUTURE_WITH_STATEMENT)
 --- modulename: __future__, funcname: __init__
__future__.py(76):         self.optional = optionalRelease
__future__.py(77):         self.mandatory = mandatoryRelease
__future__.py(78):         self.compiler_flag = compiler_flag
__future__.py(122): print_function = _Feature((2, 6, 0, "alpha", 2),
__future__.py(123):                           (3, 0, 0, "alpha", 0),
__future__.py(124):                           CO_FUTURE_PRINT_FUNCTION)
 --- modulename: __future__, funcname: __init__
__future__.py(76):         self.optional = optionalRelease
__future__.py(77):         self.mandatory = mandatoryRelease
__future__.py(78):         self.compiler_flag = compiler_flag
__future__.py(126): unicode_literals = _Feature((2, 6, 0, "alpha", 2),
__future__.py(127):                             (3, 0, 0, "alpha", 0),
__future__.py(128):                             CO_FUTURE_UNICODE_LITERALS)
 --- modulename: __future__, funcname: __init__
__future__.py(76):         self.optional = optionalRelease
__future__.py(77):         self.mandatory = mandatoryRelease
__future__.py(78):         self.compiler_flag = compiler_flag
random.py(43): from warnings import warn as _warn
random.py(44): from types import MethodType as _MethodType, BuiltinMethodType as _BuiltinMethodType
random.py(45): from math import log as _log, exp as _exp, pi as _pi, e as _e, ceil as _ceil
random.py(46): from math import sqrt as _sqrt, acos as _acos, cos as _cos, sin as _sin
random.py(47): from os import urandom as _urandom
random.py(48): from binascii import hexlify as _hexlify
random.py(49): import hashlib as _hashlib
 --- modulename: hashlib, funcname: <module>
hashlib.py(55): """
hashlib.py(59): __always_supported = ('md5', 'sha1', 'sha224', 'sha256', 'sha384', 'sha512')
hashlib.py(61): algorithms = __always_supported
hashlib.py(63): __all__ = __always_supported + ('new', 'algorithms')
hashlib.py(66): def __get_builtin_constructor(name):
hashlib.py(94): def __get_openssl_constructor(name):
hashlib.py(106): def __py_new(name, string=''):
hashlib.py(113): def __hash_new(name, string=''):
hashlib.py(127): try:
hashlib.py(128):     import _hashlib
hashlib.py(129):     new = __hash_new
hashlib.py(130):     __get_hash = __get_openssl_constructor
hashlib.py(135): for __func_name in __always_supported:
hashlib.py(138):     try:
hashlib.py(139):         globals()[__func_name] = __get_hash(__func_name)
 --- modulename: hashlib, funcname: __get_openssl_constructor
hashlib.py(95):     try:
hashlib.py(96):         f = getattr(_hashlib, 'openssl_' + name)
hashlib.py(99):         f()
hashlib.py(101):         return f
hashlib.py(135): for __func_name in __always_supported:
hashlib.py(138):     try:
hashlib.py(139):         globals()[__func_name] = __get_hash(__func_name)
 --- modulename: hashlib, funcname: __get_openssl_constructor
hashlib.py(95):     try:
hashlib.py(96):         f = getattr(_hashlib, 'openssl_' + name)
hashlib.py(99):         f()
hashlib.py(101):         return f
hashlib.py(135): for __func_name in __always_supported:
hashlib.py(138):     try:
hashlib.py(139):         globals()[__func_name] = __get_hash(__func_name)
 --- modulename: hashlib, funcname: __get_openssl_constructor
hashlib.py(95):     try:
hashlib.py(96):         f = getattr(_hashlib, 'openssl_' + name)
hashlib.py(99):         f()
hashlib.py(101):         return f
hashlib.py(135): for __func_name in __always_supported:
hashlib.py(138):     try:
hashlib.py(139):         globals()[__func_name] = __get_hash(__func_name)
 --- modulename: hashlib, funcname: __get_openssl_constructor
hashlib.py(95):     try:
hashlib.py(96):         f = getattr(_hashlib, 'openssl_' + name)
hashlib.py(99):         f()
hashlib.py(101):         return f
hashlib.py(135): for __func_name in __always_supported:
hashlib.py(138):     try:
hashlib.py(139):         globals()[__func_name] = __get_hash(__func_name)
 --- modulename: hashlib, funcname: __get_openssl_constructor
hashlib.py(95):     try:
hashlib.py(96):         f = getattr(_hashlib, 'openssl_' + name)
hashlib.py(99):         f()
hashlib.py(101):         return f
hashlib.py(135): for __func_name in __always_supported:
hashlib.py(138):     try:
hashlib.py(139):         globals()[__func_name] = __get_hash(__func_name)
 --- modulename: hashlib, funcname: __get_openssl_constructor
hashlib.py(95):     try:
hashlib.py(96):         f = getattr(_hashlib, 'openssl_' + name)
hashlib.py(99):         f()
hashlib.py(101):         return f
hashlib.py(135): for __func_name in __always_supported:
hashlib.py(145): del __always_supported, __func_name, __get_hash
hashlib.py(146): del __py_new, __hash_new, __get_openssl_constructor
random.py(51): __all__ = ["Random","seed","random","uniform","randint","choice","sample",
random.py(52):            "randrange","shuffle","normalvariate","lognormvariate",
random.py(53):            "expovariate","vonmisesvariate","gammavariate","triangular",
random.py(54):            "gauss","betavariate","paretovariate","weibullvariate",
random.py(55):            "getstate","setstate","jumpahead", "WichmannHill", "getrandbits",
random.py(56):            "SystemRandom"]
random.py(58): NV_MAGICCONST = 4 * _exp(-0.5)/_sqrt(2.0)
random.py(59): TWOPI = 2.0*_pi
random.py(60): LOG4 = _log(4.0)
random.py(61): SG_MAGICCONST = 1.0 + _log(4.5)
random.py(62): BPF = 53        # Number of bits in a float
random.py(63): RECIP_BPF = 2**-BPF
random.py(70): import _random
random.py(72): class Random(_random.Random):
 --- modulename: random, funcname: Random
random.py(72): class Random(_random.Random):
random.py(87):     """
random.py(89):     VERSION = 3     # used by getstate/setstate
random.py(91):     def __init__(self, x=None):
random.py(100):     def seed(self, a=None):
random.py(119):     def getstate(self):
random.py(123):     def setstate(self, state):
random.py(145):     def jumpahead(self, n):
random.py(162):     def __getstate__(self): # for pickle
random.py(165):     def __setstate__(self, state):  # for pickle
random.py(168):     def __reduce__(self):
random.py(173):     def randrange(self, start, stop=None, step=1, int=int, default=None,
random.py(174):                   maxwidth=1L<<BPF):
random.py(237):     def randint(self, a, b):
random.py(243):     def _randbelow(self, n, _log=_log, int=int, _maxwidth=1L<<BPF,
random.py(244):                    _Method=_MethodType, _BuiltinMethod=_BuiltinMethodType):
random.py(272):     def choice(self, seq):
random.py(276):     def shuffle(self, x, random=None, int=int):
random.py(290):     def sample(self, population, k):
random.py(355):     def uniform(self, a, b):
random.py(361):     def triangular(self, low=0.0, high=1.0, mode=None):
random.py(380):     def normalvariate(self, mu, sigma):
random.py(405):     def lognormvariate(self, mu, sigma):
random.py(417):     def expovariate(self, lambd):
random.py(436):     def vonmisesvariate(self, mu, kappa):
random.py(484):     def gammavariate(self, alpha, beta):
random.py(556):     def gauss(self, mu, sigma):
random.py(609):     def betavariate(self, alpha, beta):
random.py(627):     def paretovariate(self, alpha):
random.py(636):     def weibullvariate(self, alpha, beta):
random.py(649): class WichmannHill(Random):
 --- modulename: random, funcname: WichmannHill
random.py(649): class WichmannHill(Random):
random.py(651):     VERSION = 1     # used by getstate/setstate
random.py(653):     def seed(self, a=None):
random.py(684):     def random(self):
random.py(715):     def getstate(self):
random.py(719):     def setstate(self, state):
random.py(729):     def jumpahead(self, n):
random.py(751):     def __whseed(self, x=0, y=0, z=0):
random.py(774):     def whseed(self, a=None):
random.py(799): class SystemRandom(Random):
 --- modulename: random, funcname: SystemRandom
random.py(799): class SystemRandom(Random):
random.py(805):     """
random.py(807):     def random(self):
random.py(811):     def getrandbits(self, k):
random.py(821):     def _stub(self, *args, **kwds):
random.py(824):     seed = jumpahead = _stub
random.py(826):     def _notimplemented(self, *args, **kwds):
random.py(829):     getstate = setstate = _notimplemented
random.py(833): def _test_generator(n, func, args):
random.py(855): def _test(N=2000):
random.py(879): _inst = Random()
 --- modulename: random, funcname: __init__
random.py(97):         self.seed(x)
 --- modulename: random, funcname: seed
random.py(109):         if a is None:
random.py(110):             try:
random.py(111):                 a = long(_hexlify(_urandom(16)), 16)
random.py(116):         super(Random, self).seed(a)
random.py(117):         self.gauss_next = None
random.py(98):         self.gauss_next = None
random.py(880): seed = _inst.seed
random.py(881): random = _inst.random
random.py(882): uniform = _inst.uniform
random.py(883): triangular = _inst.triangular
random.py(884): randint = _inst.randint
random.py(885): choice = _inst.choice
random.py(886): randrange = _inst.randrange
random.py(887): sample = _inst.sample
random.py(888): shuffle = _inst.shuffle
random.py(889): normalvariate = _inst.normalvariate
random.py(890): lognormvariate = _inst.lognormvariate
random.py(891): expovariate = _inst.expovariate
random.py(892): vonmisesvariate = _inst.vonmisesvariate
random.py(893): gammavariate = _inst.gammavariate
random.py(894): gauss = _inst.gauss
random.py(895): betavariate = _inst.betavariate
random.py(896): paretovariate = _inst.paretovariate
random.py(897): weibullvariate = _inst.weibullvariate
random.py(898): getstate = _inst.getstate
random.py(899): setstate = _inst.setstate
random.py(900): jumpahead = _inst.jumpahead
random.py(901): getrandbits = _inst.getrandbits
random.py(903): if __name__ == '__main__':
util.py(18): class Stack:
 --- modulename: util, funcname: Stack
util.py(18): class Stack:
util.py(19):   "A container with a last-in-first-out (LIFO) queuing policy."
util.py(20):   def __init__(self):
util.py(23):   def push(self,item):
util.py(27):   def pop(self):
util.py(31):   def isEmpty(self):
util.py(35): class Queue:
 --- modulename: util, funcname: Queue
util.py(35): class Queue:
util.py(36):   "A container with a first-in-first-out (FIFO) queuing policy."
util.py(37):   def __init__(self):
util.py(40):   def push(self,item):
util.py(44):   def pop(self):
util.py(51):   def isEmpty(self):
util.py(55): class PriorityQueue:
 --- modulename: util, funcname: PriorityQueue
util.py(55): class PriorityQueue:
util.py(65):   """  
util.py(66):   def  __init__(self):  
util.py(69):   def push(self, item, priority):
util.py(73):   def pop(self):
util.py(77):   def isEmpty(self):
util.py(80): class PriorityQueueWithFunction(PriorityQueue):
 --- modulename: util, funcname: PriorityQueueWithFunction
util.py(80): class PriorityQueueWithFunction(PriorityQueue):
util.py(86):   """  
util.py(87):   def  __init__(self, priorityFunction):
util.py(92):   def push(self, item):
util.py(97): def manhattanDistance( xy1, xy2 ):
util.py(107): class Counter(dict):
 --- modulename: util, funcname: Counter
util.py(107): class Counter(dict):
util.py(146):   """
util.py(147):   def __getitem__(self, idx):
util.py(151):   def incrementAll(self, keys, count):
util.py(165):   def argMax(self):
util.py(175):   def sortedKeys(self):
util.py(192):   def totalCount(self):
util.py(198):   def normalize(self):
util.py(210):   def divideAll(self, divisor):
util.py(218):   def copy(self):
util.py(224):   def __mul__(self, y ):
util.py(250):   def __radd__(self, y):
util.py(268):   def __add__( self, y ):
util.py(294):   def __sub__( self, y ):
util.py(320): def raiseNotDefined():
util.py(324): def normalize(vectorOrCounter):
util.py(343): def nSample(distribution, values, n):
util.py(359): def sample(distribution, values = None):
util.py(373): def sampleFromCounter(ctr):
util.py(377): def getProbability(value, distribution, values):
util.py(388): def flipCoin( p ):
util.py(392): def chooseFromDistribution( distribution ):
util.py(402): def nearestPoint( pos ):
util.py(412): def sign( x ):
util.py(421): def arrayInvert(array):
util.py(431): def matrixAsList( matrix, value = True ):
util.py(443): def lookup(name, namespace):
util.py(461): def pause():
util.py(470): import signal
util.py(471): class TimeoutFunctionException(Exception):
 --- modulename: util, funcname: TimeoutFunctionException
util.py(471): class TimeoutFunctionException(Exception):
util.py(472):     """Exception to raise on a timeout"""
util.py(473):     pass
util.py(475): class TimeoutFunction:
 --- modulename: util, funcname: TimeoutFunction
util.py(475): class TimeoutFunction:
util.py(477):     def __init__(self, function, timeout):
util.py(482):     def handle_timeout(self, signum, frame):
util.py(485):     def __call__(self, *args):
game.py(10): from util import raiseNotDefined
game.py(11): import time, os
game.py(12): import traceback
game.py(14): try:
game.py(15):   import boinc
game.py(17): except:
game.py(18):   _BOINC_ENABLED = False
game.py(24): class Agent:
 --- modulename: game, funcname: Agent
game.py(24): class Agent:
game.py(30):   """
game.py(31):   def __init__(self, index=0):
game.py(34):   def getAction(self, state):
game.py(41): class Directions:
 --- modulename: game, funcname: Directions
game.py(41): class Directions:
game.py(42):   NORTH = 'North'
game.py(43):   SOUTH = 'South'
game.py(44):   EAST = 'East'
game.py(45):   WEST = 'West'
game.py(46):   STOP = 'Stop'
game.py(48):   LEFT =       {NORTH: WEST,
game.py(49):                  SOUTH: EAST,
game.py(50):                  EAST:  NORTH,
game.py(51):                  WEST:  SOUTH,
game.py(52):                  STOP:  STOP}
game.py(54):   RIGHT =      dict([(y,x) for x, y in LEFT.items()])
game.py(54):   RIGHT =      dict([(y,x) for x, y in LEFT.items()])
game.py(54):   RIGHT =      dict([(y,x) for x, y in LEFT.items()])
game.py(54):   RIGHT =      dict([(y,x) for x, y in LEFT.items()])
game.py(54):   RIGHT =      dict([(y,x) for x, y in LEFT.items()])
game.py(54):   RIGHT =      dict([(y,x) for x, y in LEFT.items()])
game.py(56):   REVERSE = {NORTH: SOUTH,
game.py(57):              SOUTH: NORTH,
game.py(58):              EAST: WEST,
game.py(59):              WEST: EAST,
game.py(60):              STOP: STOP}
game.py(62): class Configuration:
 --- modulename: game, funcname: Configuration
game.py(62): class Configuration:
game.py(69):   """
game.py(71):   def __init__(self, pos, direction):
game.py(75):   def getPosition(self):
game.py(78):   def getDirection(self):
game.py(81):   def isInteger(self):
game.py(85):   def __eq__(self, other):
game.py(89):   def __hash__(self):
game.py(94):   def __str__(self):
game.py(97):   def generateSuccessor(self, vector):
game.py(112): class AgentState:
 --- modulename: game, funcname: AgentState
game.py(112): class AgentState:
game.py(115):   """
game.py(117):   def __init__( self, startConfiguration, isPacman ):
game.py(123):   def __str__( self ):
game.py(129):   def __eq__( self, other ):
game.py(134):   def __hash__(self):
game.py(137):   def copy( self ):
game.py(143):   def getPosition(self):
game.py(147):   def getDirection(self):
game.py(150): class Grid:
 --- modulename: game, funcname: Grid
game.py(150): class Grid:
game.py(157):   """
game.py(158):   def __init__(self, width, height, initialValue=False, bitRepresentation=None):
game.py(168):   def __getitem__(self, i):
game.py(171):   def __setitem__(self, key, item):
game.py(174):   def __str__(self):
game.py(179):   def __eq__(self, other):
game.py(183):   def __hash__(self):
game.py(194):   def copy(self):
game.py(199):   def deepCopy(self):
game.py(202):   def shallowCopy(self):
game.py(207):   def count(self, item =True ):
game.py(210):   def asList(self, key = True):
game.py(217):   def packBits(self):
game.py(236):   def _cellIndexToPosition(self, index):
game.py(241):   def _unpackBits(self, bits):
game.py(253):   def _unpackInt(self, packed, size):
game.py(265): def reconstituteGrid(bitRep):
game.py(275): class Actions:
 --- modulename: game, funcname: Actions
game.py(275): class Actions:
game.py(278):   """
game.py(280):   _directions = {Directions.NORTH: (0, 1),
game.py(281):                  Directions.SOUTH: (0, -1),
game.py(282):                  Directions.EAST:  (1, 0),
game.py(283):                  Directions.WEST:  (-1, 0),
game.py(284):                  Directions.STOP:  (0, 0)}
game.py(286):   _directionsAsList = _directions.items()
game.py(288):   TOLERANCE = .001
game.py(290):   def reverseDirection(action):
game.py(300):   reverseDirection = staticmethod(reverseDirection)
game.py(302):   def vectorToDirection(vector):
game.py(313):   vectorToDirection = staticmethod(vectorToDirection)
game.py(315):   def directionToVector(direction, speed = 1.0):
game.py(318):   directionToVector = staticmethod(directionToVector)
game.py(320):   def getPossibleActions(config, walls):
game.py(337):   getPossibleActions = staticmethod(getPossibleActions)
game.py(339):   def getLegalNeighbors(position, walls):
game.py(351):   getLegalNeighbors = staticmethod(getLegalNeighbors)
game.py(353):   def getSuccessor(position, action):
game.py(357):   getSuccessor = staticmethod(getSuccessor)
game.py(359): class GameStateData:
 --- modulename: game, funcname: GameStateData
game.py(359): class GameStateData:
game.py(362):   """
game.py(363):   def __init__( self, prevState = None ):
game.py(381):   def deepCopy( self ):
game.py(390):   def copyAgentStates( self, agentStates ):
game.py(396):   def __eq__( self, other ):
game.py(408):   def __hash__( self ):
game.py(420):   def __str__( self ):
game.py(445):   def _foodWallStr( self, hasFood, hasWall ):
game.py(453):   def _pacStr( self, dir ):
game.py(462):   def _ghostStr( self, dir ):
game.py(472):   def initialize( self, layout, numGhostAgents ):
game.py(491): class Game:
 --- modulename: game, funcname: Game
game.py(491): class Game:
game.py(494):   """
game.py(496):   def __init__( self, agents, display, rules, startingIndex=0, muteAgents=False, catchExceptions=False ):
game.py(510):   def getProgress(self):
game.py(516):   def _agentCrash( self, agentIndex, quiet=False):
game.py(523):   OLD_STDOUT = None
game.py(524):   OLD_STDERR = None
game.py(526):   def mute(self):
game.py(535):   def unmute(self):
game.py(545):   def run( self ):
pacman.py(37): from game import Game
pacman.py(38): from game import Directions
pacman.py(39): from game import Actions
pacman.py(40): from util import nearestPoint
pacman.py(41): from util import manhattanDistance
pacman.py(42): import util, layout
 --- modulename: layout, funcname: <module>
layout.py(9): from util import manhattanDistance
layout.py(10): from game import Grid
layout.py(11): import os
layout.py(12): import random
layout.py(14): VISIBILITY_MATRIX_CACHE = {}
layout.py(16): class Layout:
 --- modulename: layout, funcname: Layout
layout.py(16): class Layout:
layout.py(19):   """
layout.py(21):   def __init__(self, layoutText):
layout.py(33):   def getNumGhosts(self):
layout.py(36):   def initializeVisibilityMatrix(self):
layout.py(57):   def isWall(self, pos):
layout.py(61):   def getRandomLegalPosition(self):
layout.py(69):   def getRandomCorner(self):
layout.py(73):   def getFurthestCorner(self, pacPos):
layout.py(78):   def isVisibleFrom(self, ghostPos, pacPos, pacDirection):
layout.py(82):   def __str__(self):
layout.py(85):   def deepCopy(self):
layout.py(88):   def processLayoutText(self, layoutText):
layout.py(109):   def processLayoutChar(self, x, y, layoutChar):
layout.py(124): def getLayout(name, back = 2):
layout.py(138): def tryToLoad(fullname):
pacman.py(43): import sys, types, time, random, os
pacman.py(49): class GameState:
 --- modulename: pacman, funcname: GameState
pacman.py(49): class GameState:
pacman.py(62):   """
pacman.py(68):   def getLegalActions( self, agentIndex=0 ):
pacman.py(79):   def generateSuccessor( self, agentIndex, action):
pacman.py(110):   def getLegalPacmanActions( self ):
pacman.py(113):   def generatePacmanSuccessor( self, action ):
pacman.py(119):   def getPacmanState( self ):
pacman.py(128):   def getPacmanPosition( self ):
pacman.py(131):   def getGhostStates( self ):
pacman.py(134):   def getGhostState( self, agentIndex ):
pacman.py(139):   def getGhostPosition( self, agentIndex ):
pacman.py(144):   def getGhostPositions(self):
pacman.py(147):   def getNumAgents( self ):
pacman.py(150):   def getScore( self ):
pacman.py(153):   def getCapsules(self):
pacman.py(159):   def getNumFood( self ):
pacman.py(162):   def getFood(self):
pacman.py(174):   def getWalls(self):
pacman.py(186):   def hasFood(self, x, y):
pacman.py(189):   def hasWall(self, x, y):
pacman.py(192):   def isLose( self ):
pacman.py(195):   def isWin( self ):
pacman.py(203):   def __init__( self, prevState = None ):
pacman.py(212):   def deepCopy( self ):
pacman.py(217):   def __eq__( self, other ):
pacman.py(223):   def __hash__( self ):
pacman.py(229):   def __str__( self ):
pacman.py(233):   def initialize( self, layout, numGhostAgents=1000 ):
pacman.py(245): SCARED_TIME = 40    # Moves ghosts are scared
pacman.py(246): COLLISION_TOLERANCE = 0.7 # How close ghosts must be to Pacman to kill
pacman.py(247): TIME_PENALTY = 1 # Number of points lost each round
pacman.py(249): class ClassicGameRules:
 --- modulename: pacman, funcname: ClassicGameRules
pacman.py(249): class ClassicGameRules:
pacman.py(253):   """
pacman.py(254):   def __init__(self, timeout=30):
pacman.py(257):   def newGame( self, layout, pacmanAgent, ghostAgents, display, quiet = False, catchExceptions=False):
pacman.py(267):   def process(self, state, game):
pacman.py(274):   def win( self, state, game ):
pacman.py(278):   def lose( self, state, game ):
pacman.py(282):   def getProgress(self, game):
pacman.py(285):   def agentCrash(self, game, agentIndex):
pacman.py(291):   def getMaxTotalTime(self, agentIndex):
pacman.py(294):   def getMaxStartupTime(self, agentIndex):
pacman.py(297):   def getMoveWarningTime(self, agentIndex):
pacman.py(300):   def getMoveTimeout(self, agentIndex):
pacman.py(303):   def getMaxTimeWarnings(self, agentIndex):
pacman.py(306): class PacmanRules:
 --- modulename: pacman, funcname: PacmanRules
pacman.py(306): class PacmanRules:
pacman.py(310):   """
pacman.py(311):   PACMAN_SPEED=1
pacman.py(313):   def getLegalActions( state ):
pacman.py(318):   getLegalActions = staticmethod( getLegalActions )
pacman.py(320):   def applyAction( state, action ):
pacman.py(340):   applyAction = staticmethod( applyAction )
pacman.py(342):   def consume( position, state ):
pacman.py(362):   consume = staticmethod( consume )
pacman.py(364): class GhostRules:
 --- modulename: pacman, funcname: GhostRules
pacman.py(364): class GhostRules:
pacman.py(367):   """
pacman.py(368):   GHOST_SPEED=1.0
pacman.py(369):   def getLegalActions( state, ghostIndex ):
pacman.py(382):   getLegalActions = staticmethod( getLegalActions )
pacman.py(384):   def applyAction( state, action, ghostIndex):
pacman.py(395):   applyAction = staticmethod( applyAction )
pacman.py(397):   def decrementTimer( ghostState):
pacman.py(402):   decrementTimer = staticmethod( decrementTimer )
pacman.py(404):   def checkDeath( state, agentIndex):
pacman.py(417):   checkDeath = staticmethod( checkDeath )
pacman.py(419):   def collide( state, ghostState, agentIndex):
pacman.py(430):   collide = staticmethod( collide )
pacman.py(432):   def canKill( pacmanPosition, ghostPosition ):
pacman.py(434):   canKill = staticmethod( canKill )
pacman.py(436):   def placeGhost(state, ghostState):
pacman.py(438):   placeGhost = staticmethod( placeGhost )
pacman.py(444): def default(str):
pacman.py(447): def parseAgentArgs(str):
pacman.py(459): def readCommand( argv ):
pacman.py(570): def loadAgent(pacman, nographics):
pacman.py(593): def replayGame( layout, actions, display ):
pacman.py(611): def runGames( layout, pacman, ghosts, display, numGames, record, numTraining = 0, catchExceptions=False, timeout=30 ):
pacman.py(651): if __name__ == '__main__':
pacman.py(662):   args = readCommand( sys.argv[1:] ) # Get game components based on input
 --- modulename: pacman, funcname: readCommand
pacman.py(463):   from optparse import OptionParser
 --- modulename: optparse, funcname: <module>
optparse.py(22): """
optparse.py(24): __version__ = "1.5.3"
optparse.py(26): __all__ = ['Option',
optparse.py(27):            'make_option',
optparse.py(28):            'SUPPRESS_HELP',
optparse.py(29):            'SUPPRESS_USAGE',
optparse.py(30):            'Values',
optparse.py(31):            'OptionContainer',
optparse.py(32):            'OptionGroup',
optparse.py(33):            'OptionParser',
optparse.py(34):            'HelpFormatter',
optparse.py(35):            'IndentedHelpFormatter',
optparse.py(36):            'TitledHelpFormatter',
optparse.py(37):            'OptParseError',
optparse.py(38):            'OptionError',
optparse.py(39):            'OptionConflictError',
optparse.py(40):            'OptionValueError',
optparse.py(41):            'BadOptionError']
optparse.py(73): """
optparse.py(75): import sys, os
optparse.py(76): import types
optparse.py(77): import textwrap
 --- modulename: textwrap, funcname: <module>
textwrap.py(2): """
textwrap.py(8): __revision__ = "$Id$"
textwrap.py(10): import string, re
textwrap.py(12): try:
textwrap.py(13):     _unicode = unicode
textwrap.py(28): __all__ = ['TextWrapper', 'wrap', 'fill', 'dedent']
textwrap.py(38): _whitespace = '\t\n\x0b\x0c\r '
textwrap.py(40): class TextWrapper:
 --- modulename: textwrap, funcname: TextWrapper
textwrap.py(40): class TextWrapper:
textwrap.py(80):     """
textwrap.py(82):     whitespace_trans = string.maketrans(_whitespace, ' ' * len(_whitespace))
textwrap.py(84):     unicode_whitespace_trans = {}
textwrap.py(85):     uspace = ord(u' ')
textwrap.py(86):     for x in map(ord, _whitespace):
textwrap.py(87):         unicode_whitespace_trans[x] = uspace
textwrap.py(86):     for x in map(ord, _whitespace):
textwrap.py(87):         unicode_whitespace_trans[x] = uspace
textwrap.py(86):     for x in map(ord, _whitespace):
textwrap.py(87):         unicode_whitespace_trans[x] = uspace
textwrap.py(86):     for x in map(ord, _whitespace):
textwrap.py(87):         unicode_whitespace_trans[x] = uspace
textwrap.py(86):     for x in map(ord, _whitespace):
textwrap.py(87):         unicode_whitespace_trans[x] = uspace
textwrap.py(86):     for x in map(ord, _whitespace):
textwrap.py(87):         unicode_whitespace_trans[x] = uspace
textwrap.py(86):     for x in map(ord, _whitespace):
textwrap.py(95):     wordsep_re = re.compile(
textwrap.py(96):         r'(\s+|'                                  # any whitespace
 --- modulename: re, funcname: compile
re.py(190):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
re.py(228):     cachekey = (type(key[0]),) + key
re.py(229):     p = _cache.get(cachekey)
re.py(230):     if p is not None:
re.py(232):     pattern, flags = key
re.py(233):     if isinstance(pattern, _pattern_type):
re.py(237):     if not sre_compile.isstring(pattern):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(476):     for tp in STRING_TYPES:
sre_compile.py(477):         if isinstance(obj, tp):
sre_compile.py(478):             return 1
re.py(239):     try:
re.py(240):         p = sre_compile.compile(pattern, flags)
 --- modulename: sre_compile, funcname: compile
sre_compile.py(499):     if isstring(p):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(476):     for tp in STRING_TYPES:
sre_compile.py(477):         if isinstance(obj, tp):
sre_compile.py(478):             return 1
sre_compile.py(500):         pattern = p
sre_compile.py(501):         p = sre_parse.parse(p, flags)
 --- modulename: sre_parse, funcname: parse
sre_parse.py(679):     source = Tokenizer(str)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(180):         self.string = string
sre_parse.py(181):         self.index = 0
sre_parse.py(182):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(681):     if pattern is None:
sre_parse.py(682):         pattern = Pattern()
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(69):         self.flags = 0
sre_parse.py(70):         self.open = []
sre_parse.py(71):         self.groups = 1
sre_parse.py(72):         self.groupdict = {}
sre_parse.py(683):     pattern.flags = flags
sre_parse.py(684):     pattern.str = str
sre_parse.py(686):     p = _parse_sub(source, pattern, 0)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(305):     items = []
sre_parse.py(306):     itemsappend = items.append
sre_parse.py(307):     sourcematch = source.match
sre_parse.py(308):     while 1:
sre_parse.py(309):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(382):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(92):         self.pattern = pattern
sre_parse.py(93):         if data is None:
sre_parse.py(94):             data = []
sre_parse.py(95):         self.data = data
sre_parse.py(96):         self.width = None
sre_parse.py(385):     subpatternappend = subpattern.append
sre_parse.py(386):     sourceget = source.get
sre_parse.py(387):     sourcematch = source.match
sre_parse.py(388):     _len = len
sre_parse.py(389):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(390):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(391):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(392):     REPEATCODES = _REPEATCODES
sre_parse.py(394):     while 1:
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(189):             try:
sre_parse.py(190):                 c = self.string[self.index + 1]
sre_parse.py(193):             char = char + c
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(402):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(413):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(416):         elif this == "[":
sre_parse.py(473):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(526):         elif this == ".":
sre_parse.py(529):         elif this == "(":
sre_parse.py(530):             group = 1
sre_parse.py(531):             name = None
sre_parse.py(532):             condgroup = None
sre_parse.py(533):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(636):             if group:
sre_parse.py(638):                 if group == 2:
sre_parse.py(642):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
sre_parse.py(74):         gid = self.groups
sre_parse.py(75):         self.groups = gid + 1
sre_parse.py(76):         if name is not None:
sre_parse.py(82):         self.open.append(gid)
sre_parse.py(83):         return gid
sre_parse.py(643):                 if condgroup:
sre_parse.py(646):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(305):     items = []
sre_parse.py(306):     itemsappend = items.append
sre_parse.py(307):     sourcematch = source.match
sre_parse.py(308):     while 1:
sre_parse.py(309):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(382):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(92):         self.pattern = pattern
sre_parse.py(93):         if data is None:
sre_parse.py(94):             data = []
sre_parse.py(95):         self.data = data
sre_parse.py(96):         self.width = None
sre_parse.py(385):     subpatternappend = subpattern.append
sre_parse.py(386):     sourceget = source.get
sre_parse.py(387):     sourcematch = source.match
sre_parse.py(388):     _len = len
sre_parse.py(389):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(390):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(391):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(392):     REPEATCODES = _REPEATCODES
sre_parse.py(394):     while 1:
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(402):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(413):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(416):         elif this == "[":
sre_parse.py(473):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(526):         elif this == ".":
sre_parse.py(529):         elif this == "(":
sre_parse.py(661):         elif this == "^":
sre_parse.py(664):         elif this == "$":
sre_parse.py(667):         elif this and this[0] == "\\":
sre_parse.py(668):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(260):     code = CATEGORIES.get(escape)
sre_parse.py(261):     if code:
sre_parse.py(262):         return code
sre_parse.py(669):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(140):         self.data.append(code)
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(402):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(413):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(416):         elif this == "[":
sre_parse.py(473):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(475):             if this == "?":
sre_parse.py(477):             elif this == "*":
sre_parse.py(480):             elif this == "+":
sre_parse.py(481):                 min, max = 1, MAXREPEAT
sre_parse.py(513):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
sre_parse.py(514):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(133):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(92):         self.pattern = pattern
sre_parse.py(93):         if data is None:
sre_parse.py(95):         self.data = data
sre_parse.py(96):         self.width = None
sre_parse.py(517):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_parse.py(519):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_parse.py(521):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(524):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(136):         self.data[index] = code
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(397):             break # end of subpattern
sre_parse.py(674):     return subpattern
sre_parse.py(310):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(198):             if skip:
sre_parse.py(199):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(200):             return 1
sre_parse.py(311):             continue
sre_parse.py(309):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(382):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(92):         self.pattern = pattern
sre_parse.py(93):         if data is None:
sre_parse.py(94):             data = []
sre_parse.py(95):         self.data = data
sre_parse.py(96):         self.width = None
sre_parse.py(385):     subpatternappend = subpattern.append
sre_parse.py(386):     sourceget = source.get
sre_parse.py(387):     sourcematch = source.match
sre_parse.py(388):     _len = len
sre_parse.py(389):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(390):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(391):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(392):     REPEATCODES = _REPEATCODES
sre_parse.py(394):     while 1:
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(402):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(413):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(416):         elif this == "[":
sre_parse.py(418):             set = []
sre_parse.py(419):             setappend = set.append
sre_parse.py(422):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(198):             if skip:
sre_parse.py(199):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(189):             try:
sre_parse.py(190):                 c = self.string[self.index + 1]
sre_parse.py(193):             char = char + c
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(200):             return 1
sre_parse.py(423):                 setappend((NEGATE, None))
sre_parse.py(425):             start = set[:]
sre_parse.py(426):             while 1:
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(189):             try:
sre_parse.py(190):                 c = self.string[self.index + 1]
sre_parse.py(193):             char = char + c
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(431):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(228):     code = ESCAPES.get(escape)
sre_parse.py(229):     if code:
sre_parse.py(231):     code = CATEGORIES.get(escape)
sre_parse.py(232):     if code and code[0] == IN:
sre_parse.py(233):         return code
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(461):                         code1 = code1[1][0]
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(431):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(228):     code = ESCAPES.get(escape)
sre_parse.py(229):     if code:
sre_parse.py(231):     code = CATEGORIES.get(escape)
sre_parse.py(232):     if code and code[0] == IN:
sre_parse.py(233):         return code
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(461):                         code1 = code1[1][0]
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(429):                     break
sre_parse.py(465):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(467):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
sre_parse.py(471):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(140):         self.data.append(code)
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(189):             try:
sre_parse.py(190):                 c = self.string[self.index + 1]
sre_parse.py(193):             char = char + c
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(402):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(413):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(416):         elif this == "[":
sre_parse.py(473):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(475):             if this == "?":
sre_parse.py(477):             elif this == "*":
sre_parse.py(478):                 min, max = 0, MAXREPEAT
sre_parse.py(513):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
sre_parse.py(514):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(133):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(92):         self.pattern = pattern
sre_parse.py(93):         if data is None:
sre_parse.py(95):         self.data = data
sre_parse.py(96):         self.width = None
sre_parse.py(517):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_parse.py(519):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_parse.py(521):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(524):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(136):         self.data[index] = code
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(402):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(413):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(416):         elif this == "[":
sre_parse.py(473):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(526):         elif this == ".":
sre_parse.py(529):         elif this == "(":
sre_parse.py(661):         elif this == "^":
sre_parse.py(664):         elif this == "$":
sre_parse.py(667):         elif this and this[0] == "\\":
sre_parse.py(668):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(260):     code = CATEGORIES.get(escape)
sre_parse.py(261):     if code:
sre_parse.py(262):         return code
sre_parse.py(669):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(140):         self.data.append(code)
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(402):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(413):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(416):         elif this == "[":
sre_parse.py(473):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(475):             if this == "?":
sre_parse.py(477):             elif this == "*":
sre_parse.py(480):             elif this == "+":
sre_parse.py(481):                 min, max = 1, MAXREPEAT
sre_parse.py(513):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
sre_parse.py(514):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(133):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(92):         self.pattern = pattern
sre_parse.py(93):         if data is None:
sre_parse.py(95):         self.data = data
sre_parse.py(96):         self.width = None
sre_parse.py(517):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_parse.py(519):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_parse.py(521):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(524):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(136):         self.data[index] = code
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(402):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(413):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(416):         elif this == "[":
sre_parse.py(418):             set = []
sre_parse.py(419):             setappend = set.append
sre_parse.py(422):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(198):             if skip:
sre_parse.py(199):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(200):             return 1
sre_parse.py(423):                 setappend((NEGATE, None))
sre_parse.py(425):             start = set[:]
sre_parse.py(426):             while 1:
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(198):             if skip:
sre_parse.py(199):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(200):             return 1
sre_parse.py(438):                     this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(189):             try:
sre_parse.py(190):                 c = self.string[self.index + 1]
sre_parse.py(193):             char = char + c
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(439):                     if this == "]":
sre_parse.py(445):                     elif this:
sre_parse.py(446):                         if this[0] == "\\":
sre_parse.py(449):                             code2 = LITERAL, ord(this)
sre_parse.py(450):                         if code1[0] != LITERAL or code2[0] != LITERAL:
sre_parse.py(452):                         lo = code1[1]
sre_parse.py(453):                         hi = code2[1]
sre_parse.py(454):                         if hi < lo:
sre_parse.py(456):                         setappend((RANGE, (lo, hi)))
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(431):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(228):     code = ESCAPES.get(escape)
sre_parse.py(229):     if code:
sre_parse.py(231):     code = CATEGORIES.get(escape)
sre_parse.py(232):     if code and code[0] == IN:
sre_parse.py(233):         return code
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(461):                         code1 = code1[1][0]
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(429):                     break
sre_parse.py(465):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(467):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
sre_parse.py(471):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(140):         self.data.append(code)
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(402):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(413):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(414):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(140):         self.data.append(code)
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(402):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(413):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(416):         elif this == "[":
sre_parse.py(473):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(526):         elif this == ".":
sre_parse.py(529):         elif this == "(":
sre_parse.py(530):             group = 1
sre_parse.py(531):             name = None
sre_parse.py(532):             condgroup = None
sre_parse.py(533):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(198):             if skip:
sre_parse.py(199):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(200):             return 1
sre_parse.py(534):                 group = 0
sre_parse.py(536):                 if sourcematch("P"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(579):                 elif sourcematch(":"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(582):                 elif sourcematch("#"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(591):                 elif source.next in ASSERTCHARS:
sre_parse.py(593):                     char = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(189):             try:
sre_parse.py(190):                 c = self.string[self.index + 1]
sre_parse.py(193):             char = char + c
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(594):                     dir = 1
sre_parse.py(595):                     if char == "<":
sre_parse.py(600):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(305):     items = []
sre_parse.py(306):     itemsappend = items.append
sre_parse.py(307):     sourcematch = source.match
sre_parse.py(308):     while 1:
sre_parse.py(309):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(382):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(92):         self.pattern = pattern
sre_parse.py(93):         if data is None:
sre_parse.py(94):             data = []
sre_parse.py(95):         self.data = data
sre_parse.py(96):         self.width = None
sre_parse.py(385):     subpatternappend = subpattern.append
sre_parse.py(386):     sourceget = source.get
sre_parse.py(387):     sourcematch = source.match
sre_parse.py(388):     _len = len
sre_parse.py(389):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(390):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(391):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(392):     REPEATCODES = _REPEATCODES
sre_parse.py(394):     while 1:
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(402):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(413):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(416):         elif this == "[":
sre_parse.py(473):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(526):         elif this == ".":
sre_parse.py(529):         elif this == "(":
sre_parse.py(661):         elif this == "^":
sre_parse.py(664):         elif this == "$":
sre_parse.py(667):         elif this and this[0] == "\\":
sre_parse.py(668):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(260):     code = CATEGORIES.get(escape)
sre_parse.py(261):     if code:
sre_parse.py(262):         return code
sre_parse.py(669):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(140):         self.data.append(code)
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(402):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(413):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(416):         elif this == "[":
sre_parse.py(473):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(475):             if this == "?":
sre_parse.py(477):             elif this == "*":
sre_parse.py(480):             elif this == "+":
sre_parse.py(481):                 min, max = 1, MAXREPEAT
sre_parse.py(513):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
sre_parse.py(514):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(133):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(92):         self.pattern = pattern
sre_parse.py(93):         if data is None:
sre_parse.py(95):         self.data = data
sre_parse.py(96):         self.width = None
sre_parse.py(517):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_parse.py(519):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_parse.py(521):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(524):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(136):         self.data[index] = code
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(402):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(413):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(416):         elif this == "[":
sre_parse.py(418):             set = []
sre_parse.py(419):             setappend = set.append
sre_parse.py(422):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(198):             if skip:
sre_parse.py(199):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(200):             return 1
sre_parse.py(423):                 setappend((NEGATE, None))
sre_parse.py(425):             start = set[:]
sre_parse.py(426):             while 1:
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(198):             if skip:
sre_parse.py(199):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(200):             return 1
sre_parse.py(438):                     this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(189):             try:
sre_parse.py(190):                 c = self.string[self.index + 1]
sre_parse.py(193):             char = char + c
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(439):                     if this == "]":
sre_parse.py(445):                     elif this:
sre_parse.py(446):                         if this[0] == "\\":
sre_parse.py(449):                             code2 = LITERAL, ord(this)
sre_parse.py(450):                         if code1[0] != LITERAL or code2[0] != LITERAL:
sre_parse.py(452):                         lo = code1[1]
sre_parse.py(453):                         hi = code2[1]
sre_parse.py(454):                         if hi < lo:
sre_parse.py(456):                         setappend((RANGE, (lo, hi)))
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(431):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(228):     code = ESCAPES.get(escape)
sre_parse.py(229):     if code:
sre_parse.py(231):     code = CATEGORIES.get(escape)
sre_parse.py(232):     if code and code[0] == IN:
sre_parse.py(233):         return code
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(461):                         code1 = code1[1][0]
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(429):                     break
sre_parse.py(465):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(467):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
sre_parse.py(471):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(140):         self.data.append(code)
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(397):             break # end of subpattern
sre_parse.py(674):     return subpattern
sre_parse.py(310):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(312):         if not nested:
sre_parse.py(314):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(198):             if skip:
sre_parse.py(200):             return 1
sre_parse.py(315):             break
sre_parse.py(319):     if len(items) == 1:
sre_parse.py(320):         return items[0]
sre_parse.py(601):                     if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(198):             if skip:
sre_parse.py(199):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(200):             return 1
sre_parse.py(603):                     if char == "=":
sre_parse.py(604):                         subpatternappend((ASSERT, (dir, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(140):         self.data.append(code)
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(397):             break # end of subpattern
sre_parse.py(674):     return subpattern
sre_parse.py(310):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(198):             if skip:
sre_parse.py(199):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(200):             return 1
sre_parse.py(311):             continue
sre_parse.py(309):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(382):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(92):         self.pattern = pattern
sre_parse.py(93):         if data is None:
sre_parse.py(94):             data = []
sre_parse.py(95):         self.data = data
sre_parse.py(96):         self.width = None
sre_parse.py(385):     subpatternappend = subpattern.append
sre_parse.py(386):     sourceget = source.get
sre_parse.py(387):     sourcematch = source.match
sre_parse.py(388):     _len = len
sre_parse.py(389):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(390):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(391):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(392):     REPEATCODES = _REPEATCODES
sre_parse.py(394):     while 1:
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(402):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(413):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(416):         elif this == "[":
sre_parse.py(473):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(526):         elif this == ".":
sre_parse.py(529):         elif this == "(":
sre_parse.py(530):             group = 1
sre_parse.py(531):             name = None
sre_parse.py(532):             condgroup = None
sre_parse.py(533):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(198):             if skip:
sre_parse.py(199):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(200):             return 1
sre_parse.py(534):                 group = 0
sre_parse.py(536):                 if sourcematch("P"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(579):                 elif sourcematch(":"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(582):                 elif sourcematch("#"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(591):                 elif source.next in ASSERTCHARS:
sre_parse.py(593):                     char = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(594):                     dir = 1
sre_parse.py(595):                     if char == "<":
sre_parse.py(596):                         if source.next not in LOOKBEHINDASSERTCHARS:
sre_parse.py(598):                         dir = -1 # lookbehind
sre_parse.py(599):                         char = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(600):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(305):     items = []
sre_parse.py(306):     itemsappend = items.append
sre_parse.py(307):     sourcematch = source.match
sre_parse.py(308):     while 1:
sre_parse.py(309):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(382):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(92):         self.pattern = pattern
sre_parse.py(93):         if data is None:
sre_parse.py(94):             data = []
sre_parse.py(95):         self.data = data
sre_parse.py(96):         self.width = None
sre_parse.py(385):     subpatternappend = subpattern.append
sre_parse.py(386):     sourceget = source.get
sre_parse.py(387):     sourcematch = source.match
sre_parse.py(388):     _len = len
sre_parse.py(389):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(390):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(391):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(392):     REPEATCODES = _REPEATCODES
sre_parse.py(394):     while 1:
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(189):             try:
sre_parse.py(190):                 c = self.string[self.index + 1]
sre_parse.py(193):             char = char + c
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(402):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(413):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(416):         elif this == "[":
sre_parse.py(418):             set = []
sre_parse.py(419):             setappend = set.append
sre_parse.py(422):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(425):             start = set[:]
sre_parse.py(426):             while 1:
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(189):             try:
sre_parse.py(190):                 c = self.string[self.index + 1]
sre_parse.py(193):             char = char + c
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(431):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(228):     code = ESCAPES.get(escape)
sre_parse.py(229):     if code:
sre_parse.py(231):     code = CATEGORIES.get(escape)
sre_parse.py(232):     if code and code[0] == IN:
sre_parse.py(233):         return code
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(461):                         code1 = code1[1][0]
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(189):             try:
sre_parse.py(190):                 c = self.string[self.index + 1]
sre_parse.py(193):             char = char + c
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(431):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(228):     code = ESCAPES.get(escape)
sre_parse.py(229):     if code:
sre_parse.py(231):     code = CATEGORIES.get(escape)
sre_parse.py(232):     if code and code[0] == IN:
sre_parse.py(234):     try:
sre_parse.py(235):         c = escape[1:2]
sre_parse.py(236):         if c == "x":
sre_parse.py(244):         elif c in OCTDIGITS:
sre_parse.py(250):         elif c in DIGITS:
sre_parse.py(252):         if len(escape) == 2:
sre_parse.py(253):             return LITERAL, ord(escape[1])
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(189):             try:
sre_parse.py(190):                 c = self.string[self.index + 1]
sre_parse.py(193):             char = char + c
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(431):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(228):     code = ESCAPES.get(escape)
sre_parse.py(229):     if code:
sre_parse.py(231):     code = CATEGORIES.get(escape)
sre_parse.py(232):     if code and code[0] == IN:
sre_parse.py(234):     try:
sre_parse.py(235):         c = escape[1:2]
sre_parse.py(236):         if c == "x":
sre_parse.py(244):         elif c in OCTDIGITS:
sre_parse.py(250):         elif c in DIGITS:
sre_parse.py(252):         if len(escape) == 2:
sre_parse.py(253):             return LITERAL, ord(escape[1])
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(189):             try:
sre_parse.py(190):                 c = self.string[self.index + 1]
sre_parse.py(193):             char = char + c
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(431):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(228):     code = ESCAPES.get(escape)
sre_parse.py(229):     if code:
sre_parse.py(231):     code = CATEGORIES.get(escape)
sre_parse.py(232):     if code and code[0] == IN:
sre_parse.py(234):     try:
sre_parse.py(235):         c = escape[1:2]
sre_parse.py(236):         if c == "x":
sre_parse.py(244):         elif c in OCTDIGITS:
sre_parse.py(250):         elif c in DIGITS:
sre_parse.py(252):         if len(escape) == 2:
sre_parse.py(253):             return LITERAL, ord(escape[1])
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(189):             try:
sre_parse.py(190):                 c = self.string[self.index + 1]
sre_parse.py(193):             char = char + c
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(431):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(228):     code = ESCAPES.get(escape)
sre_parse.py(229):     if code:
sre_parse.py(231):     code = CATEGORIES.get(escape)
sre_parse.py(232):     if code and code[0] == IN:
sre_parse.py(234):     try:
sre_parse.py(235):         c = escape[1:2]
sre_parse.py(236):         if c == "x":
sre_parse.py(244):         elif c in OCTDIGITS:
sre_parse.py(250):         elif c in DIGITS:
sre_parse.py(252):         if len(escape) == 2:
sre_parse.py(253):             return LITERAL, ord(escape[1])
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(189):             try:
sre_parse.py(190):                 c = self.string[self.index + 1]
sre_parse.py(193):             char = char + c
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(431):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(228):     code = ESCAPES.get(escape)
sre_parse.py(229):     if code:
sre_parse.py(231):     code = CATEGORIES.get(escape)
sre_parse.py(232):     if code and code[0] == IN:
sre_parse.py(234):     try:
sre_parse.py(235):         c = escape[1:2]
sre_parse.py(236):         if c == "x":
sre_parse.py(244):         elif c in OCTDIGITS:
sre_parse.py(250):         elif c in DIGITS:
sre_parse.py(252):         if len(escape) == 2:
sre_parse.py(253):             return LITERAL, ord(escape[1])
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(189):             try:
sre_parse.py(190):                 c = self.string[self.index + 1]
sre_parse.py(193):             char = char + c
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(431):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(228):     code = ESCAPES.get(escape)
sre_parse.py(229):     if code:
sre_parse.py(231):     code = CATEGORIES.get(escape)
sre_parse.py(232):     if code and code[0] == IN:
sre_parse.py(234):     try:
sre_parse.py(235):         c = escape[1:2]
sre_parse.py(236):         if c == "x":
sre_parse.py(244):         elif c in OCTDIGITS:
sre_parse.py(250):         elif c in DIGITS:
sre_parse.py(252):         if len(escape) == 2:
sre_parse.py(253):             return LITERAL, ord(escape[1])
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(431):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(228):     code = ESCAPES.get(escape)
sre_parse.py(229):     if code:
sre_parse.py(231):     code = CATEGORIES.get(escape)
sre_parse.py(232):     if code and code[0] == IN:
sre_parse.py(234):     try:
sre_parse.py(235):         c = escape[1:2]
sre_parse.py(236):         if c == "x":
sre_parse.py(244):         elif c in OCTDIGITS:
sre_parse.py(250):         elif c in DIGITS:
sre_parse.py(252):         if len(escape) == 2:
sre_parse.py(253):             return LITERAL, ord(escape[1])
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(429):                     break
sre_parse.py(465):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(467):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
sre_parse.py(471):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(140):         self.data.append(code)
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(397):             break # end of subpattern
sre_parse.py(674):     return subpattern
sre_parse.py(310):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(312):         if not nested:
sre_parse.py(314):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(198):             if skip:
sre_parse.py(200):             return 1
sre_parse.py(315):             break
sre_parse.py(319):     if len(items) == 1:
sre_parse.py(320):         return items[0]
sre_parse.py(601):                     if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(198):             if skip:
sre_parse.py(199):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(200):             return 1
sre_parse.py(603):                     if char == "=":
sre_parse.py(604):                         subpatternappend((ASSERT, (dir, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(140):         self.data.append(code)
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(402):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(413):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(414):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(140):         self.data.append(code)
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(402):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(413):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(416):         elif this == "[":
sre_parse.py(473):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(475):             if this == "?":
sre_parse.py(477):             elif this == "*":
sre_parse.py(480):             elif this == "+":
sre_parse.py(482):             elif this == "{":
sre_parse.py(483):                 if source.next == "}":
sre_parse.py(486):                 here = source.tell()
 --- modulename: sre_parse, funcname: tell
sre_parse.py(207):         return self.index, self.next
sre_parse.py(487):                 min, max = 0, MAXREPEAT
sre_parse.py(488):                 lo = hi = ""
sre_parse.py(489):                 while source.next in DIGITS:
sre_parse.py(490):                     lo = lo + source.get()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(489):                 while source.next in DIGITS:
sre_parse.py(491):                 if sourcematch(","):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(198):             if skip:
sre_parse.py(199):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(200):             return 1
sre_parse.py(492):                     while source.next in DIGITS:
sre_parse.py(496):                 if not sourcematch("}"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(198):             if skip:
sre_parse.py(199):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(200):             return 1
sre_parse.py(500):                 if lo:
sre_parse.py(501):                     min = int(lo)
sre_parse.py(502):                     if min >= MAXREPEAT:
sre_parse.py(504):                 if hi:
sre_parse.py(513):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
sre_parse.py(514):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(133):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(92):         self.pattern = pattern
sre_parse.py(93):         if data is None:
sre_parse.py(95):         self.data = data
sre_parse.py(96):         self.width = None
sre_parse.py(517):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_parse.py(519):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_parse.py(521):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(524):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(136):         self.data[index] = code
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(402):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(413):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(416):         elif this == "[":
sre_parse.py(473):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(526):         elif this == ".":
sre_parse.py(529):         elif this == "(":
sre_parse.py(530):             group = 1
sre_parse.py(531):             name = None
sre_parse.py(532):             condgroup = None
sre_parse.py(533):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(198):             if skip:
sre_parse.py(199):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(200):             return 1
sre_parse.py(534):                 group = 0
sre_parse.py(536):                 if sourcematch("P"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(579):                 elif sourcematch(":"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(582):                 elif sourcematch("#"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(591):                 elif source.next in ASSERTCHARS:
sre_parse.py(593):                     char = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(189):             try:
sre_parse.py(190):                 c = self.string[self.index + 1]
sre_parse.py(193):             char = char + c
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(594):                     dir = 1
sre_parse.py(595):                     if char == "<":
sre_parse.py(600):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(305):     items = []
sre_parse.py(306):     itemsappend = items.append
sre_parse.py(307):     sourcematch = source.match
sre_parse.py(308):     while 1:
sre_parse.py(309):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(382):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(92):         self.pattern = pattern
sre_parse.py(93):         if data is None:
sre_parse.py(94):             data = []
sre_parse.py(95):         self.data = data
sre_parse.py(96):         self.width = None
sre_parse.py(385):     subpatternappend = subpattern.append
sre_parse.py(386):     sourceget = source.get
sre_parse.py(387):     sourcematch = source.match
sre_parse.py(388):     _len = len
sre_parse.py(389):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(390):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(391):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(392):     REPEATCODES = _REPEATCODES
sre_parse.py(394):     while 1:
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(402):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(413):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(416):         elif this == "[":
sre_parse.py(473):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(526):         elif this == ".":
sre_parse.py(529):         elif this == "(":
sre_parse.py(661):         elif this == "^":
sre_parse.py(664):         elif this == "$":
sre_parse.py(667):         elif this and this[0] == "\\":
sre_parse.py(668):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(260):     code = CATEGORIES.get(escape)
sre_parse.py(261):     if code:
sre_parse.py(262):         return code
sre_parse.py(669):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(140):         self.data.append(code)
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(397):             break # end of subpattern
sre_parse.py(674):     return subpattern
sre_parse.py(310):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(312):         if not nested:
sre_parse.py(314):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(198):             if skip:
sre_parse.py(200):             return 1
sre_parse.py(315):             break
sre_parse.py(319):     if len(items) == 1:
sre_parse.py(320):         return items[0]
sre_parse.py(601):                     if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(198):             if skip:
sre_parse.py(199):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(200):             return 1
sre_parse.py(603):                     if char == "=":
sre_parse.py(604):                         subpatternappend((ASSERT, (dir, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(140):         self.data.append(code)
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(397):             break # end of subpattern
sre_parse.py(674):     return subpattern
sre_parse.py(310):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(312):         if not nested:
sre_parse.py(314):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(198):             if skip:
sre_parse.py(200):             return 1
sre_parse.py(315):             break
sre_parse.py(319):     if len(items) == 1:
sre_parse.py(322):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(92):         self.pattern = pattern
sre_parse.py(93):         if data is None:
sre_parse.py(94):             data = []
sre_parse.py(95):         self.data = data
sre_parse.py(96):         self.width = None
sre_parse.py(323):     subpatternappend = subpattern.append
sre_parse.py(326):     while 1:
sre_parse.py(327):         prefix = None
sre_parse.py(328):         for item in items:
sre_parse.py(329):             if not item:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
sre_parse.py(331):             if prefix is None:
sre_parse.py(332):                 prefix = item[0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_parse.py(328):         for item in items:
sre_parse.py(329):             if not item:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
sre_parse.py(331):             if prefix is None:
sre_parse.py(333):             elif item[0] != prefix:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_parse.py(334):                 break
sre_parse.py(342):         break
sre_parse.py(345):     for item in items:
sre_parse.py(346):         if len(item) != 1 or item[0][0] != LITERAL:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_parse.py(347):             break
sre_parse.py(358):     subpattern.append((BRANCH, (None, items)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(140):         self.data.append(code)
sre_parse.py(359):     return subpattern
sre_parse.py(647):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(198):             if skip:
sre_parse.py(199):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(185):             self.next = None
sre_parse.py(186):             return
sre_parse.py(200):             return 1
sre_parse.py(649):                 if group is not None:
sre_parse.py(650):                     state.closegroup(group)
 --- modulename: sre_parse, funcname: closegroup
sre_parse.py(85):         self.open.remove(gid)
sre_parse.py(651):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(140):         self.data.append(code)
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(185):             self.next = None
sre_parse.py(186):             return
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(400):             break # end of pattern
sre_parse.py(674):     return subpattern
sre_parse.py(310):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(312):         if not nested:
sre_parse.py(313):             break
sre_parse.py(319):     if len(items) == 1:
sre_parse.py(320):         return items[0]
sre_parse.py(688):     tail = source.get()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(185):             self.next = None
sre_parse.py(186):             return
sre_parse.py(205):         return this
sre_parse.py(689):     if tail == ")":
sre_parse.py(691):     elif tail:
sre_parse.py(694):     if flags & SRE_FLAG_DEBUG:
sre_parse.py(697):     if not (flags & SRE_FLAG_VERBOSE) and p.pattern.flags & SRE_FLAG_VERBOSE:
sre_parse.py(702):     return p
sre_compile.py(505):     code = _code(p, flags)
 --- modulename: sre_compile, funcname: _code
sre_compile.py(483):     flags = p.pattern.flags | flags
sre_compile.py(484):     code = []
sre_compile.py(487):     _compile_info(code, p, flags)
 --- modulename: sre_compile, funcname: _compile_info
sre_compile.py(366):     lo, hi = pattern.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(143):         if self.width:
sre_parse.py(145):         lo = hi = 0L
sre_parse.py(146):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(147):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(149):             if op is BRANCH:
sre_parse.py(158):             elif op is CALL:
sre_parse.py(162):             elif op is SUBPATTERN:
sre_parse.py(163):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(143):         if self.width:
sre_parse.py(145):         lo = hi = 0L
sre_parse.py(146):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(147):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(149):             if op is BRANCH:
sre_parse.py(150):                 i = sys.maxint
sre_parse.py(151):                 j = 0
sre_parse.py(152):                 for av in av[1]:
sre_parse.py(153):                     l, h = av.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(143):         if self.width:
sre_parse.py(145):         lo = hi = 0L
sre_parse.py(146):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(147):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(149):             if op is BRANCH:
sre_parse.py(158):             elif op is CALL:
sre_parse.py(162):             elif op is SUBPATTERN:
sre_parse.py(166):             elif op in REPEATCODES:
sre_parse.py(167):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(143):         if self.width:
sre_parse.py(145):         lo = hi = 0L
sre_parse.py(146):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(147):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(149):             if op is BRANCH:
sre_parse.py(158):             elif op is CALL:
sre_parse.py(162):             elif op is SUBPATTERN:
sre_parse.py(166):             elif op in REPEATCODES:
sre_parse.py(170):             elif op in UNITCODES:
sre_parse.py(171):                 lo = lo + 1
sre_parse.py(172):                 hi = hi + 1
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(175):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
sre_parse.py(176):         return self.width
sre_parse.py(168):                 lo = lo + long(i) * av[0]
sre_parse.py(169):                 hi = hi + long(j) * av[1]
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(175):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
sre_parse.py(176):         return self.width
sre_parse.py(154):                     i = min(i, l)
sre_parse.py(155):                     j = max(j, h)
sre_parse.py(152):                 for av in av[1]:
sre_parse.py(153):                     l, h = av.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(143):         if self.width:
sre_parse.py(145):         lo = hi = 0L
sre_parse.py(146):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(147):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(149):             if op is BRANCH:
sre_parse.py(158):             elif op is CALL:
sre_parse.py(162):             elif op is SUBPATTERN:
sre_parse.py(166):             elif op in REPEATCODES:
sre_parse.py(167):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(143):         if self.width:
sre_parse.py(145):         lo = hi = 0L
sre_parse.py(146):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(147):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(149):             if op is BRANCH:
sre_parse.py(158):             elif op is CALL:
sre_parse.py(162):             elif op is SUBPATTERN:
sre_parse.py(166):             elif op in REPEATCODES:
sre_parse.py(170):             elif op in UNITCODES:
sre_parse.py(171):                 lo = lo + 1
sre_parse.py(172):                 hi = hi + 1
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(175):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
sre_parse.py(176):         return self.width
sre_parse.py(168):                 lo = lo + long(i) * av[0]
sre_parse.py(169):                 hi = hi + long(j) * av[1]
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(149):             if op is BRANCH:
sre_parse.py(158):             elif op is CALL:
sre_parse.py(162):             elif op is SUBPATTERN:
sre_parse.py(166):             elif op in REPEATCODES:
sre_parse.py(167):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(143):         if self.width:
sre_parse.py(145):         lo = hi = 0L
sre_parse.py(146):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(147):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(149):             if op is BRANCH:
sre_parse.py(158):             elif op is CALL:
sre_parse.py(162):             elif op is SUBPATTERN:
sre_parse.py(166):             elif op in REPEATCODES:
sre_parse.py(170):             elif op in UNITCODES:
sre_parse.py(171):                 lo = lo + 1
sre_parse.py(172):                 hi = hi + 1
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(175):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
sre_parse.py(176):         return self.width
sre_parse.py(168):                 lo = lo + long(i) * av[0]
sre_parse.py(169):                 hi = hi + long(j) * av[1]
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(149):             if op is BRANCH:
sre_parse.py(158):             elif op is CALL:
sre_parse.py(162):             elif op is SUBPATTERN:
sre_parse.py(166):             elif op in REPEATCODES:
sre_parse.py(170):             elif op in UNITCODES:
sre_parse.py(171):                 lo = lo + 1
sre_parse.py(172):                 hi = hi + 1
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(149):             if op is BRANCH:
sre_parse.py(158):             elif op is CALL:
sre_parse.py(162):             elif op is SUBPATTERN:
sre_parse.py(166):             elif op in REPEATCODES:
sre_parse.py(170):             elif op in UNITCODES:
sre_parse.py(171):                 lo = lo + 1
sre_parse.py(172):                 hi = hi + 1
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(149):             if op is BRANCH:
sre_parse.py(158):             elif op is CALL:
sre_parse.py(162):             elif op is SUBPATTERN:
sre_parse.py(166):             elif op in REPEATCODES:
sre_parse.py(170):             elif op in UNITCODES:
sre_parse.py(173):             elif op == SUCCESS:
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(175):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
sre_parse.py(176):         return self.width
sre_parse.py(154):                     i = min(i, l)
sre_parse.py(155):                     j = max(j, h)
sre_parse.py(152):                 for av in av[1]:
sre_parse.py(153):                     l, h = av.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(143):         if self.width:
sre_parse.py(145):         lo = hi = 0L
sre_parse.py(146):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(147):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(149):             if op is BRANCH:
sre_parse.py(158):             elif op is CALL:
sre_parse.py(162):             elif op is SUBPATTERN:
sre_parse.py(166):             elif op in REPEATCODES:
sre_parse.py(170):             elif op in UNITCODES:
sre_parse.py(173):             elif op == SUCCESS:
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(149):             if op is BRANCH:
sre_parse.py(158):             elif op is CALL:
sre_parse.py(162):             elif op is SUBPATTERN:
sre_parse.py(166):             elif op in REPEATCODES:
sre_parse.py(167):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(143):         if self.width:
sre_parse.py(145):         lo = hi = 0L
sre_parse.py(146):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(147):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(149):             if op is BRANCH:
sre_parse.py(158):             elif op is CALL:
sre_parse.py(162):             elif op is SUBPATTERN:
sre_parse.py(166):             elif op in REPEATCODES:
sre_parse.py(170):             elif op in UNITCODES:
sre_parse.py(171):                 lo = lo + 1
sre_parse.py(172):                 hi = hi + 1
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(175):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
sre_parse.py(176):         return self.width
sre_parse.py(168):                 lo = lo + long(i) * av[0]
sre_parse.py(169):                 hi = hi + long(j) * av[1]
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(149):             if op is BRANCH:
sre_parse.py(158):             elif op is CALL:
sre_parse.py(162):             elif op is SUBPATTERN:
sre_parse.py(166):             elif op in REPEATCODES:
sre_parse.py(170):             elif op in UNITCODES:
sre_parse.py(173):             elif op == SUCCESS:
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(175):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
sre_parse.py(176):         return self.width
sre_parse.py(154):                     i = min(i, l)
sre_parse.py(155):                     j = max(j, h)
sre_parse.py(152):                 for av in av[1]:
sre_parse.py(156):                 lo = lo + i
sre_parse.py(157):                 hi = hi + j
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(175):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
sre_parse.py(176):         return self.width
sre_parse.py(164):                 lo = lo + i
sre_parse.py(165):                 hi = hi + j
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(175):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
sre_parse.py(176):         return self.width
sre_compile.py(367):     if lo == 0:
sre_compile.py(370):     prefix = []
sre_compile.py(371):     prefixappend = prefix.append
sre_compile.py(372):     prefix_skip = 0
sre_compile.py(373):     charset = [] # not used
sre_compile.py(374):     charsetappend = charset.append
sre_compile.py(375):     if not (flags & SRE_FLAG_IGNORECASE):
sre_compile.py(377):         for op, av in pattern.data:
sre_compile.py(378):             if op is LITERAL:
sre_compile.py(382):             elif op is SUBPATTERN and len(av[1]) == 1:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
sre_compile.py(383):                 op, av = av[1][0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(384):                 if op is LITERAL:
sre_compile.py(387):                     break
sre_compile.py(391):         if not prefix and pattern.data:
sre_compile.py(392):             op, av = pattern.data[0]
sre_compile.py(393):             if op is SUBPATTERN and av[1]:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
sre_compile.py(394):                 op, av = av[1][0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(395):                 if op is LITERAL:
sre_compile.py(397):                 elif op is BRANCH:
sre_compile.py(398):                     c = []
sre_compile.py(399):                     cappend = c.append
sre_compile.py(400):                     for p in av[1]:
sre_compile.py(401):                         if not p:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
sre_compile.py(403):                         op, av = p[0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(404):                         if op is LITERAL:
sre_compile.py(407):                             break
sre_compile.py(430):     emit = code.append
sre_compile.py(431):     emit(OPCODES[INFO])
sre_compile.py(432):     skip = len(code); emit(0)
sre_compile.py(434):     mask = 0
sre_compile.py(435):     if prefix:
sre_compile.py(439):     elif charset:
sre_compile.py(441):     emit(mask)
sre_compile.py(443):     if lo < MAXCODE:
sre_compile.py(444):         emit(lo)
sre_compile.py(448):     if hi < MAXCODE:
sre_compile.py(451):         emit(0)
sre_compile.py(453):     if prefix:
sre_compile.py(464):     elif charset:
sre_compile.py(466):     code[skip] = len(code) - skip
sre_compile.py(490):     _compile(code, p.data, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(35):     emit = code.append
sre_compile.py(36):     _len = len
sre_compile.py(37):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(38):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(39):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(40):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(41):     for op, av in pattern:
sre_compile.py(42):         if op in LITERAL_CODES:
sre_compile.py(49):         elif op is IN:
sre_compile.py(60):         elif op is ANY:
sre_compile.py(65):         elif op in REPEATING_CODES:
sre_compile.py(97):         elif op is SUBPATTERN:
sre_compile.py(98):             if av[0]:
sre_compile.py(99):                 emit(OPCODES[MARK])
sre_compile.py(100):                 emit((av[0]-1)*2)
sre_compile.py(102):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(35):     emit = code.append
sre_compile.py(36):     _len = len
sre_compile.py(37):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(38):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(39):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(40):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(42):         if op in LITERAL_CODES:
sre_compile.py(49):         elif op is IN:
sre_compile.py(60):         elif op is ANY:
sre_compile.py(65):         elif op in REPEATING_CODES:
sre_compile.py(97):         elif op is SUBPATTERN:
sre_compile.py(106):         elif op in SUCCESS_CODES:
sre_compile.py(108):         elif op in ASSERT_CODES:
sre_compile.py(121):         elif op is CALL:
sre_compile.py(127):         elif op is AT:
sre_compile.py(136):         elif op is BRANCH:
sre_compile.py(137):             emit(OPCODES[op])
sre_compile.py(138):             tail = []
sre_compile.py(139):             tailappend = tail.append
sre_compile.py(140):             for av in av[1]:
sre_compile.py(141):                 skip = _len(code); emit(0)
sre_compile.py(143):                 _compile(code, av, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(35):     emit = code.append
sre_compile.py(36):     _len = len
sre_compile.py(37):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(38):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(39):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(40):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(42):         if op in LITERAL_CODES:
sre_compile.py(49):         elif op is IN:
sre_compile.py(60):         elif op is ANY:
sre_compile.py(65):         elif op in REPEATING_CODES:
sre_compile.py(66):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(75):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(357):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(143):         if self.width:
sre_parse.py(144):             return self.width
sre_compile.py(358):     if lo == 0 and hi == MAXREPEAT:
sre_compile.py(360):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(76):                 if op is MAX_REPEAT:
sre_compile.py(77):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(80):                 skip = _len(code); emit(0)
sre_compile.py(81):                 emit(av[0])
sre_compile.py(82):                 emit(av[1])
sre_compile.py(83):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(35):     emit = code.append
sre_compile.py(36):     _len = len
sre_compile.py(37):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(38):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(39):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(40):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(42):         if op in LITERAL_CODES:
sre_compile.py(49):         elif op is IN:
sre_compile.py(50):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(55):                 emit(OPCODES[op])
sre_compile.py(56):                 fixup = _identityfunction
sre_compile.py(57):             skip = _len(code); emit(0)
sre_compile.py(58):             _compile_charset(av, flags, code, fixup)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(181):     emit = code.append
sre_compile.py(182):     if fixup is None:
sre_compile.py(184):     for op, av in _optimize_charset(charset, fixup):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(210):     out = []
sre_compile.py(211):     outappend = out.append
sre_compile.py(212):     charmap = [0]*256
sre_compile.py(213):     try:
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(219):             elif op is RANGE:
sre_compile.py(222):             elif op is CATEGORY:
sre_compile.py(224):                 return charset # cannot compress
sre_compile.py(185):         emit(OPCODES[op])
sre_compile.py(186):         if op is NEGATE:
sre_compile.py(188):         elif op is LITERAL:
sre_compile.py(190):         elif op is RANGE:
sre_compile.py(193):         elif op is CHARSET:
sre_compile.py(195):         elif op is BIGCHARSET:
sre_compile.py(197):         elif op is CATEGORY:
sre_compile.py(198):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(200):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(203):                 emit(CHCODES[av])
sre_compile.py(184):     for op, av in _optimize_charset(charset, fixup):
sre_compile.py(206):     emit(OPCODES[FAILURE])
sre_compile.py(59):             code[skip] = _len(code) - skip
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(84):                 emit(OPCODES[SUCCESS])
sre_compile.py(85):                 code[skip] = _len(code) - skip
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(144):                 emit(OPCODES[JUMP])
sre_compile.py(145):                 tailappend(_len(code)); emit(0)
sre_compile.py(146):                 code[skip] = _len(code) - skip
sre_compile.py(140):             for av in av[1]:
sre_compile.py(141):                 skip = _len(code); emit(0)
sre_compile.py(143):                 _compile(code, av, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(35):     emit = code.append
sre_compile.py(36):     _len = len
sre_compile.py(37):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(38):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(39):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(40):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(42):         if op in LITERAL_CODES:
sre_compile.py(49):         elif op is IN:
sre_compile.py(60):         elif op is ANY:
sre_compile.py(65):         elif op in REPEATING_CODES:
sre_compile.py(66):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(75):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(357):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(143):         if self.width:
sre_parse.py(144):             return self.width
sre_compile.py(358):     if lo == 0 and hi == MAXREPEAT:
sre_compile.py(360):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(76):                 if op is MAX_REPEAT:
sre_compile.py(77):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(80):                 skip = _len(code); emit(0)
sre_compile.py(81):                 emit(av[0])
sre_compile.py(82):                 emit(av[1])
sre_compile.py(83):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(35):     emit = code.append
sre_compile.py(36):     _len = len
sre_compile.py(37):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(38):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(39):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(40):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(42):         if op in LITERAL_CODES:
sre_compile.py(49):         elif op is IN:
sre_compile.py(50):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(55):                 emit(OPCODES[op])
sre_compile.py(56):                 fixup = _identityfunction
sre_compile.py(57):             skip = _len(code); emit(0)
sre_compile.py(58):             _compile_charset(av, flags, code, fixup)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(181):     emit = code.append
sre_compile.py(182):     if fixup is None:
sre_compile.py(184):     for op, av in _optimize_charset(charset, fixup):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(210):     out = []
sre_compile.py(211):     outappend = out.append
sre_compile.py(212):     charmap = [0]*256
sre_compile.py(213):     try:
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(216):                 outappend((op, av))
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(219):             elif op is RANGE:
sre_compile.py(222):             elif op is CATEGORY:
sre_compile.py(224):                 return charset # cannot compress
sre_compile.py(185):         emit(OPCODES[op])
sre_compile.py(186):         if op is NEGATE:
sre_compile.py(187):             pass
sre_compile.py(184):     for op, av in _optimize_charset(charset, fixup):
sre_compile.py(185):         emit(OPCODES[op])
sre_compile.py(186):         if op is NEGATE:
sre_compile.py(188):         elif op is LITERAL:
sre_compile.py(190):         elif op is RANGE:
sre_compile.py(193):         elif op is CHARSET:
sre_compile.py(195):         elif op is BIGCHARSET:
sre_compile.py(197):         elif op is CATEGORY:
sre_compile.py(198):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(200):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(203):                 emit(CHCODES[av])
sre_compile.py(184):     for op, av in _optimize_charset(charset, fixup):
sre_compile.py(185):         emit(OPCODES[op])
sre_compile.py(186):         if op is NEGATE:
sre_compile.py(188):         elif op is LITERAL:
sre_compile.py(190):         elif op is RANGE:
sre_compile.py(193):         elif op is CHARSET:
sre_compile.py(195):         elif op is BIGCHARSET:
sre_compile.py(197):         elif op is CATEGORY:
sre_compile.py(198):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(200):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(203):                 emit(CHCODES[av])
sre_compile.py(184):     for op, av in _optimize_charset(charset, fixup):
sre_compile.py(206):     emit(OPCODES[FAILURE])
sre_compile.py(59):             code[skip] = _len(code) - skip
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(84):                 emit(OPCODES[SUCCESS])
sre_compile.py(85):                 code[skip] = _len(code) - skip
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(42):         if op in LITERAL_CODES:
sre_compile.py(49):         elif op is IN:
sre_compile.py(60):         elif op is ANY:
sre_compile.py(65):         elif op in REPEATING_CODES:
sre_compile.py(66):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(75):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(357):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(143):         if self.width:
sre_parse.py(144):             return self.width
sre_compile.py(358):     if lo == 0 and hi == MAXREPEAT:
sre_compile.py(360):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(76):                 if op is MAX_REPEAT:
sre_compile.py(77):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(80):                 skip = _len(code); emit(0)
sre_compile.py(81):                 emit(av[0])
sre_compile.py(82):                 emit(av[1])
sre_compile.py(83):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(35):     emit = code.append
sre_compile.py(36):     _len = len
sre_compile.py(37):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(38):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(39):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(40):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(42):         if op in LITERAL_CODES:
sre_compile.py(49):         elif op is IN:
sre_compile.py(50):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(55):                 emit(OPCODES[op])
sre_compile.py(56):                 fixup = _identityfunction
sre_compile.py(57):             skip = _len(code); emit(0)
sre_compile.py(58):             _compile_charset(av, flags, code, fixup)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(181):     emit = code.append
sre_compile.py(182):     if fixup is None:
sre_compile.py(184):     for op, av in _optimize_charset(charset, fixup):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(210):     out = []
sre_compile.py(211):     outappend = out.append
sre_compile.py(212):     charmap = [0]*256
sre_compile.py(213):     try:
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(219):             elif op is RANGE:
sre_compile.py(222):             elif op is CATEGORY:
sre_compile.py(224):                 return charset # cannot compress
sre_compile.py(185):         emit(OPCODES[op])
sre_compile.py(186):         if op is NEGATE:
sre_compile.py(188):         elif op is LITERAL:
sre_compile.py(190):         elif op is RANGE:
sre_compile.py(193):         elif op is CHARSET:
sre_compile.py(195):         elif op is BIGCHARSET:
sre_compile.py(197):         elif op is CATEGORY:
sre_compile.py(198):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(200):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(203):                 emit(CHCODES[av])
sre_compile.py(184):     for op, av in _optimize_charset(charset, fixup):
sre_compile.py(206):     emit(OPCODES[FAILURE])
sre_compile.py(59):             code[skip] = _len(code) - skip
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(84):                 emit(OPCODES[SUCCESS])
sre_compile.py(85):                 code[skip] = _len(code) - skip
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(42):         if op in LITERAL_CODES:
sre_compile.py(49):         elif op is IN:
sre_compile.py(50):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(55):                 emit(OPCODES[op])
sre_compile.py(56):                 fixup = _identityfunction
sre_compile.py(57):             skip = _len(code); emit(0)
sre_compile.py(58):             _compile_charset(av, flags, code, fixup)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(181):     emit = code.append
sre_compile.py(182):     if fixup is None:
sre_compile.py(184):     for op, av in _optimize_charset(charset, fixup):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(210):     out = []
sre_compile.py(211):     outappend = out.append
sre_compile.py(212):     charmap = [0]*256
sre_compile.py(213):     try:
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(216):                 outappend((op, av))
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(219):             elif op is RANGE:
sre_compile.py(220):                 for i in range(fixup(av[0]), fixup(av[1])+1):
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(221):                     charmap[i] = 1
sre_compile.py(220):                 for i in range(fixup(av[0]), fixup(av[1])+1):
sre_compile.py(221):                     charmap[i] = 1
sre_compile.py(220):                 for i in range(fixup(av[0]), fixup(av[1])+1):
sre_compile.py(221):                     charmap[i] = 1
sre_compile.py(220):                 for i in range(fixup(av[0]), fixup(av[1])+1):
sre_compile.py(221):                     charmap[i] = 1
sre_compile.py(220):                 for i in range(fixup(av[0]), fixup(av[1])+1):
sre_compile.py(221):                     charmap[i] = 1
sre_compile.py(220):                 for i in range(fixup(av[0]), fixup(av[1])+1):
sre_compile.py(221):                     charmap[i] = 1
sre_compile.py(220):                 for i in range(fixup(av[0]), fixup(av[1])+1):
sre_compile.py(221):                     charmap[i] = 1
sre_compile.py(220):                 for i in range(fixup(av[0]), fixup(av[1])+1):
sre_compile.py(221):                     charmap[i] = 1
sre_compile.py(220):                 for i in range(fixup(av[0]), fixup(av[1])+1):
sre_compile.py(221):                     charmap[i] = 1
sre_compile.py(220):                 for i in range(fixup(av[0]), fixup(av[1])+1):
sre_compile.py(221):                     charmap[i] = 1
sre_compile.py(220):                 for i in range(fixup(av[0]), fixup(av[1])+1):
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(219):             elif op is RANGE:
sre_compile.py(222):             elif op is CATEGORY:
sre_compile.py(224):                 return charset # cannot compress
sre_compile.py(185):         emit(OPCODES[op])
sre_compile.py(186):         if op is NEGATE:
sre_compile.py(187):             pass
sre_compile.py(184):     for op, av in _optimize_charset(charset, fixup):
sre_compile.py(185):         emit(OPCODES[op])
sre_compile.py(186):         if op is NEGATE:
sre_compile.py(188):         elif op is LITERAL:
sre_compile.py(190):         elif op is RANGE:
sre_compile.py(191):             emit(fixup(av[0]))
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(192):             emit(fixup(av[1]))
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(184):     for op, av in _optimize_charset(charset, fixup):
sre_compile.py(185):         emit(OPCODES[op])
sre_compile.py(186):         if op is NEGATE:
sre_compile.py(188):         elif op is LITERAL:
sre_compile.py(190):         elif op is RANGE:
sre_compile.py(193):         elif op is CHARSET:
sre_compile.py(195):         elif op is BIGCHARSET:
sre_compile.py(197):         elif op is CATEGORY:
sre_compile.py(198):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(200):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(203):                 emit(CHCODES[av])
sre_compile.py(184):     for op, av in _optimize_charset(charset, fixup):
sre_compile.py(206):     emit(OPCODES[FAILURE])
sre_compile.py(59):             code[skip] = _len(code) - skip
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(42):         if op in LITERAL_CODES:
sre_compile.py(43):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(47):                 emit(OPCODES[op])
sre_compile.py(48):                 emit(av)
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(42):         if op in LITERAL_CODES:
sre_compile.py(49):         elif op is IN:
sre_compile.py(60):         elif op is ANY:
sre_compile.py(65):         elif op in REPEATING_CODES:
sre_compile.py(97):         elif op is SUBPATTERN:
sre_compile.py(106):         elif op in SUCCESS_CODES:
sre_compile.py(108):         elif op in ASSERT_CODES:
sre_compile.py(109):             emit(OPCODES[op])
sre_compile.py(110):             skip = _len(code); emit(0)
sre_compile.py(111):             if av[0] >= 0:
sre_compile.py(112):                 emit(0) # look ahead
sre_compile.py(118):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(35):     emit = code.append
sre_compile.py(36):     _len = len
sre_compile.py(37):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(38):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(39):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(40):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(42):         if op in LITERAL_CODES:
sre_compile.py(49):         elif op is IN:
sre_compile.py(60):         elif op is ANY:
sre_compile.py(65):         elif op in REPEATING_CODES:
sre_compile.py(66):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(75):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(357):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(143):         if self.width:
sre_parse.py(145):         lo = hi = 0L
sre_parse.py(146):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(147):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(149):             if op is BRANCH:
sre_parse.py(158):             elif op is CALL:
sre_parse.py(162):             elif op is SUBPATTERN:
sre_parse.py(166):             elif op in REPEATCODES:
sre_parse.py(170):             elif op in UNITCODES:
sre_parse.py(171):                 lo = lo + 1
sre_parse.py(172):                 hi = hi + 1
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(175):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
sre_parse.py(176):         return self.width
sre_compile.py(358):     if lo == 0 and hi == MAXREPEAT:
sre_compile.py(360):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(76):                 if op is MAX_REPEAT:
sre_compile.py(77):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(80):                 skip = _len(code); emit(0)
sre_compile.py(81):                 emit(av[0])
sre_compile.py(82):                 emit(av[1])
sre_compile.py(83):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(35):     emit = code.append
sre_compile.py(36):     _len = len
sre_compile.py(37):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(38):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(39):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(40):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(42):         if op in LITERAL_CODES:
sre_compile.py(49):         elif op is IN:
sre_compile.py(50):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(55):                 emit(OPCODES[op])
sre_compile.py(56):                 fixup = _identityfunction
sre_compile.py(57):             skip = _len(code); emit(0)
sre_compile.py(58):             _compile_charset(av, flags, code, fixup)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(181):     emit = code.append
sre_compile.py(182):     if fixup is None:
sre_compile.py(184):     for op, av in _optimize_charset(charset, fixup):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(210):     out = []
sre_compile.py(211):     outappend = out.append
sre_compile.py(212):     charmap = [0]*256
sre_compile.py(213):     try:
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(219):             elif op is RANGE:
sre_compile.py(222):             elif op is CATEGORY:
sre_compile.py(224):                 return charset # cannot compress
sre_compile.py(185):         emit(OPCODES[op])
sre_compile.py(186):         if op is NEGATE:
sre_compile.py(188):         elif op is LITERAL:
sre_compile.py(190):         elif op is RANGE:
sre_compile.py(193):         elif op is CHARSET:
sre_compile.py(195):         elif op is BIGCHARSET:
sre_compile.py(197):         elif op is CATEGORY:
sre_compile.py(198):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(200):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(203):                 emit(CHCODES[av])
sre_compile.py(184):     for op, av in _optimize_charset(charset, fixup):
sre_compile.py(206):     emit(OPCODES[FAILURE])
sre_compile.py(59):             code[skip] = _len(code) - skip
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(84):                 emit(OPCODES[SUCCESS])
sre_compile.py(85):                 code[skip] = _len(code) - skip
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(42):         if op in LITERAL_CODES:
sre_compile.py(49):         elif op is IN:
sre_compile.py(50):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(55):                 emit(OPCODES[op])
sre_compile.py(56):                 fixup = _identityfunction
sre_compile.py(57):             skip = _len(code); emit(0)
sre_compile.py(58):             _compile_charset(av, flags, code, fixup)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(181):     emit = code.append
sre_compile.py(182):     if fixup is None:
sre_compile.py(184):     for op, av in _optimize_charset(charset, fixup):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(210):     out = []
sre_compile.py(211):     outappend = out.append
sre_compile.py(212):     charmap = [0]*256
sre_compile.py(213):     try:
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(216):                 outappend((op, av))
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(219):             elif op is RANGE:
sre_compile.py(220):                 for i in range(fixup(av[0]), fixup(av[1])+1):
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(221):                     charmap[i] = 1
sre_compile.py(220):                 for i in range(fixup(av[0]), fixup(av[1])+1):
sre_compile.py(221):                     charmap[i] = 1
sre_compile.py(220):                 for i in range(fixup(av[0]), fixup(av[1])+1):
sre_compile.py(221):                     charmap[i] = 1
sre_compile.py(220):                 for i in range(fixup(av[0]), fixup(av[1])+1):
sre_compile.py(221):                     charmap[i] = 1
sre_compile.py(220):                 for i in range(fixup(av[0]), fixup(av[1])+1):
sre_compile.py(221):                     charmap[i] = 1
sre_compile.py(220):                 for i in range(fixup(av[0]), fixup(av[1])+1):
sre_compile.py(221):                     charmap[i] = 1
sre_compile.py(220):                 for i in range(fixup(av[0]), fixup(av[1])+1):
sre_compile.py(221):                     charmap[i] = 1
sre_compile.py(220):                 for i in range(fixup(av[0]), fixup(av[1])+1):
sre_compile.py(221):                     charmap[i] = 1
sre_compile.py(220):                 for i in range(fixup(av[0]), fixup(av[1])+1):
sre_compile.py(221):                     charmap[i] = 1
sre_compile.py(220):                 for i in range(fixup(av[0]), fixup(av[1])+1):
sre_compile.py(221):                     charmap[i] = 1
sre_compile.py(220):                 for i in range(fixup(av[0]), fixup(av[1])+1):
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(219):             elif op is RANGE:
sre_compile.py(222):             elif op is CATEGORY:
sre_compile.py(224):                 return charset # cannot compress
sre_compile.py(185):         emit(OPCODES[op])
sre_compile.py(186):         if op is NEGATE:
sre_compile.py(187):             pass
sre_compile.py(184):     for op, av in _optimize_charset(charset, fixup):
sre_compile.py(185):         emit(OPCODES[op])
sre_compile.py(186):         if op is NEGATE:
sre_compile.py(188):         elif op is LITERAL:
sre_compile.py(190):         elif op is RANGE:
sre_compile.py(191):             emit(fixup(av[0]))
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(192):             emit(fixup(av[1]))
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(184):     for op, av in _optimize_charset(charset, fixup):
sre_compile.py(185):         emit(OPCODES[op])
sre_compile.py(186):         if op is NEGATE:
sre_compile.py(188):         elif op is LITERAL:
sre_compile.py(190):         elif op is RANGE:
sre_compile.py(193):         elif op is CHARSET:
sre_compile.py(195):         elif op is BIGCHARSET:
sre_compile.py(197):         elif op is CATEGORY:
sre_compile.py(198):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(200):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(203):                 emit(CHCODES[av])
sre_compile.py(184):     for op, av in _optimize_charset(charset, fixup):
sre_compile.py(206):     emit(OPCODES[FAILURE])
sre_compile.py(59):             code[skip] = _len(code) - skip
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(119):             emit(OPCODES[SUCCESS])
sre_compile.py(120):             code[skip] = _len(code) - skip
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(144):                 emit(OPCODES[JUMP])
sre_compile.py(145):                 tailappend(_len(code)); emit(0)
sre_compile.py(146):                 code[skip] = _len(code) - skip
sre_compile.py(140):             for av in av[1]:
sre_compile.py(141):                 skip = _len(code); emit(0)
sre_compile.py(143):                 _compile(code, av, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(35):     emit = code.append
sre_compile.py(36):     _len = len
sre_compile.py(37):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(38):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(39):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(40):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(42):         if op in LITERAL_CODES:
sre_compile.py(49):         elif op is IN:
sre_compile.py(60):         elif op is ANY:
sre_compile.py(65):         elif op in REPEATING_CODES:
sre_compile.py(97):         elif op is SUBPATTERN:
sre_compile.py(106):         elif op in SUCCESS_CODES:
sre_compile.py(108):         elif op in ASSERT_CODES:
sre_compile.py(109):             emit(OPCODES[op])
sre_compile.py(110):             skip = _len(code); emit(0)
sre_compile.py(111):             if av[0] >= 0:
sre_compile.py(114):                 lo, hi = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(143):         if self.width:
sre_parse.py(145):         lo = hi = 0L
sre_parse.py(146):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(147):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(149):             if op is BRANCH:
sre_parse.py(158):             elif op is CALL:
sre_parse.py(162):             elif op is SUBPATTERN:
sre_parse.py(166):             elif op in REPEATCODES:
sre_parse.py(170):             elif op in UNITCODES:
sre_parse.py(171):                 lo = lo + 1
sre_parse.py(172):                 hi = hi + 1
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(175):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
sre_parse.py(176):         return self.width
sre_compile.py(115):                 if lo != hi:
sre_compile.py(117):                 emit(lo) # look behind
sre_compile.py(118):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(35):     emit = code.append
sre_compile.py(36):     _len = len
sre_compile.py(37):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(38):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(39):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(40):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(42):         if op in LITERAL_CODES:
sre_compile.py(49):         elif op is IN:
sre_compile.py(50):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(55):                 emit(OPCODES[op])
sre_compile.py(56):                 fixup = _identityfunction
sre_compile.py(57):             skip = _len(code); emit(0)
sre_compile.py(58):             _compile_charset(av, flags, code, fixup)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(181):     emit = code.append
sre_compile.py(182):     if fixup is None:
sre_compile.py(184):     for op, av in _optimize_charset(charset, fixup):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(210):     out = []
sre_compile.py(211):     outappend = out.append
sre_compile.py(212):     charmap = [0]*256
sre_compile.py(213):     try:
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(219):             elif op is RANGE:
sre_compile.py(222):             elif op is CATEGORY:
sre_compile.py(224):                 return charset # cannot compress
sre_compile.py(185):         emit(OPCODES[op])
sre_compile.py(186):         if op is NEGATE:
sre_compile.py(188):         elif op is LITERAL:
sre_compile.py(190):         elif op is RANGE:
sre_compile.py(193):         elif op is CHARSET:
sre_compile.py(195):         elif op is BIGCHARSET:
sre_compile.py(197):         elif op is CATEGORY:
sre_compile.py(198):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(200):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(203):                 emit(CHCODES[av])
sre_compile.py(184):     for op, av in _optimize_charset(charset, fixup):
sre_compile.py(185):         emit(OPCODES[op])
sre_compile.py(186):         if op is NEGATE:
sre_compile.py(188):         elif op is LITERAL:
sre_compile.py(189):             emit(fixup(av))
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(184):     for op, av in _optimize_charset(charset, fixup):
sre_compile.py(185):         emit(OPCODES[op])
sre_compile.py(186):         if op is NEGATE:
sre_compile.py(188):         elif op is LITERAL:
sre_compile.py(189):             emit(fixup(av))
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(184):     for op, av in _optimize_charset(charset, fixup):
sre_compile.py(185):         emit(OPCODES[op])
sre_compile.py(186):         if op is NEGATE:
sre_compile.py(188):         elif op is LITERAL:
sre_compile.py(189):             emit(fixup(av))
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(184):     for op, av in _optimize_charset(charset, fixup):
sre_compile.py(185):         emit(OPCODES[op])
sre_compile.py(186):         if op is NEGATE:
sre_compile.py(188):         elif op is LITERAL:
sre_compile.py(189):             emit(fixup(av))
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(184):     for op, av in _optimize_charset(charset, fixup):
sre_compile.py(185):         emit(OPCODES[op])
sre_compile.py(186):         if op is NEGATE:
sre_compile.py(188):         elif op is LITERAL:
sre_compile.py(189):             emit(fixup(av))
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(184):     for op, av in _optimize_charset(charset, fixup):
sre_compile.py(185):         emit(OPCODES[op])
sre_compile.py(186):         if op is NEGATE:
sre_compile.py(188):         elif op is LITERAL:
sre_compile.py(189):             emit(fixup(av))
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(184):     for op, av in _optimize_charset(charset, fixup):
sre_compile.py(185):         emit(OPCODES[op])
sre_compile.py(186):         if op is NEGATE:
sre_compile.py(188):         elif op is LITERAL:
sre_compile.py(189):             emit(fixup(av))
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(184):     for op, av in _optimize_charset(charset, fixup):
sre_compile.py(206):     emit(OPCODES[FAILURE])
sre_compile.py(59):             code[skip] = _len(code) - skip
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(119):             emit(OPCODES[SUCCESS])
sre_compile.py(120):             code[skip] = _len(code) - skip
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(42):         if op in LITERAL_CODES:
sre_compile.py(49):         elif op is IN:
sre_compile.py(60):         elif op is ANY:
sre_compile.py(65):         elif op in REPEATING_CODES:
sre_compile.py(66):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(75):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(357):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(143):         if self.width:
sre_parse.py(144):             return self.width
sre_compile.py(358):     if lo == 0 and hi == MAXREPEAT:
sre_compile.py(360):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(76):                 if op is MAX_REPEAT:
sre_compile.py(77):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(80):                 skip = _len(code); emit(0)
sre_compile.py(81):                 emit(av[0])
sre_compile.py(82):                 emit(av[1])
sre_compile.py(83):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(35):     emit = code.append
sre_compile.py(36):     _len = len
sre_compile.py(37):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(38):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(39):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(40):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(42):         if op in LITERAL_CODES:
sre_compile.py(43):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(47):                 emit(OPCODES[op])
sre_compile.py(48):                 emit(av)
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(84):                 emit(OPCODES[SUCCESS])
sre_compile.py(85):                 code[skip] = _len(code) - skip
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(42):         if op in LITERAL_CODES:
sre_compile.py(49):         elif op is IN:
sre_compile.py(60):         elif op is ANY:
sre_compile.py(65):         elif op in REPEATING_CODES:
sre_compile.py(97):         elif op is SUBPATTERN:
sre_compile.py(106):         elif op in SUCCESS_CODES:
sre_compile.py(108):         elif op in ASSERT_CODES:
sre_compile.py(109):             emit(OPCODES[op])
sre_compile.py(110):             skip = _len(code); emit(0)
sre_compile.py(111):             if av[0] >= 0:
sre_compile.py(112):                 emit(0) # look ahead
sre_compile.py(118):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(35):     emit = code.append
sre_compile.py(36):     _len = len
sre_compile.py(37):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(38):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(39):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(40):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(42):         if op in LITERAL_CODES:
sre_compile.py(49):         elif op is IN:
sre_compile.py(50):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(55):                 emit(OPCODES[op])
sre_compile.py(56):                 fixup = _identityfunction
sre_compile.py(57):             skip = _len(code); emit(0)
sre_compile.py(58):             _compile_charset(av, flags, code, fixup)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(181):     emit = code.append
sre_compile.py(182):     if fixup is None:
sre_compile.py(184):     for op, av in _optimize_charset(charset, fixup):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(210):     out = []
sre_compile.py(211):     outappend = out.append
sre_compile.py(212):     charmap = [0]*256
sre_compile.py(213):     try:
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(219):             elif op is RANGE:
sre_compile.py(222):             elif op is CATEGORY:
sre_compile.py(224):                 return charset # cannot compress
sre_compile.py(185):         emit(OPCODES[op])
sre_compile.py(186):         if op is NEGATE:
sre_compile.py(188):         elif op is LITERAL:
sre_compile.py(190):         elif op is RANGE:
sre_compile.py(193):         elif op is CHARSET:
sre_compile.py(195):         elif op is BIGCHARSET:
sre_compile.py(197):         elif op is CATEGORY:
sre_compile.py(198):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(200):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(203):                 emit(CHCODES[av])
sre_compile.py(184):     for op, av in _optimize_charset(charset, fixup):
sre_compile.py(206):     emit(OPCODES[FAILURE])
sre_compile.py(59):             code[skip] = _len(code) - skip
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(119):             emit(OPCODES[SUCCESS])
sre_compile.py(120):             code[skip] = _len(code) - skip
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(144):                 emit(OPCODES[JUMP])
sre_compile.py(145):                 tailappend(_len(code)); emit(0)
sre_compile.py(146):                 code[skip] = _len(code) - skip
sre_compile.py(140):             for av in av[1]:
sre_compile.py(147):             emit(0) # end of branch
sre_compile.py(148):             for tail in tail:
sre_compile.py(149):                 code[tail] = _len(code) - tail
sre_compile.py(148):             for tail in tail:
sre_compile.py(149):                 code[tail] = _len(code) - tail
sre_compile.py(148):             for tail in tail:
sre_compile.py(149):                 code[tail] = _len(code) - tail
sre_compile.py(148):             for tail in tail:
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(103):             if av[0]:
sre_compile.py(104):                 emit(OPCODES[MARK])
sre_compile.py(105):                 emit((av[0]-1)*2+1)
sre_compile.py(41):     for op, av in pattern:
sre_compile.py(492):     code.append(OPCODES[SUCCESS])
sre_compile.py(494):     return code
sre_compile.py(510):     if p.pattern.groups > 100:
sre_compile.py(516):     groupindex = p.pattern.groupdict
sre_compile.py(517):     indexgroup = [None] * p.pattern.groups
sre_compile.py(518):     for k, i in groupindex.items():
sre_compile.py(521):     return _sre.compile(
sre_compile.py(522):         pattern, flags | p.pattern.flags, code,
sre_compile.py(523):         p.pattern.groups-1,
sre_compile.py(524):         groupindex, indexgroup
re.py(243):     if len(_cache) >= _MAXCACHE:
re.py(245):     _cache[cachekey] = p
re.py(246):     return p
textwrap.py(104):     wordsep_simple_re = re.compile(r'(\s+)')
 --- modulename: re, funcname: compile
re.py(190):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
re.py(228):     cachekey = (type(key[0]),) + key
re.py(229):     p = _cache.get(cachekey)
re.py(230):     if p is not None:
re.py(232):     pattern, flags = key
re.py(233):     if isinstance(pattern, _pattern_type):
re.py(237):     if not sre_compile.isstring(pattern):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(476):     for tp in STRING_TYPES:
sre_compile.py(477):         if isinstance(obj, tp):
sre_compile.py(478):             return 1
re.py(239):     try:
re.py(240):         p = sre_compile.compile(pattern, flags)
 --- modulename: sre_compile, funcname: compile
sre_compile.py(499):     if isstring(p):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(476):     for tp in STRING_TYPES:
sre_compile.py(477):         if isinstance(obj, tp):
sre_compile.py(478):             return 1
sre_compile.py(500):         pattern = p
sre_compile.py(501):         p = sre_parse.parse(p, flags)
 --- modulename: sre_parse, funcname: parse
sre_parse.py(679):     source = Tokenizer(str)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(180):         self.string = string
sre_parse.py(181):         self.index = 0
sre_parse.py(182):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(681):     if pattern is None:
sre_parse.py(682):         pattern = Pattern()
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(69):         self.flags = 0
sre_parse.py(70):         self.open = []
sre_parse.py(71):         self.groups = 1
sre_parse.py(72):         self.groupdict = {}
sre_parse.py(683):     pattern.flags = flags
sre_parse.py(684):     pattern.str = str
sre_parse.py(686):     p = _parse_sub(source, pattern, 0)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(305):     items = []
sre_parse.py(306):     itemsappend = items.append
sre_parse.py(307):     sourcematch = source.match
sre_parse.py(308):     while 1:
sre_parse.py(309):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(382):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(92):         self.pattern = pattern
sre_parse.py(93):         if data is None:
sre_parse.py(94):             data = []
sre_parse.py(95):         self.data = data
sre_parse.py(96):         self.width = None
sre_parse.py(385):     subpatternappend = subpattern.append
sre_parse.py(386):     sourceget = source.get
sre_parse.py(387):     sourcematch = source.match
sre_parse.py(388):     _len = len
sre_parse.py(389):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(390):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(391):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(392):     REPEATCODES = _REPEATCODES
sre_parse.py(394):     while 1:
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(189):             try:
sre_parse.py(190):                 c = self.string[self.index + 1]
sre_parse.py(193):             char = char + c
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(402):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(413):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(416):         elif this == "[":
sre_parse.py(473):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(526):         elif this == ".":
sre_parse.py(529):         elif this == "(":
sre_parse.py(530):             group = 1
sre_parse.py(531):             name = None
sre_parse.py(532):             condgroup = None
sre_parse.py(533):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(636):             if group:
sre_parse.py(638):                 if group == 2:
sre_parse.py(642):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
sre_parse.py(74):         gid = self.groups
sre_parse.py(75):         self.groups = gid + 1
sre_parse.py(76):         if name is not None:
sre_parse.py(82):         self.open.append(gid)
sre_parse.py(83):         return gid
sre_parse.py(643):                 if condgroup:
sre_parse.py(646):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(305):     items = []
sre_parse.py(306):     itemsappend = items.append
sre_parse.py(307):     sourcematch = source.match
sre_parse.py(308):     while 1:
sre_parse.py(309):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(382):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(92):         self.pattern = pattern
sre_parse.py(93):         if data is None:
sre_parse.py(94):             data = []
sre_parse.py(95):         self.data = data
sre_parse.py(96):         self.width = None
sre_parse.py(385):     subpatternappend = subpattern.append
sre_parse.py(386):     sourceget = source.get
sre_parse.py(387):     sourcematch = source.match
sre_parse.py(388):     _len = len
sre_parse.py(389):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(390):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(391):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(392):     REPEATCODES = _REPEATCODES
sre_parse.py(394):     while 1:
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(402):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(413):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(416):         elif this == "[":
sre_parse.py(473):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(526):         elif this == ".":
sre_parse.py(529):         elif this == "(":
sre_parse.py(661):         elif this == "^":
sre_parse.py(664):         elif this == "$":
sre_parse.py(667):         elif this and this[0] == "\\":
sre_parse.py(668):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(260):     code = CATEGORIES.get(escape)
sre_parse.py(261):     if code:
sre_parse.py(262):         return code
sre_parse.py(669):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(140):         self.data.append(code)
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(402):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(413):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(416):         elif this == "[":
sre_parse.py(473):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(475):             if this == "?":
sre_parse.py(477):             elif this == "*":
sre_parse.py(480):             elif this == "+":
sre_parse.py(481):                 min, max = 1, MAXREPEAT
sre_parse.py(513):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
sre_parse.py(514):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(133):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(92):         self.pattern = pattern
sre_parse.py(93):         if data is None:
sre_parse.py(95):         self.data = data
sre_parse.py(96):         self.width = None
sre_parse.py(517):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_parse.py(519):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_parse.py(521):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(524):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(136):         self.data[index] = code
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(397):             break # end of subpattern
sre_parse.py(674):     return subpattern
sre_parse.py(310):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(312):         if not nested:
sre_parse.py(314):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(198):             if skip:
sre_parse.py(200):             return 1
sre_parse.py(315):             break
sre_parse.py(319):     if len(items) == 1:
sre_parse.py(320):         return items[0]
sre_parse.py(647):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(198):             if skip:
sre_parse.py(199):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(185):             self.next = None
sre_parse.py(186):             return
sre_parse.py(200):             return 1
sre_parse.py(649):                 if group is not None:
sre_parse.py(650):                     state.closegroup(group)
 --- modulename: sre_parse, funcname: closegroup
sre_parse.py(85):         self.open.remove(gid)
sre_parse.py(651):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(140):         self.data.append(code)
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(185):             self.next = None
sre_parse.py(186):             return
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(400):             break # end of pattern
sre_parse.py(674):     return subpattern
sre_parse.py(310):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(312):         if not nested:
sre_parse.py(313):             break
sre_parse.py(319):     if len(items) == 1:
sre_parse.py(320):         return items[0]
sre_parse.py(688):     tail = source.get()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(185):             self.next = None
sre_parse.py(186):             return
sre_parse.py(205):         return this
sre_parse.py(689):     if tail == ")":
sre_parse.py(691):     elif tail:
sre_parse.py(694):     if flags & SRE_FLAG_DEBUG:
sre_parse.py(697):     if not (flags & SRE_FLAG_VERBOSE) and p.pattern.flags & SRE_FLAG_VERBOSE:
sre_parse.py(702):     return p
sre_compile.py(505):     code = _code(p, flags)
 --- modulename: sre_compile, funcname: _code
sre_compile.py(483):     flags = p.pattern.flags | flags
sre_compile.py(484):     code = []
sre_compile.py(487):     _compile_info(code, p, flags)
 --- modulename: sre_compile, funcname: _compile_info
sre_compile.py(366):     lo, hi = pattern.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(143):         if self.width:
sre_parse.py(145):         lo = hi = 0L
sre_parse.py(146):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(147):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(149):             if op is BRANCH:
sre_parse.py(158):             elif op is CALL:
sre_parse.py(162):             elif op is SUBPATTERN:
sre_parse.py(163):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(143):         if self.width:
sre_parse.py(145):         lo = hi = 0L
sre_parse.py(146):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(147):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(149):             if op is BRANCH:
sre_parse.py(158):             elif op is CALL:
sre_parse.py(162):             elif op is SUBPATTERN:
sre_parse.py(166):             elif op in REPEATCODES:
sre_parse.py(167):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(143):         if self.width:
sre_parse.py(145):         lo = hi = 0L
sre_parse.py(146):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(147):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(149):             if op is BRANCH:
sre_parse.py(158):             elif op is CALL:
sre_parse.py(162):             elif op is SUBPATTERN:
sre_parse.py(166):             elif op in REPEATCODES:
sre_parse.py(170):             elif op in UNITCODES:
sre_parse.py(171):                 lo = lo + 1
sre_parse.py(172):                 hi = hi + 1
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(175):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
sre_parse.py(176):         return self.width
sre_parse.py(168):                 lo = lo + long(i) * av[0]
sre_parse.py(169):                 hi = hi + long(j) * av[1]
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(175):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
sre_parse.py(176):         return self.width
sre_parse.py(164):                 lo = lo + i
sre_parse.py(165):                 hi = hi + j
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(175):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
sre_parse.py(176):         return self.width
sre_compile.py(367):     if lo == 0:
sre_compile.py(370):     prefix = []
sre_compile.py(371):     prefixappend = prefix.append
sre_compile.py(372):     prefix_skip = 0
sre_compile.py(373):     charset = [] # not used
sre_compile.py(374):     charsetappend = charset.append
sre_compile.py(375):     if not (flags & SRE_FLAG_IGNORECASE):
sre_compile.py(377):         for op, av in pattern.data:
sre_compile.py(378):             if op is LITERAL:
sre_compile.py(382):             elif op is SUBPATTERN and len(av[1]) == 1:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
sre_compile.py(383):                 op, av = av[1][0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(384):                 if op is LITERAL:
sre_compile.py(387):                     break
sre_compile.py(391):         if not prefix and pattern.data:
sre_compile.py(392):             op, av = pattern.data[0]
sre_compile.py(393):             if op is SUBPATTERN and av[1]:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
sre_compile.py(394):                 op, av = av[1][0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(395):                 if op is LITERAL:
sre_compile.py(397):                 elif op is BRANCH:
sre_compile.py(430):     emit = code.append
sre_compile.py(431):     emit(OPCODES[INFO])
sre_compile.py(432):     skip = len(code); emit(0)
sre_compile.py(434):     mask = 0
sre_compile.py(435):     if prefix:
sre_compile.py(439):     elif charset:
sre_compile.py(441):     emit(mask)
sre_compile.py(443):     if lo < MAXCODE:
sre_compile.py(444):         emit(lo)
sre_compile.py(448):     if hi < MAXCODE:
sre_compile.py(451):         emit(0)
sre_compile.py(453):     if prefix:
sre_compile.py(464):     elif charset:
sre_compile.py(466):     code[skip] = len(code) - skip
sre_compile.py(490):     _compile(code, p.data, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(35):     emit = code.append
sre_compile.py(36):     _len = len
sre_compile.py(37):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(38):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(39):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(40):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(41):     for op, av in pattern:
sre_compile.py(42):         if op in LITERAL_CODES:
sre_compile.py(49):         elif op is IN:
sre_compile.py(60):         elif op is ANY:
sre_compile.py(65):         elif op in REPEATING_CODES:
sre_compile.py(97):         elif op is SUBPATTERN:
sre_compile.py(98):             if av[0]:
sre_compile.py(99):                 emit(OPCODES[MARK])
sre_compile.py(100):                 emit((av[0]-1)*2)
sre_compile.py(102):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(35):     emit = code.append
sre_compile.py(36):     _len = len
sre_compile.py(37):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(38):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(39):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(40):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(42):         if op in LITERAL_CODES:
sre_compile.py(49):         elif op is IN:
sre_compile.py(60):         elif op is ANY:
sre_compile.py(65):         elif op in REPEATING_CODES:
sre_compile.py(66):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(75):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(357):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(143):         if self.width:
sre_parse.py(144):             return self.width
sre_compile.py(358):     if lo == 0 and hi == MAXREPEAT:
sre_compile.py(360):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(76):                 if op is MAX_REPEAT:
sre_compile.py(77):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(80):                 skip = _len(code); emit(0)
sre_compile.py(81):                 emit(av[0])
sre_compile.py(82):                 emit(av[1])
sre_compile.py(83):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(35):     emit = code.append
sre_compile.py(36):     _len = len
sre_compile.py(37):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(38):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(39):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(40):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(42):         if op in LITERAL_CODES:
sre_compile.py(49):         elif op is IN:
sre_compile.py(50):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(55):                 emit(OPCODES[op])
sre_compile.py(56):                 fixup = _identityfunction
sre_compile.py(57):             skip = _len(code); emit(0)
sre_compile.py(58):             _compile_charset(av, flags, code, fixup)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(181):     emit = code.append
sre_compile.py(182):     if fixup is None:
sre_compile.py(184):     for op, av in _optimize_charset(charset, fixup):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(210):     out = []
sre_compile.py(211):     outappend = out.append
sre_compile.py(212):     charmap = [0]*256
sre_compile.py(213):     try:
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(219):             elif op is RANGE:
sre_compile.py(222):             elif op is CATEGORY:
sre_compile.py(224):                 return charset # cannot compress
sre_compile.py(185):         emit(OPCODES[op])
sre_compile.py(186):         if op is NEGATE:
sre_compile.py(188):         elif op is LITERAL:
sre_compile.py(190):         elif op is RANGE:
sre_compile.py(193):         elif op is CHARSET:
sre_compile.py(195):         elif op is BIGCHARSET:
sre_compile.py(197):         elif op is CATEGORY:
sre_compile.py(198):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(200):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(203):                 emit(CHCODES[av])
sre_compile.py(184):     for op, av in _optimize_charset(charset, fixup):
sre_compile.py(206):     emit(OPCODES[FAILURE])
sre_compile.py(59):             code[skip] = _len(code) - skip
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(84):                 emit(OPCODES[SUCCESS])
sre_compile.py(85):                 code[skip] = _len(code) - skip
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(103):             if av[0]:
sre_compile.py(104):                 emit(OPCODES[MARK])
sre_compile.py(105):                 emit((av[0]-1)*2+1)
sre_compile.py(41):     for op, av in pattern:
sre_compile.py(492):     code.append(OPCODES[SUCCESS])
sre_compile.py(494):     return code
sre_compile.py(510):     if p.pattern.groups > 100:
sre_compile.py(516):     groupindex = p.pattern.groupdict
sre_compile.py(517):     indexgroup = [None] * p.pattern.groups
sre_compile.py(518):     for k, i in groupindex.items():
sre_compile.py(521):     return _sre.compile(
sre_compile.py(522):         pattern, flags | p.pattern.flags, code,
sre_compile.py(523):         p.pattern.groups-1,
sre_compile.py(524):         groupindex, indexgroup
re.py(243):     if len(_cache) >= _MAXCACHE:
re.py(245):     _cache[cachekey] = p
re.py(246):     return p
textwrap.py(108):     sentence_end_re = re.compile(r'[%s]'              # lowercase letter
textwrap.py(112):                                  % string.lowercase)
 --- modulename: re, funcname: compile
re.py(190):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
re.py(228):     cachekey = (type(key[0]),) + key
re.py(229):     p = _cache.get(cachekey)
re.py(230):     if p is not None:
re.py(232):     pattern, flags = key
re.py(233):     if isinstance(pattern, _pattern_type):
re.py(237):     if not sre_compile.isstring(pattern):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(476):     for tp in STRING_TYPES:
sre_compile.py(477):         if isinstance(obj, tp):
sre_compile.py(478):             return 1
re.py(239):     try:
re.py(240):         p = sre_compile.compile(pattern, flags)
 --- modulename: sre_compile, funcname: compile
sre_compile.py(499):     if isstring(p):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(476):     for tp in STRING_TYPES:
sre_compile.py(477):         if isinstance(obj, tp):
sre_compile.py(478):             return 1
sre_compile.py(500):         pattern = p
sre_compile.py(501):         p = sre_parse.parse(p, flags)
 --- modulename: sre_parse, funcname: parse
sre_parse.py(679):     source = Tokenizer(str)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(180):         self.string = string
sre_parse.py(181):         self.index = 0
sre_parse.py(182):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(681):     if pattern is None:
sre_parse.py(682):         pattern = Pattern()
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(69):         self.flags = 0
sre_parse.py(70):         self.open = []
sre_parse.py(71):         self.groups = 1
sre_parse.py(72):         self.groupdict = {}
sre_parse.py(683):     pattern.flags = flags
sre_parse.py(684):     pattern.str = str
sre_parse.py(686):     p = _parse_sub(source, pattern, 0)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(305):     items = []
sre_parse.py(306):     itemsappend = items.append
sre_parse.py(307):     sourcematch = source.match
sre_parse.py(308):     while 1:
sre_parse.py(309):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(382):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(92):         self.pattern = pattern
sre_parse.py(93):         if data is None:
sre_parse.py(94):             data = []
sre_parse.py(95):         self.data = data
sre_parse.py(96):         self.width = None
sre_parse.py(385):     subpatternappend = subpattern.append
sre_parse.py(386):     sourceget = source.get
sre_parse.py(387):     sourcematch = source.match
sre_parse.py(388):     _len = len
sre_parse.py(389):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(390):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(391):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(392):     REPEATCODES = _REPEATCODES
sre_parse.py(394):     while 1:
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(402):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(413):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(416):         elif this == "[":
sre_parse.py(418):             set = []
sre_parse.py(419):             setappend = set.append
sre_parse.py(422):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(425):             start = set[:]
sre_parse.py(426):             while 1:
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(429):                     break
sre_parse.py(465):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(467):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
sre_parse.py(471):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(140):         self.data.append(code)
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(189):             try:
sre_parse.py(190):                 c = self.string[self.index + 1]
sre_parse.py(193):             char = char + c
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(402):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(413):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(416):         elif this == "[":
sre_parse.py(418):             set = []
sre_parse.py(419):             setappend = set.append
sre_parse.py(422):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(425):             start = set[:]
sre_parse.py(426):             while 1:
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(189):             try:
sre_parse.py(190):                 c = self.string[self.index + 1]
sre_parse.py(193):             char = char + c
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(431):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(228):     code = ESCAPES.get(escape)
sre_parse.py(229):     if code:
sre_parse.py(231):     code = CATEGORIES.get(escape)
sre_parse.py(232):     if code and code[0] == IN:
sre_parse.py(234):     try:
sre_parse.py(235):         c = escape[1:2]
sre_parse.py(236):         if c == "x":
sre_parse.py(244):         elif c in OCTDIGITS:
sre_parse.py(250):         elif c in DIGITS:
sre_parse.py(252):         if len(escape) == 2:
sre_parse.py(253):             return LITERAL, ord(escape[1])
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(189):             try:
sre_parse.py(190):                 c = self.string[self.index + 1]
sre_parse.py(193):             char = char + c
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(431):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(228):     code = ESCAPES.get(escape)
sre_parse.py(229):     if code:
sre_parse.py(231):     code = CATEGORIES.get(escape)
sre_parse.py(232):     if code and code[0] == IN:
sre_parse.py(234):     try:
sre_parse.py(235):         c = escape[1:2]
sre_parse.py(236):         if c == "x":
sre_parse.py(244):         elif c in OCTDIGITS:
sre_parse.py(250):         elif c in DIGITS:
sre_parse.py(252):         if len(escape) == 2:
sre_parse.py(253):             return LITERAL, ord(escape[1])
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(431):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(228):     code = ESCAPES.get(escape)
sre_parse.py(229):     if code:
sre_parse.py(231):     code = CATEGORIES.get(escape)
sre_parse.py(232):     if code and code[0] == IN:
sre_parse.py(234):     try:
sre_parse.py(235):         c = escape[1:2]
sre_parse.py(236):         if c == "x":
sre_parse.py(244):         elif c in OCTDIGITS:
sre_parse.py(250):         elif c in DIGITS:
sre_parse.py(252):         if len(escape) == 2:
sre_parse.py(253):             return LITERAL, ord(escape[1])
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(429):                     break
sre_parse.py(465):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(467):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
sre_parse.py(471):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(140):         self.data.append(code)
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(189):             try:
sre_parse.py(190):                 c = self.string[self.index + 1]
sre_parse.py(193):             char = char + c
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(402):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(413):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(416):         elif this == "[":
sre_parse.py(418):             set = []
sre_parse.py(419):             setappend = set.append
sre_parse.py(422):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(425):             start = set[:]
sre_parse.py(426):             while 1:
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(189):             try:
sre_parse.py(190):                 c = self.string[self.index + 1]
sre_parse.py(193):             char = char + c
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(431):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(228):     code = ESCAPES.get(escape)
sre_parse.py(229):     if code:
sre_parse.py(231):     code = CATEGORIES.get(escape)
sre_parse.py(232):     if code and code[0] == IN:
sre_parse.py(234):     try:
sre_parse.py(235):         c = escape[1:2]
sre_parse.py(236):         if c == "x":
sre_parse.py(244):         elif c in OCTDIGITS:
sre_parse.py(250):         elif c in DIGITS:
sre_parse.py(252):         if len(escape) == 2:
sre_parse.py(253):             return LITERAL, ord(escape[1])
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(431):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(228):     code = ESCAPES.get(escape)
sre_parse.py(229):     if code:
sre_parse.py(231):     code = CATEGORIES.get(escape)
sre_parse.py(232):     if code and code[0] == IN:
sre_parse.py(234):     try:
sre_parse.py(235):         c = escape[1:2]
sre_parse.py(236):         if c == "x":
sre_parse.py(244):         elif c in OCTDIGITS:
sre_parse.py(250):         elif c in DIGITS:
sre_parse.py(252):         if len(escape) == 2:
sre_parse.py(253):             return LITERAL, ord(escape[1])
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(429):                     break
sre_parse.py(465):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(467):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
sre_parse.py(471):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(140):         self.data.append(code)
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(189):             try:
sre_parse.py(190):                 c = self.string[self.index + 1]
sre_parse.py(193):             char = char + c
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(402):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(413):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(416):         elif this == "[":
sre_parse.py(473):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(475):             if this == "?":
sre_parse.py(476):                 min, max = 0, 1
sre_parse.py(513):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
sre_parse.py(514):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(133):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(92):         self.pattern = pattern
sre_parse.py(93):         if data is None:
sre_parse.py(95):         self.data = data
sre_parse.py(96):         self.width = None
sre_parse.py(517):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_parse.py(519):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_parse.py(521):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(524):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(136):         self.data[index] = code
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(185):             self.next = None
sre_parse.py(186):             return
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(402):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(413):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(416):         elif this == "[":
sre_parse.py(473):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(526):         elif this == ".":
sre_parse.py(529):         elif this == "(":
sre_parse.py(661):         elif this == "^":
sre_parse.py(664):         elif this == "$":
sre_parse.py(667):         elif this and this[0] == "\\":
sre_parse.py(668):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(260):     code = CATEGORIES.get(escape)
sre_parse.py(261):     if code:
sre_parse.py(262):         return code
sre_parse.py(669):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(140):         self.data.append(code)
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(185):             self.next = None
sre_parse.py(186):             return
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(400):             break # end of pattern
sre_parse.py(674):     return subpattern
sre_parse.py(310):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(312):         if not nested:
sre_parse.py(313):             break
sre_parse.py(319):     if len(items) == 1:
sre_parse.py(320):         return items[0]
sre_parse.py(688):     tail = source.get()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(185):             self.next = None
sre_parse.py(186):             return
sre_parse.py(205):         return this
sre_parse.py(689):     if tail == ")":
sre_parse.py(691):     elif tail:
sre_parse.py(694):     if flags & SRE_FLAG_DEBUG:
sre_parse.py(697):     if not (flags & SRE_FLAG_VERBOSE) and p.pattern.flags & SRE_FLAG_VERBOSE:
sre_parse.py(702):     return p
sre_compile.py(505):     code = _code(p, flags)
 --- modulename: sre_compile, funcname: _code
sre_compile.py(483):     flags = p.pattern.flags | flags
sre_compile.py(484):     code = []
sre_compile.py(487):     _compile_info(code, p, flags)
 --- modulename: sre_compile, funcname: _compile_info
sre_compile.py(366):     lo, hi = pattern.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(143):         if self.width:
sre_parse.py(145):         lo = hi = 0L
sre_parse.py(146):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(147):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(149):             if op is BRANCH:
sre_parse.py(158):             elif op is CALL:
sre_parse.py(162):             elif op is SUBPATTERN:
sre_parse.py(166):             elif op in REPEATCODES:
sre_parse.py(170):             elif op in UNITCODES:
sre_parse.py(171):                 lo = lo + 1
sre_parse.py(172):                 hi = hi + 1
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(149):             if op is BRANCH:
sre_parse.py(158):             elif op is CALL:
sre_parse.py(162):             elif op is SUBPATTERN:
sre_parse.py(166):             elif op in REPEATCODES:
sre_parse.py(170):             elif op in UNITCODES:
sre_parse.py(171):                 lo = lo + 1
sre_parse.py(172):                 hi = hi + 1
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(149):             if op is BRANCH:
sre_parse.py(158):             elif op is CALL:
sre_parse.py(162):             elif op is SUBPATTERN:
sre_parse.py(166):             elif op in REPEATCODES:
sre_parse.py(167):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(143):         if self.width:
sre_parse.py(145):         lo = hi = 0L
sre_parse.py(146):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(147):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(149):             if op is BRANCH:
sre_parse.py(158):             elif op is CALL:
sre_parse.py(162):             elif op is SUBPATTERN:
sre_parse.py(166):             elif op in REPEATCODES:
sre_parse.py(170):             elif op in UNITCODES:
sre_parse.py(171):                 lo = lo + 1
sre_parse.py(172):                 hi = hi + 1
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(175):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
sre_parse.py(176):         return self.width
sre_parse.py(168):                 lo = lo + long(i) * av[0]
sre_parse.py(169):                 hi = hi + long(j) * av[1]
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(149):             if op is BRANCH:
sre_parse.py(158):             elif op is CALL:
sre_parse.py(162):             elif op is SUBPATTERN:
sre_parse.py(166):             elif op in REPEATCODES:
sre_parse.py(170):             elif op in UNITCODES:
sre_parse.py(173):             elif op == SUCCESS:
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(175):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
sre_parse.py(176):         return self.width
sre_compile.py(367):     if lo == 0:
sre_compile.py(370):     prefix = []
sre_compile.py(371):     prefixappend = prefix.append
sre_compile.py(372):     prefix_skip = 0
sre_compile.py(373):     charset = [] # not used
sre_compile.py(374):     charsetappend = charset.append
sre_compile.py(375):     if not (flags & SRE_FLAG_IGNORECASE):
sre_compile.py(377):         for op, av in pattern.data:
sre_compile.py(378):             if op is LITERAL:
sre_compile.py(382):             elif op is SUBPATTERN and len(av[1]) == 1:
sre_compile.py(389):                 break
sre_compile.py(391):         if not prefix and pattern.data:
sre_compile.py(392):             op, av = pattern.data[0]
sre_compile.py(393):             if op is SUBPATTERN and av[1]:
sre_compile.py(410):             elif op is BRANCH:
sre_compile.py(423):             elif op is IN:
sre_compile.py(424):                 charset = av
sre_compile.py(430):     emit = code.append
sre_compile.py(431):     emit(OPCODES[INFO])
sre_compile.py(432):     skip = len(code); emit(0)
sre_compile.py(434):     mask = 0
sre_compile.py(435):     if prefix:
sre_compile.py(439):     elif charset:
sre_compile.py(440):         mask = mask + SRE_INFO_CHARSET
sre_compile.py(441):     emit(mask)
sre_compile.py(443):     if lo < MAXCODE:
sre_compile.py(444):         emit(lo)
sre_compile.py(448):     if hi < MAXCODE:
sre_compile.py(449):         emit(hi)
sre_compile.py(453):     if prefix:
sre_compile.py(464):     elif charset:
sre_compile.py(465):         _compile_charset(charset, flags, code)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(181):     emit = code.append
sre_compile.py(182):     if fixup is None:
sre_compile.py(183):         fixup = _identityfunction
sre_compile.py(184):     for op, av in _optimize_charset(charset, fixup):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(210):     out = []
sre_compile.py(211):     outappend = out.append
sre_compile.py(212):     charmap = [0]*256
sre_compile.py(213):     try:
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(229):     i = p = n = 0
sre_compile.py(230):     runs = []
sre_compile.py(231):     runsappend = runs.append
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(235):                 p = i
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(238):             runsappend((p, n))
sre_compile.py(239):             n = 0
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(241):     if n:
sre_compile.py(243):     if len(runs) <= 2:
sre_compile.py(245):         for p, n in runs:
sre_compile.py(246):             if n == 1:
sre_compile.py(249):                 outappend((RANGE, (p, p+n-1)))
sre_compile.py(245):         for p, n in runs:
sre_compile.py(250):         if len(out) < len(charset):
sre_compile.py(251):             return out
sre_compile.py(185):         emit(OPCODES[op])
sre_compile.py(186):         if op is NEGATE:
sre_compile.py(188):         elif op is LITERAL:
sre_compile.py(190):         elif op is RANGE:
sre_compile.py(191):             emit(fixup(av[0]))
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(192):             emit(fixup(av[1]))
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(184):     for op, av in _optimize_charset(charset, fixup):
sre_compile.py(206):     emit(OPCODES[FAILURE])
sre_compile.py(466):     code[skip] = len(code) - skip
sre_compile.py(490):     _compile(code, p.data, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(35):     emit = code.append
sre_compile.py(36):     _len = len
sre_compile.py(37):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(38):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(39):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(40):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(41):     for op, av in pattern:
sre_compile.py(42):         if op in LITERAL_CODES:
sre_compile.py(49):         elif op is IN:
sre_compile.py(50):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(55):                 emit(OPCODES[op])
sre_compile.py(56):                 fixup = _identityfunction
sre_compile.py(57):             skip = _len(code); emit(0)
sre_compile.py(58):             _compile_charset(av, flags, code, fixup)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(181):     emit = code.append
sre_compile.py(182):     if fixup is None:
sre_compile.py(184):     for op, av in _optimize_charset(charset, fixup):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(210):     out = []
sre_compile.py(211):     outappend = out.append
sre_compile.py(212):     charmap = [0]*256
sre_compile.py(213):     try:
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(229):     i = p = n = 0
sre_compile.py(230):     runs = []
sre_compile.py(231):     runsappend = runs.append
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(235):                 p = i
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(238):             runsappend((p, n))
sre_compile.py(239):             n = 0
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(241):     if n:
sre_compile.py(243):     if len(runs) <= 2:
sre_compile.py(245):         for p, n in runs:
sre_compile.py(246):             if n == 1:
sre_compile.py(249):                 outappend((RANGE, (p, p+n-1)))
sre_compile.py(245):         for p, n in runs:
sre_compile.py(250):         if len(out) < len(charset):
sre_compile.py(251):             return out
sre_compile.py(185):         emit(OPCODES[op])
sre_compile.py(186):         if op is NEGATE:
sre_compile.py(188):         elif op is LITERAL:
sre_compile.py(190):         elif op is RANGE:
sre_compile.py(191):             emit(fixup(av[0]))
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(192):             emit(fixup(av[1]))
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(184):     for op, av in _optimize_charset(charset, fixup):
sre_compile.py(206):     emit(OPCODES[FAILURE])
sre_compile.py(59):             code[skip] = _len(code) - skip
sre_compile.py(41):     for op, av in pattern:
sre_compile.py(42):         if op in LITERAL_CODES:
sre_compile.py(49):         elif op is IN:
sre_compile.py(50):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(55):                 emit(OPCODES[op])
sre_compile.py(56):                 fixup = _identityfunction
sre_compile.py(57):             skip = _len(code); emit(0)
sre_compile.py(58):             _compile_charset(av, flags, code, fixup)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(181):     emit = code.append
sre_compile.py(182):     if fixup is None:
sre_compile.py(184):     for op, av in _optimize_charset(charset, fixup):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(210):     out = []
sre_compile.py(211):     outappend = out.append
sre_compile.py(212):     charmap = [0]*256
sre_compile.py(213):     try:
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(229):     i = p = n = 0
sre_compile.py(230):     runs = []
sre_compile.py(231):     runsappend = runs.append
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(235):                 p = i
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(238):             runsappend((p, n))
sre_compile.py(239):             n = 0
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(235):                 p = i
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(238):             runsappend((p, n))
sre_compile.py(239):             n = 0
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(235):                 p = i
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(238):             runsappend((p, n))
sre_compile.py(239):             n = 0
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(241):     if n:
sre_compile.py(243):     if len(runs) <= 2:
sre_compile.py(254):         data = _mk_bitmap(charmap)
 --- modulename: sre_compile, funcname: _mk_bitmap
sre_compile.py(260):     data = []
sre_compile.py(261):     dataappend = data.append
sre_compile.py(262):     if _sre.CODESIZE == 2:
sre_compile.py(265):         start = (1L, 0L)
sre_compile.py(266):     m, v = start
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(272):             dataappend(v)
sre_compile.py(273):             m, v = start
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(269):             v = v + m
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(269):             v = v + m
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(269):             v = v + m
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(272):             dataappend(v)
sre_compile.py(273):             m, v = start
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(272):             dataappend(v)
sre_compile.py(273):             m, v = start
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(272):             dataappend(v)
sre_compile.py(273):             m, v = start
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(272):             dataappend(v)
sre_compile.py(273):             m, v = start
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(272):             dataappend(v)
sre_compile.py(273):             m, v = start
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(272):             dataappend(v)
sre_compile.py(273):             m, v = start
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(272):             dataappend(v)
sre_compile.py(273):             m, v = start
sre_compile.py(267):     for c in bits:
sre_compile.py(274):     return data
sre_compile.py(255):         outappend((CHARSET, data))
sre_compile.py(256):         return out
sre_compile.py(185):         emit(OPCODES[op])
sre_compile.py(186):         if op is NEGATE:
sre_compile.py(188):         elif op is LITERAL:
sre_compile.py(190):         elif op is RANGE:
sre_compile.py(193):         elif op is CHARSET:
sre_compile.py(194):             code.extend(av)
sre_compile.py(184):     for op, av in _optimize_charset(charset, fixup):
sre_compile.py(206):     emit(OPCODES[FAILURE])
sre_compile.py(59):             code[skip] = _len(code) - skip
sre_compile.py(41):     for op, av in pattern:
sre_compile.py(42):         if op in LITERAL_CODES:
sre_compile.py(49):         elif op is IN:
sre_compile.py(60):         elif op is ANY:
sre_compile.py(65):         elif op in REPEATING_CODES:
sre_compile.py(66):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(75):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(357):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(143):         if self.width:
sre_parse.py(144):             return self.width
sre_compile.py(358):     if lo == 0 and hi == MAXREPEAT:
sre_compile.py(360):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(76):                 if op is MAX_REPEAT:
sre_compile.py(77):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(80):                 skip = _len(code); emit(0)
sre_compile.py(81):                 emit(av[0])
sre_compile.py(82):                 emit(av[1])
sre_compile.py(83):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(35):     emit = code.append
sre_compile.py(36):     _len = len
sre_compile.py(37):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(38):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(39):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(40):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(42):         if op in LITERAL_CODES:
sre_compile.py(49):         elif op is IN:
sre_compile.py(50):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(55):                 emit(OPCODES[op])
sre_compile.py(56):                 fixup = _identityfunction
sre_compile.py(57):             skip = _len(code); emit(0)
sre_compile.py(58):             _compile_charset(av, flags, code, fixup)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(181):     emit = code.append
sre_compile.py(182):     if fixup is None:
sre_compile.py(184):     for op, av in _optimize_charset(charset, fixup):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(210):     out = []
sre_compile.py(211):     outappend = out.append
sre_compile.py(212):     charmap = [0]*256
sre_compile.py(213):     try:
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(229):     i = p = n = 0
sre_compile.py(230):     runs = []
sre_compile.py(231):     runsappend = runs.append
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(235):                 p = i
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(238):             runsappend((p, n))
sre_compile.py(239):             n = 0
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(235):                 p = i
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(238):             runsappend((p, n))
sre_compile.py(239):             n = 0
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(241):     if n:
sre_compile.py(243):     if len(runs) <= 2:
sre_compile.py(245):         for p, n in runs:
sre_compile.py(246):             if n == 1:
sre_compile.py(247):                 outappend((LITERAL, p))
sre_compile.py(245):         for p, n in runs:
sre_compile.py(246):             if n == 1:
sre_compile.py(247):                 outappend((LITERAL, p))
sre_compile.py(245):         for p, n in runs:
sre_compile.py(250):         if len(out) < len(charset):
sre_compile.py(257):     return charset
sre_compile.py(185):         emit(OPCODES[op])
sre_compile.py(186):         if op is NEGATE:
sre_compile.py(188):         elif op is LITERAL:
sre_compile.py(189):             emit(fixup(av))
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(184):     for op, av in _optimize_charset(charset, fixup):
sre_compile.py(185):         emit(OPCODES[op])
sre_compile.py(186):         if op is NEGATE:
sre_compile.py(188):         elif op is LITERAL:
sre_compile.py(189):             emit(fixup(av))
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(184):     for op, av in _optimize_charset(charset, fixup):
sre_compile.py(206):     emit(OPCODES[FAILURE])
sre_compile.py(59):             code[skip] = _len(code) - skip
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(84):                 emit(OPCODES[SUCCESS])
sre_compile.py(85):                 code[skip] = _len(code) - skip
sre_compile.py(41):     for op, av in pattern:
sre_compile.py(42):         if op in LITERAL_CODES:
sre_compile.py(49):         elif op is IN:
sre_compile.py(60):         elif op is ANY:
sre_compile.py(65):         elif op in REPEATING_CODES:
sre_compile.py(97):         elif op is SUBPATTERN:
sre_compile.py(106):         elif op in SUCCESS_CODES:
sre_compile.py(108):         elif op in ASSERT_CODES:
sre_compile.py(121):         elif op is CALL:
sre_compile.py(127):         elif op is AT:
sre_compile.py(128):             emit(OPCODES[op])
sre_compile.py(129):             if flags & SRE_FLAG_MULTILINE:
sre_compile.py(131):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(133):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(135):             emit(ATCODES[av])
sre_compile.py(41):     for op, av in pattern:
sre_compile.py(492):     code.append(OPCODES[SUCCESS])
sre_compile.py(494):     return code
sre_compile.py(510):     if p.pattern.groups > 100:
sre_compile.py(516):     groupindex = p.pattern.groupdict
sre_compile.py(517):     indexgroup = [None] * p.pattern.groups
sre_compile.py(518):     for k, i in groupindex.items():
sre_compile.py(521):     return _sre.compile(
sre_compile.py(522):         pattern, flags | p.pattern.flags, code,
sre_compile.py(523):         p.pattern.groups-1,
sre_compile.py(524):         groupindex, indexgroup
re.py(243):     if len(_cache) >= _MAXCACHE:
re.py(245):     _cache[cachekey] = p
re.py(246):     return p
textwrap.py(116):                  width=70,
textwrap.py(117):                  initial_indent="",
textwrap.py(118):                  subsequent_indent="",
textwrap.py(119):                  expand_tabs=True,
textwrap.py(120):                  replace_whitespace=True,
textwrap.py(121):                  fix_sentence_endings=False,
textwrap.py(122):                  break_long_words=True,
textwrap.py(123):                  drop_whitespace=True,
textwrap.py(124):                  break_on_hyphens=True):
textwrap.py(146):     def _munge_whitespace(self, text):
textwrap.py(163):     def _split(self, text):
textwrap.py(192):     def _fix_sentence_endings(self, chunks):
textwrap.py(210):     def _handle_long_word(self, reversed_chunks, cur_line, cur_len, width):
textwrap.py(243):     def _wrap_chunks(self, chunks):
textwrap.py(316):     def wrap(self, text):
textwrap.py(331):     def fill(self, text):
textwrap.py(343): def wrap(text, width=70, **kwargs):
textwrap.py(356): def fill(text, width=70, **kwargs):
textwrap.py(371): _whitespace_only_re = re.compile('^[ \t]+$', re.MULTILINE)
 --- modulename: re, funcname: compile
re.py(190):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
re.py(228):     cachekey = (type(key[0]),) + key
re.py(229):     p = _cache.get(cachekey)
re.py(230):     if p is not None:
re.py(232):     pattern, flags = key
re.py(233):     if isinstance(pattern, _pattern_type):
re.py(237):     if not sre_compile.isstring(pattern):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(476):     for tp in STRING_TYPES:
sre_compile.py(477):         if isinstance(obj, tp):
sre_compile.py(478):             return 1
re.py(239):     try:
re.py(240):         p = sre_compile.compile(pattern, flags)
 --- modulename: sre_compile, funcname: compile
sre_compile.py(499):     if isstring(p):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(476):     for tp in STRING_TYPES:
sre_compile.py(477):         if isinstance(obj, tp):
sre_compile.py(478):             return 1
sre_compile.py(500):         pattern = p
sre_compile.py(501):         p = sre_parse.parse(p, flags)
 --- modulename: sre_parse, funcname: parse
sre_parse.py(679):     source = Tokenizer(str)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(180):         self.string = string
sre_parse.py(181):         self.index = 0
sre_parse.py(182):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(681):     if pattern is None:
sre_parse.py(682):         pattern = Pattern()
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(69):         self.flags = 0
sre_parse.py(70):         self.open = []
sre_parse.py(71):         self.groups = 1
sre_parse.py(72):         self.groupdict = {}
sre_parse.py(683):     pattern.flags = flags
sre_parse.py(684):     pattern.str = str
sre_parse.py(686):     p = _parse_sub(source, pattern, 0)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(305):     items = []
sre_parse.py(306):     itemsappend = items.append
sre_parse.py(307):     sourcematch = source.match
sre_parse.py(308):     while 1:
sre_parse.py(309):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(382):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(92):         self.pattern = pattern
sre_parse.py(93):         if data is None:
sre_parse.py(94):             data = []
sre_parse.py(95):         self.data = data
sre_parse.py(96):         self.width = None
sre_parse.py(385):     subpatternappend = subpattern.append
sre_parse.py(386):     sourceget = source.get
sre_parse.py(387):     sourcematch = source.match
sre_parse.py(388):     _len = len
sre_parse.py(389):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(390):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(391):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(392):     REPEATCODES = _REPEATCODES
sre_parse.py(394):     while 1:
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(402):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(413):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(416):         elif this == "[":
sre_parse.py(473):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(526):         elif this == ".":
sre_parse.py(529):         elif this == "(":
sre_parse.py(661):         elif this == "^":
sre_parse.py(662):             subpatternappend((AT, AT_BEGINNING))
 --- modulename: sre_parse, funcname: append
sre_parse.py(140):         self.data.append(code)
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(402):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(413):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(416):         elif this == "[":
sre_parse.py(418):             set = []
sre_parse.py(419):             setappend = set.append
sre_parse.py(422):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(425):             start = set[:]
sre_parse.py(426):             while 1:
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(429):                     break
sre_parse.py(465):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(467):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
sre_parse.py(471):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(140):         self.data.append(code)
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(402):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(413):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(416):         elif this == "[":
sre_parse.py(473):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(475):             if this == "?":
sre_parse.py(477):             elif this == "*":
sre_parse.py(480):             elif this == "+":
sre_parse.py(481):                 min, max = 1, MAXREPEAT
sre_parse.py(513):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
sre_parse.py(514):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(133):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(92):         self.pattern = pattern
sre_parse.py(93):         if data is None:
sre_parse.py(95):         self.data = data
sre_parse.py(96):         self.width = None
sre_parse.py(517):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_parse.py(519):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_parse.py(521):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(524):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(136):         self.data[index] = code
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(185):             self.next = None
sre_parse.py(186):             return
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(402):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(413):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(416):         elif this == "[":
sre_parse.py(473):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(526):         elif this == ".":
sre_parse.py(529):         elif this == "(":
sre_parse.py(661):         elif this == "^":
sre_parse.py(664):         elif this == "$":
sre_parse.py(665):             subpattern.append((AT, AT_END))
 --- modulename: sre_parse, funcname: append
sre_parse.py(140):         self.data.append(code)
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(185):             self.next = None
sre_parse.py(186):             return
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(400):             break # end of pattern
sre_parse.py(674):     return subpattern
sre_parse.py(310):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(312):         if not nested:
sre_parse.py(313):             break
sre_parse.py(319):     if len(items) == 1:
sre_parse.py(320):         return items[0]
sre_parse.py(688):     tail = source.get()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(185):             self.next = None
sre_parse.py(186):             return
sre_parse.py(205):         return this
sre_parse.py(689):     if tail == ")":
sre_parse.py(691):     elif tail:
sre_parse.py(694):     if flags & SRE_FLAG_DEBUG:
sre_parse.py(697):     if not (flags & SRE_FLAG_VERBOSE) and p.pattern.flags & SRE_FLAG_VERBOSE:
sre_parse.py(702):     return p
sre_compile.py(505):     code = _code(p, flags)
 --- modulename: sre_compile, funcname: _code
sre_compile.py(483):     flags = p.pattern.flags | flags
sre_compile.py(484):     code = []
sre_compile.py(487):     _compile_info(code, p, flags)
 --- modulename: sre_compile, funcname: _compile_info
sre_compile.py(366):     lo, hi = pattern.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(143):         if self.width:
sre_parse.py(145):         lo = hi = 0L
sre_parse.py(146):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(147):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(149):             if op is BRANCH:
sre_parse.py(158):             elif op is CALL:
sre_parse.py(162):             elif op is SUBPATTERN:
sre_parse.py(166):             elif op in REPEATCODES:
sre_parse.py(170):             elif op in UNITCODES:
sre_parse.py(173):             elif op == SUCCESS:
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(149):             if op is BRANCH:
sre_parse.py(158):             elif op is CALL:
sre_parse.py(162):             elif op is SUBPATTERN:
sre_parse.py(166):             elif op in REPEATCODES:
sre_parse.py(167):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(143):         if self.width:
sre_parse.py(145):         lo = hi = 0L
sre_parse.py(146):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(147):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(149):             if op is BRANCH:
sre_parse.py(158):             elif op is CALL:
sre_parse.py(162):             elif op is SUBPATTERN:
sre_parse.py(166):             elif op in REPEATCODES:
sre_parse.py(170):             elif op in UNITCODES:
sre_parse.py(171):                 lo = lo + 1
sre_parse.py(172):                 hi = hi + 1
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(175):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
sre_parse.py(176):         return self.width
sre_parse.py(168):                 lo = lo + long(i) * av[0]
sre_parse.py(169):                 hi = hi + long(j) * av[1]
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(149):             if op is BRANCH:
sre_parse.py(158):             elif op is CALL:
sre_parse.py(162):             elif op is SUBPATTERN:
sre_parse.py(166):             elif op in REPEATCODES:
sre_parse.py(170):             elif op in UNITCODES:
sre_parse.py(173):             elif op == SUCCESS:
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(175):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
sre_parse.py(176):         return self.width
sre_compile.py(367):     if lo == 0:
sre_compile.py(370):     prefix = []
sre_compile.py(371):     prefixappend = prefix.append
sre_compile.py(372):     prefix_skip = 0
sre_compile.py(373):     charset = [] # not used
sre_compile.py(374):     charsetappend = charset.append
sre_compile.py(375):     if not (flags & SRE_FLAG_IGNORECASE):
sre_compile.py(377):         for op, av in pattern.data:
sre_compile.py(378):             if op is LITERAL:
sre_compile.py(382):             elif op is SUBPATTERN and len(av[1]) == 1:
sre_compile.py(389):                 break
sre_compile.py(391):         if not prefix and pattern.data:
sre_compile.py(392):             op, av = pattern.data[0]
sre_compile.py(393):             if op is SUBPATTERN and av[1]:
sre_compile.py(410):             elif op is BRANCH:
sre_compile.py(423):             elif op is IN:
sre_compile.py(430):     emit = code.append
sre_compile.py(431):     emit(OPCODES[INFO])
sre_compile.py(432):     skip = len(code); emit(0)
sre_compile.py(434):     mask = 0
sre_compile.py(435):     if prefix:
sre_compile.py(439):     elif charset:
sre_compile.py(441):     emit(mask)
sre_compile.py(443):     if lo < MAXCODE:
sre_compile.py(444):         emit(lo)
sre_compile.py(448):     if hi < MAXCODE:
sre_compile.py(451):         emit(0)
sre_compile.py(453):     if prefix:
sre_compile.py(464):     elif charset:
sre_compile.py(466):     code[skip] = len(code) - skip
sre_compile.py(490):     _compile(code, p.data, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(35):     emit = code.append
sre_compile.py(36):     _len = len
sre_compile.py(37):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(38):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(39):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(40):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(41):     for op, av in pattern:
sre_compile.py(42):         if op in LITERAL_CODES:
sre_compile.py(49):         elif op is IN:
sre_compile.py(60):         elif op is ANY:
sre_compile.py(65):         elif op in REPEATING_CODES:
sre_compile.py(97):         elif op is SUBPATTERN:
sre_compile.py(106):         elif op in SUCCESS_CODES:
sre_compile.py(108):         elif op in ASSERT_CODES:
sre_compile.py(121):         elif op is CALL:
sre_compile.py(127):         elif op is AT:
sre_compile.py(128):             emit(OPCODES[op])
sre_compile.py(129):             if flags & SRE_FLAG_MULTILINE:
sre_compile.py(130):                 av = AT_MULTILINE.get(av, av)
sre_compile.py(131):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(133):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(135):             emit(ATCODES[av])
sre_compile.py(41):     for op, av in pattern:
sre_compile.py(42):         if op in LITERAL_CODES:
sre_compile.py(49):         elif op is IN:
sre_compile.py(60):         elif op is ANY:
sre_compile.py(65):         elif op in REPEATING_CODES:
sre_compile.py(66):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(75):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(357):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(143):         if self.width:
sre_parse.py(144):             return self.width
sre_compile.py(358):     if lo == 0 and hi == MAXREPEAT:
sre_compile.py(360):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(76):                 if op is MAX_REPEAT:
sre_compile.py(77):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(80):                 skip = _len(code); emit(0)
sre_compile.py(81):                 emit(av[0])
sre_compile.py(82):                 emit(av[1])
sre_compile.py(83):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(35):     emit = code.append
sre_compile.py(36):     _len = len
sre_compile.py(37):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(38):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(39):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(40):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(42):         if op in LITERAL_CODES:
sre_compile.py(49):         elif op is IN:
sre_compile.py(50):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(55):                 emit(OPCODES[op])
sre_compile.py(56):                 fixup = _identityfunction
sre_compile.py(57):             skip = _len(code); emit(0)
sre_compile.py(58):             _compile_charset(av, flags, code, fixup)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(181):     emit = code.append
sre_compile.py(182):     if fixup is None:
sre_compile.py(184):     for op, av in _optimize_charset(charset, fixup):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(210):     out = []
sre_compile.py(211):     outappend = out.append
sre_compile.py(212):     charmap = [0]*256
sre_compile.py(213):     try:
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(229):     i = p = n = 0
sre_compile.py(230):     runs = []
sre_compile.py(231):     runsappend = runs.append
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(235):                 p = i
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(238):             runsappend((p, n))
sre_compile.py(239):             n = 0
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(235):                 p = i
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(238):             runsappend((p, n))
sre_compile.py(239):             n = 0
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(241):     if n:
sre_compile.py(243):     if len(runs) <= 2:
sre_compile.py(245):         for p, n in runs:
sre_compile.py(246):             if n == 1:
sre_compile.py(247):                 outappend((LITERAL, p))
sre_compile.py(245):         for p, n in runs:
sre_compile.py(246):             if n == 1:
sre_compile.py(247):                 outappend((LITERAL, p))
sre_compile.py(245):         for p, n in runs:
sre_compile.py(250):         if len(out) < len(charset):
sre_compile.py(257):     return charset
sre_compile.py(185):         emit(OPCODES[op])
sre_compile.py(186):         if op is NEGATE:
sre_compile.py(188):         elif op is LITERAL:
sre_compile.py(189):             emit(fixup(av))
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(184):     for op, av in _optimize_charset(charset, fixup):
sre_compile.py(185):         emit(OPCODES[op])
sre_compile.py(186):         if op is NEGATE:
sre_compile.py(188):         elif op is LITERAL:
sre_compile.py(189):             emit(fixup(av))
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(184):     for op, av in _optimize_charset(charset, fixup):
sre_compile.py(206):     emit(OPCODES[FAILURE])
sre_compile.py(59):             code[skip] = _len(code) - skip
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(84):                 emit(OPCODES[SUCCESS])
sre_compile.py(85):                 code[skip] = _len(code) - skip
sre_compile.py(41):     for op, av in pattern:
sre_compile.py(42):         if op in LITERAL_CODES:
sre_compile.py(49):         elif op is IN:
sre_compile.py(60):         elif op is ANY:
sre_compile.py(65):         elif op in REPEATING_CODES:
sre_compile.py(97):         elif op is SUBPATTERN:
sre_compile.py(106):         elif op in SUCCESS_CODES:
sre_compile.py(108):         elif op in ASSERT_CODES:
sre_compile.py(121):         elif op is CALL:
sre_compile.py(127):         elif op is AT:
sre_compile.py(128):             emit(OPCODES[op])
sre_compile.py(129):             if flags & SRE_FLAG_MULTILINE:
sre_compile.py(130):                 av = AT_MULTILINE.get(av, av)
sre_compile.py(131):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(133):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(135):             emit(ATCODES[av])
sre_compile.py(41):     for op, av in pattern:
sre_compile.py(492):     code.append(OPCODES[SUCCESS])
sre_compile.py(494):     return code
sre_compile.py(510):     if p.pattern.groups > 100:
sre_compile.py(516):     groupindex = p.pattern.groupdict
sre_compile.py(517):     indexgroup = [None] * p.pattern.groups
sre_compile.py(518):     for k, i in groupindex.items():
sre_compile.py(521):     return _sre.compile(
sre_compile.py(522):         pattern, flags | p.pattern.flags, code,
sre_compile.py(523):         p.pattern.groups-1,
sre_compile.py(524):         groupindex, indexgroup
re.py(243):     if len(_cache) >= _MAXCACHE:
re.py(245):     _cache[cachekey] = p
re.py(246):     return p
textwrap.py(372): _leading_whitespace_re = re.compile('(^[ \t]*)(?:[^ \t\n])', re.MULTILINE)
 --- modulename: re, funcname: compile
re.py(190):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
re.py(228):     cachekey = (type(key[0]),) + key
re.py(229):     p = _cache.get(cachekey)
re.py(230):     if p is not None:
re.py(232):     pattern, flags = key
re.py(233):     if isinstance(pattern, _pattern_type):
re.py(237):     if not sre_compile.isstring(pattern):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(476):     for tp in STRING_TYPES:
sre_compile.py(477):         if isinstance(obj, tp):
sre_compile.py(478):             return 1
re.py(239):     try:
re.py(240):         p = sre_compile.compile(pattern, flags)
 --- modulename: sre_compile, funcname: compile
sre_compile.py(499):     if isstring(p):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(476):     for tp in STRING_TYPES:
sre_compile.py(477):         if isinstance(obj, tp):
sre_compile.py(478):             return 1
sre_compile.py(500):         pattern = p
sre_compile.py(501):         p = sre_parse.parse(p, flags)
 --- modulename: sre_parse, funcname: parse
sre_parse.py(679):     source = Tokenizer(str)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(180):         self.string = string
sre_parse.py(181):         self.index = 0
sre_parse.py(182):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(681):     if pattern is None:
sre_parse.py(682):         pattern = Pattern()
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(69):         self.flags = 0
sre_parse.py(70):         self.open = []
sre_parse.py(71):         self.groups = 1
sre_parse.py(72):         self.groupdict = {}
sre_parse.py(683):     pattern.flags = flags
sre_parse.py(684):     pattern.str = str
sre_parse.py(686):     p = _parse_sub(source, pattern, 0)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(305):     items = []
sre_parse.py(306):     itemsappend = items.append
sre_parse.py(307):     sourcematch = source.match
sre_parse.py(308):     while 1:
sre_parse.py(309):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(382):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(92):         self.pattern = pattern
sre_parse.py(93):         if data is None:
sre_parse.py(94):             data = []
sre_parse.py(95):         self.data = data
sre_parse.py(96):         self.width = None
sre_parse.py(385):     subpatternappend = subpattern.append
sre_parse.py(386):     sourceget = source.get
sre_parse.py(387):     sourcematch = source.match
sre_parse.py(388):     _len = len
sre_parse.py(389):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(390):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(391):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(392):     REPEATCODES = _REPEATCODES
sre_parse.py(394):     while 1:
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(402):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(413):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(416):         elif this == "[":
sre_parse.py(473):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(526):         elif this == ".":
sre_parse.py(529):         elif this == "(":
sre_parse.py(530):             group = 1
sre_parse.py(531):             name = None
sre_parse.py(532):             condgroup = None
sre_parse.py(533):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(636):             if group:
sre_parse.py(638):                 if group == 2:
sre_parse.py(642):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
sre_parse.py(74):         gid = self.groups
sre_parse.py(75):         self.groups = gid + 1
sre_parse.py(76):         if name is not None:
sre_parse.py(82):         self.open.append(gid)
sre_parse.py(83):         return gid
sre_parse.py(643):                 if condgroup:
sre_parse.py(646):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(305):     items = []
sre_parse.py(306):     itemsappend = items.append
sre_parse.py(307):     sourcematch = source.match
sre_parse.py(308):     while 1:
sre_parse.py(309):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(382):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(92):         self.pattern = pattern
sre_parse.py(93):         if data is None:
sre_parse.py(94):             data = []
sre_parse.py(95):         self.data = data
sre_parse.py(96):         self.width = None
sre_parse.py(385):     subpatternappend = subpattern.append
sre_parse.py(386):     sourceget = source.get
sre_parse.py(387):     sourcematch = source.match
sre_parse.py(388):     _len = len
sre_parse.py(389):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(390):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(391):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(392):     REPEATCODES = _REPEATCODES
sre_parse.py(394):     while 1:
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(402):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(413):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(416):         elif this == "[":
sre_parse.py(473):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(526):         elif this == ".":
sre_parse.py(529):         elif this == "(":
sre_parse.py(661):         elif this == "^":
sre_parse.py(662):             subpatternappend((AT, AT_BEGINNING))
 --- modulename: sre_parse, funcname: append
sre_parse.py(140):         self.data.append(code)
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(402):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(413):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(416):         elif this == "[":
sre_parse.py(418):             set = []
sre_parse.py(419):             setappend = set.append
sre_parse.py(422):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(425):             start = set[:]
sre_parse.py(426):             while 1:
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(429):                     break
sre_parse.py(465):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(467):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
sre_parse.py(471):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(140):         self.data.append(code)
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(402):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(413):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(416):         elif this == "[":
sre_parse.py(473):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(475):             if this == "?":
sre_parse.py(477):             elif this == "*":
sre_parse.py(478):                 min, max = 0, MAXREPEAT
sre_parse.py(513):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
sre_parse.py(514):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(133):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(92):         self.pattern = pattern
sre_parse.py(93):         if data is None:
sre_parse.py(95):         self.data = data
sre_parse.py(96):         self.width = None
sre_parse.py(517):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_parse.py(519):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_parse.py(521):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(524):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(136):         self.data[index] = code
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(397):             break # end of subpattern
sre_parse.py(674):     return subpattern
sre_parse.py(310):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(312):         if not nested:
sre_parse.py(314):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(198):             if skip:
sre_parse.py(200):             return 1
sre_parse.py(315):             break
sre_parse.py(319):     if len(items) == 1:
sre_parse.py(320):         return items[0]
sre_parse.py(647):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(198):             if skip:
sre_parse.py(199):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(200):             return 1
sre_parse.py(649):                 if group is not None:
sre_parse.py(650):                     state.closegroup(group)
 --- modulename: sre_parse, funcname: closegroup
sre_parse.py(85):         self.open.remove(gid)
sre_parse.py(651):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(140):         self.data.append(code)
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(402):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(413):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(416):         elif this == "[":
sre_parse.py(473):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(526):         elif this == ".":
sre_parse.py(529):         elif this == "(":
sre_parse.py(530):             group = 1
sre_parse.py(531):             name = None
sre_parse.py(532):             condgroup = None
sre_parse.py(533):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(198):             if skip:
sre_parse.py(199):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(200):             return 1
sre_parse.py(534):                 group = 0
sre_parse.py(536):                 if sourcematch("P"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(579):                 elif sourcematch(":"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(198):             if skip:
sre_parse.py(199):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(200):             return 1
sre_parse.py(581):                     group = 2
sre_parse.py(636):             if group:
sre_parse.py(638):                 if group == 2:
sre_parse.py(640):                     group = None
sre_parse.py(643):                 if condgroup:
sre_parse.py(646):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(305):     items = []
sre_parse.py(306):     itemsappend = items.append
sre_parse.py(307):     sourcematch = source.match
sre_parse.py(308):     while 1:
sre_parse.py(309):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(382):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(92):         self.pattern = pattern
sre_parse.py(93):         if data is None:
sre_parse.py(94):             data = []
sre_parse.py(95):         self.data = data
sre_parse.py(96):         self.width = None
sre_parse.py(385):     subpatternappend = subpattern.append
sre_parse.py(386):     sourceget = source.get
sre_parse.py(387):     sourcematch = source.match
sre_parse.py(388):     _len = len
sre_parse.py(389):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(390):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(391):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(392):     REPEATCODES = _REPEATCODES
sre_parse.py(394):     while 1:
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(402):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(413):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(416):         elif this == "[":
sre_parse.py(418):             set = []
sre_parse.py(419):             setappend = set.append
sre_parse.py(422):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(198):             if skip:
sre_parse.py(199):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(200):             return 1
sre_parse.py(423):                 setappend((NEGATE, None))
sre_parse.py(425):             start = set[:]
sre_parse.py(426):             while 1:
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(429):                     break
sre_parse.py(465):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(467):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
sre_parse.py(471):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(140):         self.data.append(code)
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(397):             break # end of subpattern
sre_parse.py(674):     return subpattern
sre_parse.py(310):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(312):         if not nested:
sre_parse.py(314):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(198):             if skip:
sre_parse.py(200):             return 1
sre_parse.py(315):             break
sre_parse.py(319):     if len(items) == 1:
sre_parse.py(320):         return items[0]
sre_parse.py(647):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(198):             if skip:
sre_parse.py(199):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(185):             self.next = None
sre_parse.py(186):             return
sre_parse.py(200):             return 1
sre_parse.py(649):                 if group is not None:
sre_parse.py(651):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(140):         self.data.append(code)
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(185):             self.next = None
sre_parse.py(186):             return
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(400):             break # end of pattern
sre_parse.py(674):     return subpattern
sre_parse.py(310):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(312):         if not nested:
sre_parse.py(313):             break
sre_parse.py(319):     if len(items) == 1:
sre_parse.py(320):         return items[0]
sre_parse.py(688):     tail = source.get()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(185):             self.next = None
sre_parse.py(186):             return
sre_parse.py(205):         return this
sre_parse.py(689):     if tail == ")":
sre_parse.py(691):     elif tail:
sre_parse.py(694):     if flags & SRE_FLAG_DEBUG:
sre_parse.py(697):     if not (flags & SRE_FLAG_VERBOSE) and p.pattern.flags & SRE_FLAG_VERBOSE:
sre_parse.py(702):     return p
sre_compile.py(505):     code = _code(p, flags)
 --- modulename: sre_compile, funcname: _code
sre_compile.py(483):     flags = p.pattern.flags | flags
sre_compile.py(484):     code = []
sre_compile.py(487):     _compile_info(code, p, flags)
 --- modulename: sre_compile, funcname: _compile_info
sre_compile.py(366):     lo, hi = pattern.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(143):         if self.width:
sre_parse.py(145):         lo = hi = 0L
sre_parse.py(146):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(147):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(149):             if op is BRANCH:
sre_parse.py(158):             elif op is CALL:
sre_parse.py(162):             elif op is SUBPATTERN:
sre_parse.py(163):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(143):         if self.width:
sre_parse.py(145):         lo = hi = 0L
sre_parse.py(146):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(147):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(149):             if op is BRANCH:
sre_parse.py(158):             elif op is CALL:
sre_parse.py(162):             elif op is SUBPATTERN:
sre_parse.py(166):             elif op in REPEATCODES:
sre_parse.py(170):             elif op in UNITCODES:
sre_parse.py(173):             elif op == SUCCESS:
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(149):             if op is BRANCH:
sre_parse.py(158):             elif op is CALL:
sre_parse.py(162):             elif op is SUBPATTERN:
sre_parse.py(166):             elif op in REPEATCODES:
sre_parse.py(167):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(143):         if self.width:
sre_parse.py(145):         lo = hi = 0L
sre_parse.py(146):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(147):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(149):             if op is BRANCH:
sre_parse.py(158):             elif op is CALL:
sre_parse.py(162):             elif op is SUBPATTERN:
sre_parse.py(166):             elif op in REPEATCODES:
sre_parse.py(170):             elif op in UNITCODES:
sre_parse.py(171):                 lo = lo + 1
sre_parse.py(172):                 hi = hi + 1
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(175):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
sre_parse.py(176):         return self.width
sre_parse.py(168):                 lo = lo + long(i) * av[0]
sre_parse.py(169):                 hi = hi + long(j) * av[1]
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(175):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
sre_parse.py(176):         return self.width
sre_parse.py(164):                 lo = lo + i
sre_parse.py(165):                 hi = hi + j
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(149):             if op is BRANCH:
sre_parse.py(158):             elif op is CALL:
sre_parse.py(162):             elif op is SUBPATTERN:
sre_parse.py(163):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(143):         if self.width:
sre_parse.py(145):         lo = hi = 0L
sre_parse.py(146):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(147):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(149):             if op is BRANCH:
sre_parse.py(158):             elif op is CALL:
sre_parse.py(162):             elif op is SUBPATTERN:
sre_parse.py(166):             elif op in REPEATCODES:
sre_parse.py(170):             elif op in UNITCODES:
sre_parse.py(171):                 lo = lo + 1
sre_parse.py(172):                 hi = hi + 1
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(175):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
sre_parse.py(176):         return self.width
sre_parse.py(164):                 lo = lo + i
sre_parse.py(165):                 hi = hi + j
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(175):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
sre_parse.py(176):         return self.width
sre_compile.py(367):     if lo == 0:
sre_compile.py(370):     prefix = []
sre_compile.py(371):     prefixappend = prefix.append
sre_compile.py(372):     prefix_skip = 0
sre_compile.py(373):     charset = [] # not used
sre_compile.py(374):     charsetappend = charset.append
sre_compile.py(375):     if not (flags & SRE_FLAG_IGNORECASE):
sre_compile.py(377):         for op, av in pattern.data:
sre_compile.py(378):             if op is LITERAL:
sre_compile.py(382):             elif op is SUBPATTERN and len(av[1]) == 1:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
sre_compile.py(389):                 break
sre_compile.py(391):         if not prefix and pattern.data:
sre_compile.py(392):             op, av = pattern.data[0]
sre_compile.py(393):             if op is SUBPATTERN and av[1]:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
sre_compile.py(394):                 op, av = av[1][0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(395):                 if op is LITERAL:
sre_compile.py(397):                 elif op is BRANCH:
sre_compile.py(430):     emit = code.append
sre_compile.py(431):     emit(OPCODES[INFO])
sre_compile.py(432):     skip = len(code); emit(0)
sre_compile.py(434):     mask = 0
sre_compile.py(435):     if prefix:
sre_compile.py(439):     elif charset:
sre_compile.py(441):     emit(mask)
sre_compile.py(443):     if lo < MAXCODE:
sre_compile.py(444):         emit(lo)
sre_compile.py(448):     if hi < MAXCODE:
sre_compile.py(451):         emit(0)
sre_compile.py(453):     if prefix:
sre_compile.py(464):     elif charset:
sre_compile.py(466):     code[skip] = len(code) - skip
sre_compile.py(490):     _compile(code, p.data, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(35):     emit = code.append
sre_compile.py(36):     _len = len
sre_compile.py(37):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(38):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(39):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(40):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(41):     for op, av in pattern:
sre_compile.py(42):         if op in LITERAL_CODES:
sre_compile.py(49):         elif op is IN:
sre_compile.py(60):         elif op is ANY:
sre_compile.py(65):         elif op in REPEATING_CODES:
sre_compile.py(97):         elif op is SUBPATTERN:
sre_compile.py(98):             if av[0]:
sre_compile.py(99):                 emit(OPCODES[MARK])
sre_compile.py(100):                 emit((av[0]-1)*2)
sre_compile.py(102):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(35):     emit = code.append
sre_compile.py(36):     _len = len
sre_compile.py(37):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(38):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(39):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(40):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(42):         if op in LITERAL_CODES:
sre_compile.py(49):         elif op is IN:
sre_compile.py(60):         elif op is ANY:
sre_compile.py(65):         elif op in REPEATING_CODES:
sre_compile.py(97):         elif op is SUBPATTERN:
sre_compile.py(106):         elif op in SUCCESS_CODES:
sre_compile.py(108):         elif op in ASSERT_CODES:
sre_compile.py(121):         elif op is CALL:
sre_compile.py(127):         elif op is AT:
sre_compile.py(128):             emit(OPCODES[op])
sre_compile.py(129):             if flags & SRE_FLAG_MULTILINE:
sre_compile.py(130):                 av = AT_MULTILINE.get(av, av)
sre_compile.py(131):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(133):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(135):             emit(ATCODES[av])
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(42):         if op in LITERAL_CODES:
sre_compile.py(49):         elif op is IN:
sre_compile.py(60):         elif op is ANY:
sre_compile.py(65):         elif op in REPEATING_CODES:
sre_compile.py(66):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(75):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(357):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(143):         if self.width:
sre_parse.py(144):             return self.width
sre_compile.py(358):     if lo == 0 and hi == MAXREPEAT:
sre_compile.py(360):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(76):                 if op is MAX_REPEAT:
sre_compile.py(77):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(80):                 skip = _len(code); emit(0)
sre_compile.py(81):                 emit(av[0])
sre_compile.py(82):                 emit(av[1])
sre_compile.py(83):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(35):     emit = code.append
sre_compile.py(36):     _len = len
sre_compile.py(37):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(38):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(39):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(40):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(42):         if op in LITERAL_CODES:
sre_compile.py(49):         elif op is IN:
sre_compile.py(50):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(55):                 emit(OPCODES[op])
sre_compile.py(56):                 fixup = _identityfunction
sre_compile.py(57):             skip = _len(code); emit(0)
sre_compile.py(58):             _compile_charset(av, flags, code, fixup)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(181):     emit = code.append
sre_compile.py(182):     if fixup is None:
sre_compile.py(184):     for op, av in _optimize_charset(charset, fixup):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(210):     out = []
sre_compile.py(211):     outappend = out.append
sre_compile.py(212):     charmap = [0]*256
sre_compile.py(213):     try:
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(229):     i = p = n = 0
sre_compile.py(230):     runs = []
sre_compile.py(231):     runsappend = runs.append
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(235):                 p = i
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(238):             runsappend((p, n))
sre_compile.py(239):             n = 0
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(235):                 p = i
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(238):             runsappend((p, n))
sre_compile.py(239):             n = 0
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(241):     if n:
sre_compile.py(243):     if len(runs) <= 2:
sre_compile.py(245):         for p, n in runs:
sre_compile.py(246):             if n == 1:
sre_compile.py(247):                 outappend((LITERAL, p))
sre_compile.py(245):         for p, n in runs:
sre_compile.py(246):             if n == 1:
sre_compile.py(247):                 outappend((LITERAL, p))
sre_compile.py(245):         for p, n in runs:
sre_compile.py(250):         if len(out) < len(charset):
sre_compile.py(257):     return charset
sre_compile.py(185):         emit(OPCODES[op])
sre_compile.py(186):         if op is NEGATE:
sre_compile.py(188):         elif op is LITERAL:
sre_compile.py(189):             emit(fixup(av))
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(184):     for op, av in _optimize_charset(charset, fixup):
sre_compile.py(185):         emit(OPCODES[op])
sre_compile.py(186):         if op is NEGATE:
sre_compile.py(188):         elif op is LITERAL:
sre_compile.py(189):             emit(fixup(av))
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(184):     for op, av in _optimize_charset(charset, fixup):
sre_compile.py(206):     emit(OPCODES[FAILURE])
sre_compile.py(59):             code[skip] = _len(code) - skip
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(84):                 emit(OPCODES[SUCCESS])
sre_compile.py(85):                 code[skip] = _len(code) - skip
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(103):             if av[0]:
sre_compile.py(104):                 emit(OPCODES[MARK])
sre_compile.py(105):                 emit((av[0]-1)*2+1)
sre_compile.py(41):     for op, av in pattern:
sre_compile.py(42):         if op in LITERAL_CODES:
sre_compile.py(49):         elif op is IN:
sre_compile.py(60):         elif op is ANY:
sre_compile.py(65):         elif op in REPEATING_CODES:
sre_compile.py(97):         elif op is SUBPATTERN:
sre_compile.py(98):             if av[0]:
sre_compile.py(102):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(35):     emit = code.append
sre_compile.py(36):     _len = len
sre_compile.py(37):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(38):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(39):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(40):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(42):         if op in LITERAL_CODES:
sre_compile.py(49):         elif op is IN:
sre_compile.py(50):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(55):                 emit(OPCODES[op])
sre_compile.py(56):                 fixup = _identityfunction
sre_compile.py(57):             skip = _len(code); emit(0)
sre_compile.py(58):             _compile_charset(av, flags, code, fixup)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(181):     emit = code.append
sre_compile.py(182):     if fixup is None:
sre_compile.py(184):     for op, av in _optimize_charset(charset, fixup):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(210):     out = []
sre_compile.py(211):     outappend = out.append
sre_compile.py(212):     charmap = [0]*256
sre_compile.py(213):     try:
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(216):                 outappend((op, av))
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(229):     i = p = n = 0
sre_compile.py(230):     runs = []
sre_compile.py(231):     runsappend = runs.append
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(235):                 p = i
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(238):             runsappend((p, n))
sre_compile.py(239):             n = 0
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(235):                 p = i
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(238):             runsappend((p, n))
sre_compile.py(239):             n = 0
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(241):     if n:
sre_compile.py(243):     if len(runs) <= 2:
sre_compile.py(245):         for p, n in runs:
sre_compile.py(246):             if n == 1:
sre_compile.py(249):                 outappend((RANGE, (p, p+n-1)))
sre_compile.py(245):         for p, n in runs:
sre_compile.py(246):             if n == 1:
sre_compile.py(247):                 outappend((LITERAL, p))
sre_compile.py(245):         for p, n in runs:
sre_compile.py(250):         if len(out) < len(charset):
sre_compile.py(251):             return out
sre_compile.py(185):         emit(OPCODES[op])
sre_compile.py(186):         if op is NEGATE:
sre_compile.py(187):             pass
sre_compile.py(184):     for op, av in _optimize_charset(charset, fixup):
sre_compile.py(185):         emit(OPCODES[op])
sre_compile.py(186):         if op is NEGATE:
sre_compile.py(188):         elif op is LITERAL:
sre_compile.py(190):         elif op is RANGE:
sre_compile.py(191):             emit(fixup(av[0]))
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(192):             emit(fixup(av[1]))
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(184):     for op, av in _optimize_charset(charset, fixup):
sre_compile.py(185):         emit(OPCODES[op])
sre_compile.py(186):         if op is NEGATE:
sre_compile.py(188):         elif op is LITERAL:
sre_compile.py(189):             emit(fixup(av))
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(184):     for op, av in _optimize_charset(charset, fixup):
sre_compile.py(206):     emit(OPCODES[FAILURE])
sre_compile.py(59):             code[skip] = _len(code) - skip
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(103):             if av[0]:
sre_compile.py(41):     for op, av in pattern:
sre_compile.py(492):     code.append(OPCODES[SUCCESS])
sre_compile.py(494):     return code
sre_compile.py(510):     if p.pattern.groups > 100:
sre_compile.py(516):     groupindex = p.pattern.groupdict
sre_compile.py(517):     indexgroup = [None] * p.pattern.groups
sre_compile.py(518):     for k, i in groupindex.items():
sre_compile.py(521):     return _sre.compile(
sre_compile.py(522):         pattern, flags | p.pattern.flags, code,
sre_compile.py(523):         p.pattern.groups-1,
sre_compile.py(524):         groupindex, indexgroup
re.py(243):     if len(_cache) >= _MAXCACHE:
re.py(245):     _cache[cachekey] = p
re.py(246):     return p
textwrap.py(374): def dedent(text):
textwrap.py(422): if __name__ == "__main__":
optparse.py(79): def _repr(self):
optparse.py(89): try:
optparse.py(90):     from gettext import gettext
 --- modulename: gettext, funcname: <module>
gettext.py(11): """
gettext.py(49): import locale, copy, os, re, struct, sys
 --- modulename: locale, funcname: <module>
locale.py(12): """
locale.py(14): import sys
locale.py(15): import encodings
locale.py(16): import encodings.aliases
locale.py(17): import re
locale.py(18): import operator
locale.py(19): import functools
 --- modulename: functools, funcname: <module>
functools.py(2): """
functools.py(10): from _functools import partial, reduce
functools.py(15): WRAPPER_ASSIGNMENTS = ('__module__', '__name__', '__doc__')
functools.py(16): WRAPPER_UPDATES = ('__dict__',)
functools.py(19):                    assigned = WRAPPER_ASSIGNMENTS,
functools.py(20):                    updated = WRAPPER_UPDATES):
functools.py(40):           assigned = WRAPPER_ASSIGNMENTS,
functools.py(41):           updated = WRAPPER_UPDATES):
functools.py(53): def total_ordering(cls):
functools.py(80): def cmp_to_key(mycmp):
locale.py(21): try:
locale.py(22):     _unicode = unicode
locale.py(35): __all__ = ["getlocale", "getdefaultlocale", "getpreferredencoding", "Error",
locale.py(36):            "setlocale", "resetlocale", "localeconv", "strcoll", "strxfrm",
locale.py(37):            "str", "atof", "atoi", "format", "format_string", "currency",
locale.py(38):            "normalize", "LC_CTYPE", "LC_COLLATE", "LC_TIME", "LC_MONETARY",
locale.py(39):            "LC_NUMERIC", "LC_ALL", "CHAR_MAX"]
locale.py(41): try:
locale.py(43):     from _locale import *
locale.py(104): _localeconv = localeconv
locale.py(108): _override_localeconv = {}
locale.py(110): @functools.wraps(_localeconv)
 --- modulename: functools, funcname: wraps
functools.py(50):     return partial(update_wrapper, wrapped=wrapped,
functools.py(51):                    assigned=assigned, updated=updated)
 --- modulename: functools, funcname: update_wrapper
functools.py(32):     for attr in assigned:
functools.py(33):         setattr(wrapper, attr, getattr(wrapped, attr))
functools.py(32):     for attr in assigned:
functools.py(33):         setattr(wrapper, attr, getattr(wrapped, attr))
functools.py(32):     for attr in assigned:
functools.py(33):         setattr(wrapper, attr, getattr(wrapped, attr))
functools.py(32):     for attr in assigned:
functools.py(34):     for attr in updated:
functools.py(35):         getattr(wrapper, attr).update(getattr(wrapped, attr, {}))
functools.py(34):     for attr in updated:
functools.py(37):     return wrapper
locale.py(124): def _grouping_intervals(grouping):
locale.py(140): def _group(s, monetary=False):
locale.py(171): def _strip_padding(s, amount):
locale.py(182): _percent_re = re.compile(r'%(?:\((?P<key>.*?)\))?'
 --- modulename: re, funcname: compile
re.py(190):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
re.py(228):     cachekey = (type(key[0]),) + key
re.py(229):     p = _cache.get(cachekey)
re.py(230):     if p is not None:
re.py(232):     pattern, flags = key
re.py(233):     if isinstance(pattern, _pattern_type):
re.py(237):     if not sre_compile.isstring(pattern):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(476):     for tp in STRING_TYPES:
sre_compile.py(477):         if isinstance(obj, tp):
sre_compile.py(478):             return 1
re.py(239):     try:
re.py(240):         p = sre_compile.compile(pattern, flags)
 --- modulename: sre_compile, funcname: compile
sre_compile.py(499):     if isstring(p):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(476):     for tp in STRING_TYPES:
sre_compile.py(477):         if isinstance(obj, tp):
sre_compile.py(478):             return 1
sre_compile.py(500):         pattern = p
sre_compile.py(501):         p = sre_parse.parse(p, flags)
 --- modulename: sre_parse, funcname: parse
sre_parse.py(679):     source = Tokenizer(str)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(180):         self.string = string
sre_parse.py(181):         self.index = 0
sre_parse.py(182):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(681):     if pattern is None:
sre_parse.py(682):         pattern = Pattern()
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(69):         self.flags = 0
sre_parse.py(70):         self.open = []
sre_parse.py(71):         self.groups = 1
sre_parse.py(72):         self.groupdict = {}
sre_parse.py(683):     pattern.flags = flags
sre_parse.py(684):     pattern.str = str
sre_parse.py(686):     p = _parse_sub(source, pattern, 0)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(305):     items = []
sre_parse.py(306):     itemsappend = items.append
sre_parse.py(307):     sourcematch = source.match
sre_parse.py(308):     while 1:
sre_parse.py(309):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(382):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(92):         self.pattern = pattern
sre_parse.py(93):         if data is None:
sre_parse.py(94):             data = []
sre_parse.py(95):         self.data = data
sre_parse.py(96):         self.width = None
sre_parse.py(385):     subpatternappend = subpattern.append
sre_parse.py(386):     sourceget = source.get
sre_parse.py(387):     sourcematch = source.match
sre_parse.py(388):     _len = len
sre_parse.py(389):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(390):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(391):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(392):     REPEATCODES = _REPEATCODES
sre_parse.py(394):     while 1:
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(402):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(413):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(414):             subpatternappend((LITERAL, ord(this)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(140):         self.data.append(code)
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(402):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(413):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(416):         elif this == "[":
sre_parse.py(473):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(526):         elif this == ".":
sre_parse.py(529):         elif this == "(":
sre_parse.py(530):             group = 1
sre_parse.py(531):             name = None
sre_parse.py(532):             condgroup = None
sre_parse.py(533):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(198):             if skip:
sre_parse.py(199):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(200):             return 1
sre_parse.py(534):                 group = 0
sre_parse.py(536):                 if sourcematch("P"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(579):                 elif sourcematch(":"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(198):             if skip:
sre_parse.py(199):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(189):             try:
sre_parse.py(190):                 c = self.string[self.index + 1]
sre_parse.py(193):             char = char + c
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(200):             return 1
sre_parse.py(581):                     group = 2
sre_parse.py(636):             if group:
sre_parse.py(638):                 if group == 2:
sre_parse.py(640):                     group = None
sre_parse.py(643):                 if condgroup:
sre_parse.py(646):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(305):     items = []
sre_parse.py(306):     itemsappend = items.append
sre_parse.py(307):     sourcematch = source.match
sre_parse.py(308):     while 1:
sre_parse.py(309):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(382):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(92):         self.pattern = pattern
sre_parse.py(93):         if data is None:
sre_parse.py(94):             data = []
sre_parse.py(95):         self.data = data
sre_parse.py(96):         self.width = None
sre_parse.py(385):     subpatternappend = subpattern.append
sre_parse.py(386):     sourceget = source.get
sre_parse.py(387):     sourcematch = source.match
sre_parse.py(388):     _len = len
sre_parse.py(389):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(390):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(391):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(392):     REPEATCODES = _REPEATCODES
sre_parse.py(394):     while 1:
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(402):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(413):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(416):         elif this == "[":
sre_parse.py(473):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(526):         elif this == ".":
sre_parse.py(529):         elif this == "(":
sre_parse.py(661):         elif this == "^":
sre_parse.py(664):         elif this == "$":
sre_parse.py(667):         elif this and this[0] == "\\":
sre_parse.py(668):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(260):     code = CATEGORIES.get(escape)
sre_parse.py(261):     if code:
sre_parse.py(263):     code = ESCAPES.get(escape)
sre_parse.py(264):     if code:
sre_parse.py(266):     try:
sre_parse.py(267):         c = escape[1:2]
sre_parse.py(268):         if c == "x":
sre_parse.py(275):         elif c == "0":
sre_parse.py(280):         elif c in DIGITS:
sre_parse.py(296):         if len(escape) == 2:
sre_parse.py(297):             return LITERAL, ord(escape[1])
sre_parse.py(669):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(140):         self.data.append(code)
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(402):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(413):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(416):         elif this == "[":
sre_parse.py(473):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(526):         elif this == ".":
sre_parse.py(529):         elif this == "(":
sre_parse.py(530):             group = 1
sre_parse.py(531):             name = None
sre_parse.py(532):             condgroup = None
sre_parse.py(533):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(198):             if skip:
sre_parse.py(199):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(200):             return 1
sre_parse.py(534):                 group = 0
sre_parse.py(536):                 if sourcematch("P"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(198):             if skip:
sre_parse.py(199):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(200):             return 1
sre_parse.py(538):                     if sourcematch("<"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(198):             if skip:
sre_parse.py(199):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(200):             return 1
sre_parse.py(540):                         name = ""
sre_parse.py(541):                         while 1:
sre_parse.py(542):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(543):                             if char is None:
sre_parse.py(545):                             if char == ">":
sre_parse.py(547):                             name = name + char
sre_parse.py(542):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(543):                             if char is None:
sre_parse.py(545):                             if char == ">":
sre_parse.py(547):                             name = name + char
sre_parse.py(542):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(543):                             if char is None:
sre_parse.py(545):                             if char == ">":
sre_parse.py(547):                             name = name + char
sre_parse.py(542):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(543):                             if char is None:
sre_parse.py(545):                             if char == ">":
sre_parse.py(546):                                 break
sre_parse.py(548):                         group = 1
sre_parse.py(549):                         if not name:
sre_parse.py(551):                         if not isname(name):
 --- modulename: sre_parse, funcname: isname
sre_parse.py(219):     if not isident(name[0]):
 --- modulename: sre_parse, funcname: isident
sre_parse.py(212):     return "a" <= char <= "z" or "A" <= char <= "Z" or char == "_"
sre_parse.py(221):     for char in name[1:]:
sre_parse.py(222):         if not isident(char) and not isdigit(char):
 --- modulename: sre_parse, funcname: isident
sre_parse.py(212):     return "a" <= char <= "z" or "A" <= char <= "Z" or char == "_"
sre_parse.py(221):     for char in name[1:]:
sre_parse.py(222):         if not isident(char) and not isdigit(char):
 --- modulename: sre_parse, funcname: isident
sre_parse.py(212):     return "a" <= char <= "z" or "A" <= char <= "Z" or char == "_"
sre_parse.py(221):     for char in name[1:]:
sre_parse.py(224):     return True
sre_parse.py(636):             if group:
sre_parse.py(638):                 if group == 2:
sre_parse.py(642):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
sre_parse.py(74):         gid = self.groups
sre_parse.py(75):         self.groups = gid + 1
sre_parse.py(76):         if name is not None:
sre_parse.py(77):             ogid = self.groupdict.get(name, None)
sre_parse.py(78):             if ogid is not None:
sre_parse.py(81):             self.groupdict[name] = gid
sre_parse.py(82):         self.open.append(gid)
sre_parse.py(83):         return gid
sre_parse.py(643):                 if condgroup:
sre_parse.py(646):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(305):     items = []
sre_parse.py(306):     itemsappend = items.append
sre_parse.py(307):     sourcematch = source.match
sre_parse.py(308):     while 1:
sre_parse.py(309):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(382):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(92):         self.pattern = pattern
sre_parse.py(93):         if data is None:
sre_parse.py(94):             data = []
sre_parse.py(95):         self.data = data
sre_parse.py(96):         self.width = None
sre_parse.py(385):     subpatternappend = subpattern.append
sre_parse.py(386):     sourceget = source.get
sre_parse.py(387):     sourcematch = source.match
sre_parse.py(388):     _len = len
sre_parse.py(389):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(390):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(391):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(392):     REPEATCODES = _REPEATCODES
sre_parse.py(394):     while 1:
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(402):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(413):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(416):         elif this == "[":
sre_parse.py(473):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(526):         elif this == ".":
sre_parse.py(527):             subpatternappend((ANY, None))
 --- modulename: sre_parse, funcname: append
sre_parse.py(140):         self.data.append(code)
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(402):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(413):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(416):         elif this == "[":
sre_parse.py(473):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(475):             if this == "?":
sre_parse.py(477):             elif this == "*":
sre_parse.py(478):                 min, max = 0, MAXREPEAT
sre_parse.py(513):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
sre_parse.py(514):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(133):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(92):         self.pattern = pattern
sre_parse.py(93):         if data is None:
sre_parse.py(95):         self.data = data
sre_parse.py(96):         self.width = None
sre_parse.py(517):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_parse.py(519):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_parse.py(521):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(198):             if skip:
sre_parse.py(199):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(200):             return 1
sre_parse.py(522):                 subpattern[-1] = (MIN_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(136):         self.data[index] = code
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(397):             break # end of subpattern
sre_parse.py(674):     return subpattern
sre_parse.py(310):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(312):         if not nested:
sre_parse.py(314):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(198):             if skip:
sre_parse.py(200):             return 1
sre_parse.py(315):             break
sre_parse.py(319):     if len(items) == 1:
sre_parse.py(320):         return items[0]
sre_parse.py(647):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(198):             if skip:
sre_parse.py(199):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(189):             try:
sre_parse.py(190):                 c = self.string[self.index + 1]
sre_parse.py(193):             char = char + c
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(200):             return 1
sre_parse.py(649):                 if group is not None:
sre_parse.py(650):                     state.closegroup(group)
 --- modulename: sre_parse, funcname: closegroup
sre_parse.py(85):         self.open.remove(gid)
sre_parse.py(651):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(140):         self.data.append(code)
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(402):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(413):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(416):         elif this == "[":
sre_parse.py(473):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(526):         elif this == ".":
sre_parse.py(529):         elif this == "(":
sre_parse.py(661):         elif this == "^":
sre_parse.py(664):         elif this == "$":
sre_parse.py(667):         elif this and this[0] == "\\":
sre_parse.py(668):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(260):     code = CATEGORIES.get(escape)
sre_parse.py(261):     if code:
sre_parse.py(263):     code = ESCAPES.get(escape)
sre_parse.py(264):     if code:
sre_parse.py(266):     try:
sre_parse.py(267):         c = escape[1:2]
sre_parse.py(268):         if c == "x":
sre_parse.py(275):         elif c == "0":
sre_parse.py(280):         elif c in DIGITS:
sre_parse.py(296):         if len(escape) == 2:
sre_parse.py(297):             return LITERAL, ord(escape[1])
sre_parse.py(669):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(140):         self.data.append(code)
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(397):             break # end of subpattern
sre_parse.py(674):     return subpattern
sre_parse.py(310):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(312):         if not nested:
sre_parse.py(314):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(198):             if skip:
sre_parse.py(200):             return 1
sre_parse.py(315):             break
sre_parse.py(319):     if len(items) == 1:
sre_parse.py(320):         return items[0]
sre_parse.py(647):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(198):             if skip:
sre_parse.py(199):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(200):             return 1
sre_parse.py(649):                 if group is not None:
sre_parse.py(651):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(140):         self.data.append(code)
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(402):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(413):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(416):         elif this == "[":
sre_parse.py(473):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(475):             if this == "?":
sre_parse.py(476):                 min, max = 0, 1
sre_parse.py(513):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
sre_parse.py(514):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(133):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(92):         self.pattern = pattern
sre_parse.py(93):         if data is None:
sre_parse.py(95):         self.data = data
sre_parse.py(96):         self.width = None
sre_parse.py(517):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_parse.py(519):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_parse.py(521):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(524):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(136):         self.data[index] = code
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(402):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(413):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(416):         elif this == "[":
sre_parse.py(473):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(526):         elif this == ".":
sre_parse.py(529):         elif this == "(":
sre_parse.py(530):             group = 1
sre_parse.py(531):             name = None
sre_parse.py(532):             condgroup = None
sre_parse.py(533):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(198):             if skip:
sre_parse.py(199):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(200):             return 1
sre_parse.py(534):                 group = 0
sre_parse.py(536):                 if sourcematch("P"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(198):             if skip:
sre_parse.py(199):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(200):             return 1
sre_parse.py(538):                     if sourcematch("<"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(198):             if skip:
sre_parse.py(199):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(200):             return 1
sre_parse.py(540):                         name = ""
sre_parse.py(541):                         while 1:
sre_parse.py(542):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(543):                             if char is None:
sre_parse.py(545):                             if char == ">":
sre_parse.py(547):                             name = name + char
sre_parse.py(542):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(543):                             if char is None:
sre_parse.py(545):                             if char == ">":
sre_parse.py(547):                             name = name + char
sre_parse.py(542):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(543):                             if char is None:
sre_parse.py(545):                             if char == ">":
sre_parse.py(547):                             name = name + char
sre_parse.py(542):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(543):                             if char is None:
sre_parse.py(545):                             if char == ">":
sre_parse.py(547):                             name = name + char
sre_parse.py(542):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(543):                             if char is None:
sre_parse.py(545):                             if char == ">":
sre_parse.py(547):                             name = name + char
sre_parse.py(542):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(543):                             if char is None:
sre_parse.py(545):                             if char == ">":
sre_parse.py(547):                             name = name + char
sre_parse.py(542):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(543):                             if char is None:
sre_parse.py(545):                             if char == ">":
sre_parse.py(547):                             name = name + char
sre_parse.py(542):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(543):                             if char is None:
sre_parse.py(545):                             if char == ">":
sre_parse.py(547):                             name = name + char
sre_parse.py(542):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(543):                             if char is None:
sre_parse.py(545):                             if char == ">":
sre_parse.py(547):                             name = name + char
sre_parse.py(542):                             char = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(543):                             if char is None:
sre_parse.py(545):                             if char == ">":
sre_parse.py(546):                                 break
sre_parse.py(548):                         group = 1
sre_parse.py(549):                         if not name:
sre_parse.py(551):                         if not isname(name):
 --- modulename: sre_parse, funcname: isname
sre_parse.py(219):     if not isident(name[0]):
 --- modulename: sre_parse, funcname: isident
sre_parse.py(212):     return "a" <= char <= "z" or "A" <= char <= "Z" or char == "_"
sre_parse.py(221):     for char in name[1:]:
sre_parse.py(222):         if not isident(char) and not isdigit(char):
 --- modulename: sre_parse, funcname: isident
sre_parse.py(212):     return "a" <= char <= "z" or "A" <= char <= "Z" or char == "_"
sre_parse.py(221):     for char in name[1:]:
sre_parse.py(222):         if not isident(char) and not isdigit(char):
 --- modulename: sre_parse, funcname: isident
sre_parse.py(212):     return "a" <= char <= "z" or "A" <= char <= "Z" or char == "_"
sre_parse.py(221):     for char in name[1:]:
sre_parse.py(222):         if not isident(char) and not isdigit(char):
 --- modulename: sre_parse, funcname: isident
sre_parse.py(212):     return "a" <= char <= "z" or "A" <= char <= "Z" or char == "_"
sre_parse.py(221):     for char in name[1:]:
sre_parse.py(222):         if not isident(char) and not isdigit(char):
 --- modulename: sre_parse, funcname: isident
sre_parse.py(212):     return "a" <= char <= "z" or "A" <= char <= "Z" or char == "_"
sre_parse.py(221):     for char in name[1:]:
sre_parse.py(222):         if not isident(char) and not isdigit(char):
 --- modulename: sre_parse, funcname: isident
sre_parse.py(212):     return "a" <= char <= "z" or "A" <= char <= "Z" or char == "_"
sre_parse.py(221):     for char in name[1:]:
sre_parse.py(222):         if not isident(char) and not isdigit(char):
 --- modulename: sre_parse, funcname: isident
sre_parse.py(212):     return "a" <= char <= "z" or "A" <= char <= "Z" or char == "_"
sre_parse.py(221):     for char in name[1:]:
sre_parse.py(222):         if not isident(char) and not isdigit(char):
 --- modulename: sre_parse, funcname: isident
sre_parse.py(212):     return "a" <= char <= "z" or "A" <= char <= "Z" or char == "_"
sre_parse.py(221):     for char in name[1:]:
sre_parse.py(222):         if not isident(char) and not isdigit(char):
 --- modulename: sre_parse, funcname: isident
sre_parse.py(212):     return "a" <= char <= "z" or "A" <= char <= "Z" or char == "_"
sre_parse.py(221):     for char in name[1:]:
sre_parse.py(224):     return True
sre_parse.py(636):             if group:
sre_parse.py(638):                 if group == 2:
sre_parse.py(642):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
sre_parse.py(74):         gid = self.groups
sre_parse.py(75):         self.groups = gid + 1
sre_parse.py(76):         if name is not None:
sre_parse.py(77):             ogid = self.groupdict.get(name, None)
sre_parse.py(78):             if ogid is not None:
sre_parse.py(81):             self.groupdict[name] = gid
sre_parse.py(82):         self.open.append(gid)
sre_parse.py(83):         return gid
sre_parse.py(643):                 if condgroup:
sre_parse.py(646):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(305):     items = []
sre_parse.py(306):     itemsappend = items.append
sre_parse.py(307):     sourcematch = source.match
sre_parse.py(308):     while 1:
sre_parse.py(309):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(382):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(92):         self.pattern = pattern
sre_parse.py(93):         if data is None:
sre_parse.py(94):             data = []
sre_parse.py(95):         self.data = data
sre_parse.py(96):         self.width = None
sre_parse.py(385):     subpatternappend = subpattern.append
sre_parse.py(386):     sourceget = source.get
sre_parse.py(387):     sourcematch = source.match
sre_parse.py(388):     _len = len
sre_parse.py(389):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(390):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(391):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(392):     REPEATCODES = _REPEATCODES
sre_parse.py(394):     while 1:
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(402):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(413):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(416):         elif this == "[":
sre_parse.py(418):             set = []
sre_parse.py(419):             setappend = set.append
sre_parse.py(422):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(425):             start = set[:]
sre_parse.py(426):             while 1:
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(198):             if skip:
sre_parse.py(199):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(200):             return 1
sre_parse.py(438):                     this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(439):                     if this == "]":
sre_parse.py(445):                     elif this:
sre_parse.py(446):                         if this[0] == "\\":
sre_parse.py(449):                             code2 = LITERAL, ord(this)
sre_parse.py(450):                         if code1[0] != LITERAL or code2[0] != LITERAL:
sre_parse.py(452):                         lo = code1[1]
sre_parse.py(453):                         hi = code2[1]
sre_parse.py(454):                         if hi < lo:
sre_parse.py(456):                         setappend((RANGE, (lo, hi)))
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(429):                     break
sre_parse.py(465):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(467):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
sre_parse.py(471):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(140):         self.data.append(code)
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(402):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(413):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(416):         elif this == "[":
sre_parse.py(473):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(475):             if this == "?":
sre_parse.py(477):             elif this == "*":
sre_parse.py(478):                 min, max = 0, MAXREPEAT
sre_parse.py(513):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
sre_parse.py(514):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(133):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(92):         self.pattern = pattern
sre_parse.py(93):         if data is None:
sre_parse.py(95):         self.data = data
sre_parse.py(96):         self.width = None
sre_parse.py(517):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_parse.py(519):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_parse.py(521):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(198):             if skip:
sre_parse.py(199):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(200):             return 1
sre_parse.py(522):                 subpattern[-1] = (MIN_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(136):         self.data[index] = code
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(397):             break # end of subpattern
sre_parse.py(674):     return subpattern
sre_parse.py(310):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(312):         if not nested:
sre_parse.py(314):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(198):             if skip:
sre_parse.py(200):             return 1
sre_parse.py(315):             break
sre_parse.py(319):     if len(items) == 1:
sre_parse.py(320):         return items[0]
sre_parse.py(647):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(198):             if skip:
sre_parse.py(199):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(200):             return 1
sre_parse.py(649):                 if group is not None:
sre_parse.py(650):                     state.closegroup(group)
 --- modulename: sre_parse, funcname: closegroup
sre_parse.py(85):         self.open.remove(gid)
sre_parse.py(651):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(140):         self.data.append(code)
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(402):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(413):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(416):         elif this == "[":
sre_parse.py(418):             set = []
sre_parse.py(419):             setappend = set.append
sre_parse.py(422):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(425):             start = set[:]
sre_parse.py(426):             while 1:
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(185):             self.next = None
sre_parse.py(186):             return
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(429):                     break
sre_parse.py(465):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(467):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
sre_parse.py(471):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(140):         self.data.append(code)
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(185):             self.next = None
sre_parse.py(186):             return
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(400):             break # end of pattern
sre_parse.py(674):     return subpattern
sre_parse.py(310):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(312):         if not nested:
sre_parse.py(313):             break
sre_parse.py(319):     if len(items) == 1:
sre_parse.py(320):         return items[0]
sre_parse.py(688):     tail = source.get()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(185):             self.next = None
sre_parse.py(186):             return
sre_parse.py(205):         return this
sre_parse.py(689):     if tail == ")":
sre_parse.py(691):     elif tail:
sre_parse.py(694):     if flags & SRE_FLAG_DEBUG:
sre_parse.py(697):     if not (flags & SRE_FLAG_VERBOSE) and p.pattern.flags & SRE_FLAG_VERBOSE:
sre_parse.py(702):     return p
sre_compile.py(505):     code = _code(p, flags)
 --- modulename: sre_compile, funcname: _code
sre_compile.py(483):     flags = p.pattern.flags | flags
sre_compile.py(484):     code = []
sre_compile.py(487):     _compile_info(code, p, flags)
 --- modulename: sre_compile, funcname: _compile_info
sre_compile.py(366):     lo, hi = pattern.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(143):         if self.width:
sre_parse.py(145):         lo = hi = 0L
sre_parse.py(146):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(147):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(149):             if op is BRANCH:
sre_parse.py(158):             elif op is CALL:
sre_parse.py(162):             elif op is SUBPATTERN:
sre_parse.py(166):             elif op in REPEATCODES:
sre_parse.py(170):             elif op in UNITCODES:
sre_parse.py(171):                 lo = lo + 1
sre_parse.py(172):                 hi = hi + 1
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(149):             if op is BRANCH:
sre_parse.py(158):             elif op is CALL:
sre_parse.py(162):             elif op is SUBPATTERN:
sre_parse.py(166):             elif op in REPEATCODES:
sre_parse.py(167):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(143):         if self.width:
sre_parse.py(145):         lo = hi = 0L
sre_parse.py(146):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(147):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(149):             if op is BRANCH:
sre_parse.py(158):             elif op is CALL:
sre_parse.py(162):             elif op is SUBPATTERN:
sre_parse.py(163):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(143):         if self.width:
sre_parse.py(145):         lo = hi = 0L
sre_parse.py(146):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(147):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(149):             if op is BRANCH:
sre_parse.py(158):             elif op is CALL:
sre_parse.py(162):             elif op is SUBPATTERN:
sre_parse.py(166):             elif op in REPEATCODES:
sre_parse.py(170):             elif op in UNITCODES:
sre_parse.py(171):                 lo = lo + 1
sre_parse.py(172):                 hi = hi + 1
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(149):             if op is BRANCH:
sre_parse.py(158):             elif op is CALL:
sre_parse.py(162):             elif op is SUBPATTERN:
sre_parse.py(163):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(143):         if self.width:
sre_parse.py(145):         lo = hi = 0L
sre_parse.py(146):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(147):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(149):             if op is BRANCH:
sre_parse.py(158):             elif op is CALL:
sre_parse.py(162):             elif op is SUBPATTERN:
sre_parse.py(166):             elif op in REPEATCODES:
sre_parse.py(167):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(143):         if self.width:
sre_parse.py(145):         lo = hi = 0L
sre_parse.py(146):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(147):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(149):             if op is BRANCH:
sre_parse.py(158):             elif op is CALL:
sre_parse.py(162):             elif op is SUBPATTERN:
sre_parse.py(166):             elif op in REPEATCODES:
sre_parse.py(170):             elif op in UNITCODES:
sre_parse.py(171):                 lo = lo + 1
sre_parse.py(172):                 hi = hi + 1
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(175):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
sre_parse.py(176):         return self.width
sre_parse.py(168):                 lo = lo + long(i) * av[0]
sre_parse.py(169):                 hi = hi + long(j) * av[1]
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(175):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
sre_parse.py(176):         return self.width
sre_parse.py(164):                 lo = lo + i
sre_parse.py(165):                 hi = hi + j
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(149):             if op is BRANCH:
sre_parse.py(158):             elif op is CALL:
sre_parse.py(162):             elif op is SUBPATTERN:
sre_parse.py(166):             elif op in REPEATCODES:
sre_parse.py(170):             elif op in UNITCODES:
sre_parse.py(171):                 lo = lo + 1
sre_parse.py(172):                 hi = hi + 1
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(175):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
sre_parse.py(176):         return self.width
sre_parse.py(164):                 lo = lo + i
sre_parse.py(165):                 hi = hi + j
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(175):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
sre_parse.py(176):         return self.width
sre_parse.py(168):                 lo = lo + long(i) * av[0]
sre_parse.py(169):                 hi = hi + long(j) * av[1]
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(149):             if op is BRANCH:
sre_parse.py(158):             elif op is CALL:
sre_parse.py(162):             elif op is SUBPATTERN:
sre_parse.py(163):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(143):         if self.width:
sre_parse.py(145):         lo = hi = 0L
sre_parse.py(146):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(147):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(149):             if op is BRANCH:
sre_parse.py(158):             elif op is CALL:
sre_parse.py(162):             elif op is SUBPATTERN:
sre_parse.py(166):             elif op in REPEATCODES:
sre_parse.py(167):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(143):         if self.width:
sre_parse.py(145):         lo = hi = 0L
sre_parse.py(146):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(147):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(149):             if op is BRANCH:
sre_parse.py(158):             elif op is CALL:
sre_parse.py(162):             elif op is SUBPATTERN:
sre_parse.py(166):             elif op in REPEATCODES:
sre_parse.py(170):             elif op in UNITCODES:
sre_parse.py(171):                 lo = lo + 1
sre_parse.py(172):                 hi = hi + 1
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(175):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
sre_parse.py(176):         return self.width
sre_parse.py(168):                 lo = lo + long(i) * av[0]
sre_parse.py(169):                 hi = hi + long(j) * av[1]
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(175):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
sre_parse.py(176):         return self.width
sre_parse.py(164):                 lo = lo + i
sre_parse.py(165):                 hi = hi + j
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(149):             if op is BRANCH:
sre_parse.py(158):             elif op is CALL:
sre_parse.py(162):             elif op is SUBPATTERN:
sre_parse.py(166):             elif op in REPEATCODES:
sre_parse.py(170):             elif op in UNITCODES:
sre_parse.py(171):                 lo = lo + 1
sre_parse.py(172):                 hi = hi + 1
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(175):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
sre_parse.py(176):         return self.width
sre_compile.py(367):     if lo == 0:
sre_compile.py(370):     prefix = []
sre_compile.py(371):     prefixappend = prefix.append
sre_compile.py(372):     prefix_skip = 0
sre_compile.py(373):     charset = [] # not used
sre_compile.py(374):     charsetappend = charset.append
sre_compile.py(375):     if not (flags & SRE_FLAG_IGNORECASE):
sre_compile.py(377):         for op, av in pattern.data:
sre_compile.py(378):             if op is LITERAL:
sre_compile.py(379):                 if len(prefix) == prefix_skip:
sre_compile.py(380):                     prefix_skip = prefix_skip + 1
sre_compile.py(381):                 prefixappend(av)
sre_compile.py(377):         for op, av in pattern.data:
sre_compile.py(378):             if op is LITERAL:
sre_compile.py(382):             elif op is SUBPATTERN and len(av[1]) == 1:
sre_compile.py(389):                 break
sre_compile.py(391):         if not prefix and pattern.data:
sre_compile.py(430):     emit = code.append
sre_compile.py(431):     emit(OPCODES[INFO])
sre_compile.py(432):     skip = len(code); emit(0)
sre_compile.py(434):     mask = 0
sre_compile.py(435):     if prefix:
sre_compile.py(436):         mask = SRE_INFO_PREFIX
sre_compile.py(437):         if len(prefix) == prefix_skip == len(pattern.data):
sre_compile.py(441):     emit(mask)
sre_compile.py(443):     if lo < MAXCODE:
sre_compile.py(444):         emit(lo)
sre_compile.py(448):     if hi < MAXCODE:
sre_compile.py(451):         emit(0)
sre_compile.py(453):     if prefix:
sre_compile.py(454):         emit(len(prefix)) # length
sre_compile.py(455):         emit(prefix_skip) # skip
sre_compile.py(456):         code.extend(prefix)
sre_compile.py(458):         table = [-1] + ([0]*len(prefix))
sre_compile.py(459):         for i in xrange(len(prefix)):
sre_compile.py(460):             table[i+1] = table[i]+1
sre_compile.py(461):             while table[i+1] > 0 and prefix[i] != prefix[table[i+1]-1]:
sre_compile.py(459):         for i in xrange(len(prefix)):
sre_compile.py(463):         code.extend(table[1:]) # don't store first entry
sre_compile.py(466):     code[skip] = len(code) - skip
sre_compile.py(490):     _compile(code, p.data, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(35):     emit = code.append
sre_compile.py(36):     _len = len
sre_compile.py(37):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(38):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(39):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(40):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(41):     for op, av in pattern:
sre_compile.py(42):         if op in LITERAL_CODES:
sre_compile.py(43):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(47):                 emit(OPCODES[op])
sre_compile.py(48):                 emit(av)
sre_compile.py(41):     for op, av in pattern:
sre_compile.py(42):         if op in LITERAL_CODES:
sre_compile.py(49):         elif op is IN:
sre_compile.py(60):         elif op is ANY:
sre_compile.py(65):         elif op in REPEATING_CODES:
sre_compile.py(66):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(75):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(357):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(143):         if self.width:
sre_parse.py(144):             return self.width
sre_compile.py(358):     if lo == 0 and hi == MAXREPEAT:
sre_compile.py(360):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
sre_compile.py(87):                 emit(OPCODES[REPEAT])
sre_compile.py(88):                 skip = _len(code); emit(0)
sre_compile.py(89):                 emit(av[0])
sre_compile.py(90):                 emit(av[1])
sre_compile.py(91):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(35):     emit = code.append
sre_compile.py(36):     _len = len
sre_compile.py(37):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(38):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(39):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(40):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(42):         if op in LITERAL_CODES:
sre_compile.py(49):         elif op is IN:
sre_compile.py(60):         elif op is ANY:
sre_compile.py(65):         elif op in REPEATING_CODES:
sre_compile.py(97):         elif op is SUBPATTERN:
sre_compile.py(98):             if av[0]:
sre_compile.py(102):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(35):     emit = code.append
sre_compile.py(36):     _len = len
sre_compile.py(37):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(38):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(39):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(40):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(42):         if op in LITERAL_CODES:
sre_compile.py(43):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(47):                 emit(OPCODES[op])
sre_compile.py(48):                 emit(av)
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(42):         if op in LITERAL_CODES:
sre_compile.py(49):         elif op is IN:
sre_compile.py(60):         elif op is ANY:
sre_compile.py(65):         elif op in REPEATING_CODES:
sre_compile.py(97):         elif op is SUBPATTERN:
sre_compile.py(98):             if av[0]:
sre_compile.py(99):                 emit(OPCODES[MARK])
sre_compile.py(100):                 emit((av[0]-1)*2)
sre_compile.py(102):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(35):     emit = code.append
sre_compile.py(36):     _len = len
sre_compile.py(37):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(38):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(39):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(40):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(42):         if op in LITERAL_CODES:
sre_compile.py(49):         elif op is IN:
sre_compile.py(60):         elif op is ANY:
sre_compile.py(65):         elif op in REPEATING_CODES:
sre_compile.py(66):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(75):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(357):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(143):         if self.width:
sre_parse.py(144):             return self.width
sre_compile.py(358):     if lo == 0 and hi == MAXREPEAT:
sre_compile.py(360):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(76):                 if op is MAX_REPEAT:
sre_compile.py(79):                     emit(OPCODES[MIN_REPEAT_ONE])
sre_compile.py(80):                 skip = _len(code); emit(0)
sre_compile.py(81):                 emit(av[0])
sre_compile.py(82):                 emit(av[1])
sre_compile.py(83):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(35):     emit = code.append
sre_compile.py(36):     _len = len
sre_compile.py(37):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(38):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(39):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(40):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(42):         if op in LITERAL_CODES:
sre_compile.py(49):         elif op is IN:
sre_compile.py(60):         elif op is ANY:
sre_compile.py(61):             if flags & SRE_FLAG_DOTALL:
sre_compile.py(64):                 emit(OPCODES[ANY])
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(84):                 emit(OPCODES[SUCCESS])
sre_compile.py(85):                 code[skip] = _len(code) - skip
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(103):             if av[0]:
sre_compile.py(104):                 emit(OPCODES[MARK])
sre_compile.py(105):                 emit((av[0]-1)*2+1)
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(42):         if op in LITERAL_CODES:
sre_compile.py(43):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(47):                 emit(OPCODES[op])
sre_compile.py(48):                 emit(av)
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(103):             if av[0]:
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(92):                 code[skip] = _len(code) - skip
sre_compile.py(93):                 if op is MAX_REPEAT:
sre_compile.py(94):                     emit(OPCODES[MAX_UNTIL])
sre_compile.py(41):     for op, av in pattern:
sre_compile.py(42):         if op in LITERAL_CODES:
sre_compile.py(49):         elif op is IN:
sre_compile.py(60):         elif op is ANY:
sre_compile.py(65):         elif op in REPEATING_CODES:
sre_compile.py(97):         elif op is SUBPATTERN:
sre_compile.py(98):             if av[0]:
sre_compile.py(99):                 emit(OPCODES[MARK])
sre_compile.py(100):                 emit((av[0]-1)*2)
sre_compile.py(102):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(35):     emit = code.append
sre_compile.py(36):     _len = len
sre_compile.py(37):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(38):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(39):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(40):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(42):         if op in LITERAL_CODES:
sre_compile.py(49):         elif op is IN:
sre_compile.py(60):         elif op is ANY:
sre_compile.py(65):         elif op in REPEATING_CODES:
sre_compile.py(66):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(75):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(357):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(143):         if self.width:
sre_parse.py(144):             return self.width
sre_compile.py(358):     if lo == 0 and hi == MAXREPEAT:
sre_compile.py(360):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(76):                 if op is MAX_REPEAT:
sre_compile.py(79):                     emit(OPCODES[MIN_REPEAT_ONE])
sre_compile.py(80):                 skip = _len(code); emit(0)
sre_compile.py(81):                 emit(av[0])
sre_compile.py(82):                 emit(av[1])
sre_compile.py(83):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(35):     emit = code.append
sre_compile.py(36):     _len = len
sre_compile.py(37):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(38):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(39):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(40):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(42):         if op in LITERAL_CODES:
sre_compile.py(49):         elif op is IN:
sre_compile.py(50):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(55):                 emit(OPCODES[op])
sre_compile.py(56):                 fixup = _identityfunction
sre_compile.py(57):             skip = _len(code); emit(0)
sre_compile.py(58):             _compile_charset(av, flags, code, fixup)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(181):     emit = code.append
sre_compile.py(182):     if fixup is None:
sre_compile.py(184):     for op, av in _optimize_charset(charset, fixup):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(210):     out = []
sre_compile.py(211):     outappend = out.append
sre_compile.py(212):     charmap = [0]*256
sre_compile.py(213):     try:
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(219):             elif op is RANGE:
sre_compile.py(220):                 for i in range(fixup(av[0]), fixup(av[1])+1):
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(221):                     charmap[i] = 1
sre_compile.py(220):                 for i in range(fixup(av[0]), fixup(av[1])+1):
sre_compile.py(221):                     charmap[i] = 1
sre_compile.py(220):                 for i in range(fixup(av[0]), fixup(av[1])+1):
sre_compile.py(221):                     charmap[i] = 1
sre_compile.py(220):                 for i in range(fixup(av[0]), fixup(av[1])+1):
sre_compile.py(221):                     charmap[i] = 1
sre_compile.py(220):                 for i in range(fixup(av[0]), fixup(av[1])+1):
sre_compile.py(221):                     charmap[i] = 1
sre_compile.py(220):                 for i in range(fixup(av[0]), fixup(av[1])+1):
sre_compile.py(221):                     charmap[i] = 1
sre_compile.py(220):                 for i in range(fixup(av[0]), fixup(av[1])+1):
sre_compile.py(221):                     charmap[i] = 1
sre_compile.py(220):                 for i in range(fixup(av[0]), fixup(av[1])+1):
sre_compile.py(221):                     charmap[i] = 1
sre_compile.py(220):                 for i in range(fixup(av[0]), fixup(av[1])+1):
sre_compile.py(221):                     charmap[i] = 1
sre_compile.py(220):                 for i in range(fixup(av[0]), fixup(av[1])+1):
sre_compile.py(221):                     charmap[i] = 1
sre_compile.py(220):                 for i in range(fixup(av[0]), fixup(av[1])+1):
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(229):     i = p = n = 0
sre_compile.py(230):     runs = []
sre_compile.py(231):     runsappend = runs.append
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(235):                 p = i
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(238):             runsappend((p, n))
sre_compile.py(239):             n = 0
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(235):                 p = i
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(238):             runsappend((p, n))
sre_compile.py(239):             n = 0
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(235):                 p = i
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(238):             runsappend((p, n))
sre_compile.py(239):             n = 0
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(235):                 p = i
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(238):             runsappend((p, n))
sre_compile.py(239):             n = 0
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(235):                 p = i
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(238):             runsappend((p, n))
sre_compile.py(239):             n = 0
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(235):                 p = i
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(238):             runsappend((p, n))
sre_compile.py(239):             n = 0
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(235):                 p = i
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(238):             runsappend((p, n))
sre_compile.py(239):             n = 0
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(235):                 p = i
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(238):             runsappend((p, n))
sre_compile.py(239):             n = 0
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(241):     if n:
sre_compile.py(243):     if len(runs) <= 2:
sre_compile.py(254):         data = _mk_bitmap(charmap)
 --- modulename: sre_compile, funcname: _mk_bitmap
sre_compile.py(260):     data = []
sre_compile.py(261):     dataappend = data.append
sre_compile.py(262):     if _sre.CODESIZE == 2:
sre_compile.py(265):         start = (1L, 0L)
sre_compile.py(266):     m, v = start
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(272):             dataappend(v)
sre_compile.py(273):             m, v = start
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(269):             v = v + m
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(269):             v = v + m
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(269):             v = v + m
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(269):             v = v + m
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(269):             v = v + m
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(269):             v = v + m
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(269):             v = v + m
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(269):             v = v + m
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(269):             v = v + m
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(269):             v = v + m
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(269):             v = v + m
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(269):             v = v + m
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(269):             v = v + m
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(269):             v = v + m
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(269):             v = v + m
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(269):             v = v + m
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(272):             dataappend(v)
sre_compile.py(273):             m, v = start
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(269):             v = v + m
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(272):             dataappend(v)
sre_compile.py(273):             m, v = start
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(269):             v = v + m
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(269):             v = v + m
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(272):             dataappend(v)
sre_compile.py(273):             m, v = start
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(272):             dataappend(v)
sre_compile.py(273):             m, v = start
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(272):             dataappend(v)
sre_compile.py(273):             m, v = start
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(272):             dataappend(v)
sre_compile.py(273):             m, v = start
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(272):             dataappend(v)
sre_compile.py(273):             m, v = start
sre_compile.py(267):     for c in bits:
sre_compile.py(274):     return data
sre_compile.py(255):         outappend((CHARSET, data))
sre_compile.py(256):         return out
sre_compile.py(185):         emit(OPCODES[op])
sre_compile.py(186):         if op is NEGATE:
sre_compile.py(188):         elif op is LITERAL:
sre_compile.py(190):         elif op is RANGE:
sre_compile.py(193):         elif op is CHARSET:
sre_compile.py(194):             code.extend(av)
sre_compile.py(184):     for op, av in _optimize_charset(charset, fixup):
sre_compile.py(206):     emit(OPCODES[FAILURE])
sre_compile.py(59):             code[skip] = _len(code) - skip
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(84):                 emit(OPCODES[SUCCESS])
sre_compile.py(85):                 code[skip] = _len(code) - skip
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(103):             if av[0]:
sre_compile.py(104):                 emit(OPCODES[MARK])
sre_compile.py(105):                 emit((av[0]-1)*2+1)
sre_compile.py(41):     for op, av in pattern:
sre_compile.py(42):         if op in LITERAL_CODES:
sre_compile.py(49):         elif op is IN:
sre_compile.py(50):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(55):                 emit(OPCODES[op])
sre_compile.py(56):                 fixup = _identityfunction
sre_compile.py(57):             skip = _len(code); emit(0)
sre_compile.py(58):             _compile_charset(av, flags, code, fixup)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(181):     emit = code.append
sre_compile.py(182):     if fixup is None:
sre_compile.py(184):     for op, av in _optimize_charset(charset, fixup):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(210):     out = []
sre_compile.py(211):     outappend = out.append
sre_compile.py(212):     charmap = [0]*256
sre_compile.py(213):     try:
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(229):     i = p = n = 0
sre_compile.py(230):     runs = []
sre_compile.py(231):     runsappend = runs.append
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(235):                 p = i
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(238):             runsappend((p, n))
sre_compile.py(239):             n = 0
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(235):                 p = i
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(238):             runsappend((p, n))
sre_compile.py(239):             n = 0
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(235):                 p = i
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(238):             runsappend((p, n))
sre_compile.py(239):             n = 0
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(235):                 p = i
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(238):             runsappend((p, n))
sre_compile.py(239):             n = 0
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(235):                 p = i
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(238):             runsappend((p, n))
sre_compile.py(239):             n = 0
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(235):                 p = i
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(238):             runsappend((p, n))
sre_compile.py(239):             n = 0
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(235):                 p = i
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(238):             runsappend((p, n))
sre_compile.py(239):             n = 0
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(235):                 p = i
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(238):             runsappend((p, n))
sre_compile.py(239):             n = 0
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(235):                 p = i
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(238):             runsappend((p, n))
sre_compile.py(239):             n = 0
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(241):     if n:
sre_compile.py(243):     if len(runs) <= 2:
sre_compile.py(254):         data = _mk_bitmap(charmap)
 --- modulename: sre_compile, funcname: _mk_bitmap
sre_compile.py(260):     data = []
sre_compile.py(261):     dataappend = data.append
sre_compile.py(262):     if _sre.CODESIZE == 2:
sre_compile.py(265):         start = (1L, 0L)
sre_compile.py(266):     m, v = start
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(272):             dataappend(v)
sre_compile.py(273):             m, v = start
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(269):             v = v + m
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(272):             dataappend(v)
sre_compile.py(273):             m, v = start
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(269):             v = v + m
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(269):             v = v + m
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(269):             v = v + m
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(269):             v = v + m
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(272):             dataappend(v)
sre_compile.py(273):             m, v = start
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(269):             v = v + m
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(269):             v = v + m
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(269):             v = v + m
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(269):             v = v + m
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(269):             v = v + m
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(269):             v = v + m
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(269):             v = v + m
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(269):             v = v + m
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(269):             v = v + m
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(269):             v = v + m
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(269):             v = v + m
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(272):             dataappend(v)
sre_compile.py(273):             m, v = start
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(272):             dataappend(v)
sre_compile.py(273):             m, v = start
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(272):             dataappend(v)
sre_compile.py(273):             m, v = start
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(272):             dataappend(v)
sre_compile.py(273):             m, v = start
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(272):             dataappend(v)
sre_compile.py(273):             m, v = start
sre_compile.py(267):     for c in bits:
sre_compile.py(274):     return data
sre_compile.py(255):         outappend((CHARSET, data))
sre_compile.py(256):         return out
sre_compile.py(185):         emit(OPCODES[op])
sre_compile.py(186):         if op is NEGATE:
sre_compile.py(188):         elif op is LITERAL:
sre_compile.py(190):         elif op is RANGE:
sre_compile.py(193):         elif op is CHARSET:
sre_compile.py(194):             code.extend(av)
sre_compile.py(184):     for op, av in _optimize_charset(charset, fixup):
sre_compile.py(206):     emit(OPCODES[FAILURE])
sre_compile.py(59):             code[skip] = _len(code) - skip
sre_compile.py(41):     for op, av in pattern:
sre_compile.py(492):     code.append(OPCODES[SUCCESS])
sre_compile.py(494):     return code
sre_compile.py(510):     if p.pattern.groups > 100:
sre_compile.py(516):     groupindex = p.pattern.groupdict
sre_compile.py(517):     indexgroup = [None] * p.pattern.groups
sre_compile.py(518):     for k, i in groupindex.items():
sre_compile.py(519):         indexgroup[i] = k
sre_compile.py(518):     for k, i in groupindex.items():
sre_compile.py(519):         indexgroup[i] = k
sre_compile.py(518):     for k, i in groupindex.items():
sre_compile.py(521):     return _sre.compile(
sre_compile.py(522):         pattern, flags | p.pattern.flags, code,
sre_compile.py(523):         p.pattern.groups-1,
sre_compile.py(524):         groupindex, indexgroup
re.py(243):     if len(_cache) >= _MAXCACHE:
re.py(245):     _cache[cachekey] = p
re.py(246):     return p
locale.py(185): def format(percent, value, grouping=False, monetary=False, *additional):
locale.py(198): def _format(percent, value, grouping=False, monetary=False, *additional):
locale.py(222): def format_string(f, val, grouping=False):
locale.py(256): def currency(val, symbol=True, grouping=False, international=False):
locale.py(301): def str(val):
locale.py(305): def atof(string, func=float):
locale.py(318): def atoi(str):
locale.py(322): def _test():
locale.py(338): _setlocale = setlocale
locale.py(342): _ascii_lower_map = ''.join(
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
locale.py(344):     for x in range(256)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
 --- modulename: locale, funcname: <genexpr>
locale.py(343):     chr(x + 32 if x >= ord('A') and x <= ord('Z') else x)
locale.py(347): def normalize(localename):
locale.py(415): def _parse_localename(localename):
locale.py(445): def _build_localename(localetuple):
locale.py(461): def getdefaultlocale(envvars=('LC_ALL', 'LC_CTYPE', 'LANG', 'LANGUAGE')):
locale.py(514): def getlocale(category=LC_CTYPE):
locale.py(532): def setlocale(category, locale=None):
locale.py(549): def resetlocale(category=LC_ALL):
locale.py(559): if sys.platform.startswith("win"):
locale.py(567):     try:
locale.py(568):         CODESET
locale.py(576):         def getpreferredencoding(do_setlocale = True):
locale.py(607): locale_encoding_alias = {
locale.py(610):     '437':                          'C',
locale.py(611):     'c':                            'C',
locale.py(612):     'en':                           'ISO8859-1',
locale.py(613):     'jis':                          'JIS7',
locale.py(614):     'jis7':                         'JIS7',
locale.py(615):     'ajec':                         'eucJP',
locale.py(618):     'ascii':                        'ISO8859-1',
locale.py(619):     'latin_1':                      'ISO8859-1',
locale.py(620):     'iso8859_1':                    'ISO8859-1',
locale.py(621):     'iso8859_10':                   'ISO8859-10',
locale.py(622):     'iso8859_11':                   'ISO8859-11',
locale.py(623):     'iso8859_13':                   'ISO8859-13',
locale.py(624):     'iso8859_14':                   'ISO8859-14',
locale.py(625):     'iso8859_15':                   'ISO8859-15',
locale.py(626):     'iso8859_16':                   'ISO8859-16',
locale.py(627):     'iso8859_2':                    'ISO8859-2',
locale.py(628):     'iso8859_3':                    'ISO8859-3',
locale.py(629):     'iso8859_4':                    'ISO8859-4',
locale.py(630):     'iso8859_5':                    'ISO8859-5',
locale.py(631):     'iso8859_6':                    'ISO8859-6',
locale.py(632):     'iso8859_7':                    'ISO8859-7',
locale.py(633):     'iso8859_8':                    'ISO8859-8',
locale.py(634):     'iso8859_9':                    'ISO8859-9',
locale.py(635):     'iso2022_jp':                   'JIS7',
locale.py(636):     'shift_jis':                    'SJIS',
locale.py(637):     'tactis':                       'TACTIS',
locale.py(638):     'euc_jp':                       'eucJP',
locale.py(639):     'euc_kr':                       'eucKR',
locale.py(640):     'utf_8':                        'UTF-8',
locale.py(641):     'koi8_r':                       'KOI8-R',
locale.py(642):     'koi8_u':                       'KOI8-U',
locale.py(738): locale_alias = {
locale.py(739):     'a3':                                   'a3_AZ.KOI8-C',
locale.py(740):     'a3_az':                                'a3_AZ.KOI8-C',
locale.py(741):     'a3_az.koi8c':                          'a3_AZ.KOI8-C',
locale.py(742):     'af':                                   'af_ZA.ISO8859-1',
locale.py(743):     'af_za':                                'af_ZA.ISO8859-1',
locale.py(744):     'af_za.iso88591':                       'af_ZA.ISO8859-1',
locale.py(745):     'am':                                   'am_ET.UTF-8',
locale.py(746):     'am_et':                                'am_ET.UTF-8',
locale.py(747):     'american':                             'en_US.ISO8859-1',
locale.py(748):     'american.iso88591':                    'en_US.ISO8859-1',
locale.py(749):     'ar':                                   'ar_AA.ISO8859-6',
locale.py(750):     'ar_aa':                                'ar_AA.ISO8859-6',
locale.py(751):     'ar_aa.iso88596':                       'ar_AA.ISO8859-6',
locale.py(752):     'ar_ae':                                'ar_AE.ISO8859-6',
locale.py(753):     'ar_ae.iso88596':                       'ar_AE.ISO8859-6',
locale.py(754):     'ar_bh':                                'ar_BH.ISO8859-6',
locale.py(755):     'ar_bh.iso88596':                       'ar_BH.ISO8859-6',
locale.py(756):     'ar_dz':                                'ar_DZ.ISO8859-6',
locale.py(757):     'ar_dz.iso88596':                       'ar_DZ.ISO8859-6',
locale.py(758):     'ar_eg':                                'ar_EG.ISO8859-6',
locale.py(759):     'ar_eg.iso88596':                       'ar_EG.ISO8859-6',
locale.py(760):     'ar_iq':                                'ar_IQ.ISO8859-6',
locale.py(761):     'ar_iq.iso88596':                       'ar_IQ.ISO8859-6',
locale.py(762):     'ar_jo':                                'ar_JO.ISO8859-6',
locale.py(763):     'ar_jo.iso88596':                       'ar_JO.ISO8859-6',
locale.py(764):     'ar_kw':                                'ar_KW.ISO8859-6',
locale.py(765):     'ar_kw.iso88596':                       'ar_KW.ISO8859-6',
locale.py(766):     'ar_lb':                                'ar_LB.ISO8859-6',
locale.py(767):     'ar_lb.iso88596':                       'ar_LB.ISO8859-6',
locale.py(768):     'ar_ly':                                'ar_LY.ISO8859-6',
locale.py(769):     'ar_ly.iso88596':                       'ar_LY.ISO8859-6',
locale.py(770):     'ar_ma':                                'ar_MA.ISO8859-6',
locale.py(771):     'ar_ma.iso88596':                       'ar_MA.ISO8859-6',
locale.py(772):     'ar_om':                                'ar_OM.ISO8859-6',
locale.py(773):     'ar_om.iso88596':                       'ar_OM.ISO8859-6',
locale.py(774):     'ar_qa':                                'ar_QA.ISO8859-6',
locale.py(775):     'ar_qa.iso88596':                       'ar_QA.ISO8859-6',
locale.py(776):     'ar_sa':                                'ar_SA.ISO8859-6',
locale.py(777):     'ar_sa.iso88596':                       'ar_SA.ISO8859-6',
locale.py(778):     'ar_sd':                                'ar_SD.ISO8859-6',
locale.py(779):     'ar_sd.iso88596':                       'ar_SD.ISO8859-6',
locale.py(780):     'ar_sy':                                'ar_SY.ISO8859-6',
locale.py(781):     'ar_sy.iso88596':                       'ar_SY.ISO8859-6',
locale.py(782):     'ar_tn':                                'ar_TN.ISO8859-6',
locale.py(783):     'ar_tn.iso88596':                       'ar_TN.ISO8859-6',
locale.py(784):     'ar_ye':                                'ar_YE.ISO8859-6',
locale.py(785):     'ar_ye.iso88596':                       'ar_YE.ISO8859-6',
locale.py(786):     'arabic':                               'ar_AA.ISO8859-6',
locale.py(787):     'arabic.iso88596':                      'ar_AA.ISO8859-6',
locale.py(788):     'as':                                   'as_IN.UTF-8',
locale.py(789):     'az':                                   'az_AZ.ISO8859-9E',
locale.py(790):     'az_az':                                'az_AZ.ISO8859-9E',
locale.py(791):     'az_az.iso88599e':                      'az_AZ.ISO8859-9E',
locale.py(792):     'be':                                   'be_BY.CP1251',
locale.py(793):     'be@latin':                             'be_BY.UTF-8@latin',
locale.py(794):     'be_by':                                'be_BY.CP1251',
locale.py(795):     'be_by.cp1251':                         'be_BY.CP1251',
locale.py(796):     'be_by.microsoftcp1251':                'be_BY.CP1251',
locale.py(797):     'be_by.utf8@latin':                     'be_BY.UTF-8@latin',
locale.py(798):     'be_by@latin':                          'be_BY.UTF-8@latin',
locale.py(799):     'bg':                                   'bg_BG.CP1251',
locale.py(800):     'bg_bg':                                'bg_BG.CP1251',
locale.py(801):     'bg_bg.cp1251':                         'bg_BG.CP1251',
locale.py(802):     'bg_bg.iso88595':                       'bg_BG.ISO8859-5',
locale.py(803):     'bg_bg.koi8r':                          'bg_BG.KOI8-R',
locale.py(804):     'bg_bg.microsoftcp1251':                'bg_BG.CP1251',
locale.py(805):     'bn_in':                                'bn_IN.UTF-8',
locale.py(806):     'bokmal':                               'nb_NO.ISO8859-1',
locale.py(807):     'bokm\xe5l':                            'nb_NO.ISO8859-1',
locale.py(808):     'br':                                   'br_FR.ISO8859-1',
locale.py(809):     'br_fr':                                'br_FR.ISO8859-1',
locale.py(810):     'br_fr.iso88591':                       'br_FR.ISO8859-1',
locale.py(811):     'br_fr.iso885914':                      'br_FR.ISO8859-14',
locale.py(812):     'br_fr.iso885915':                      'br_FR.ISO8859-15',
locale.py(813):     'br_fr.iso885915@euro':                 'br_FR.ISO8859-15',
locale.py(814):     'br_fr.utf8@euro':                      'br_FR.UTF-8',
locale.py(815):     'br_fr@euro':                           'br_FR.ISO8859-15',
locale.py(816):     'bs':                                   'bs_BA.ISO8859-2',
locale.py(817):     'bs_ba':                                'bs_BA.ISO8859-2',
locale.py(818):     'bs_ba.iso88592':                       'bs_BA.ISO8859-2',
locale.py(819):     'bulgarian':                            'bg_BG.CP1251',
locale.py(820):     'c':                                    'C',
locale.py(821):     'c-french':                             'fr_CA.ISO8859-1',
locale.py(822):     'c-french.iso88591':                    'fr_CA.ISO8859-1',
locale.py(823):     'c.en':                                 'C',
locale.py(824):     'c.iso88591':                           'en_US.ISO8859-1',
locale.py(825):     'c_c':                                  'C',
locale.py(826):     'c_c.c':                                'C',
locale.py(827):     'ca':                                   'ca_ES.ISO8859-1',
locale.py(828):     'ca_ad':                                'ca_AD.ISO8859-1',
locale.py(829):     'ca_ad.iso88591':                       'ca_AD.ISO8859-1',
locale.py(830):     'ca_ad.iso885915':                      'ca_AD.ISO8859-15',
locale.py(831):     'ca_ad.iso885915@euro':                 'ca_AD.ISO8859-15',
locale.py(832):     'ca_ad.utf8@euro':                      'ca_AD.UTF-8',
locale.py(833):     'ca_ad@euro':                           'ca_AD.ISO8859-15',
locale.py(834):     'ca_es':                                'ca_ES.ISO8859-1',
locale.py(835):     'ca_es.iso88591':                       'ca_ES.ISO8859-1',
locale.py(836):     'ca_es.iso885915':                      'ca_ES.ISO8859-15',
locale.py(837):     'ca_es.iso885915@euro':                 'ca_ES.ISO8859-15',
locale.py(838):     'ca_es.utf8@euro':                      'ca_ES.UTF-8',
locale.py(839):     'ca_es@euro':                           'ca_ES.ISO8859-15',
locale.py(840):     'ca_fr':                                'ca_FR.ISO8859-1',
locale.py(841):     'ca_fr.iso88591':                       'ca_FR.ISO8859-1',
locale.py(842):     'ca_fr.iso885915':                      'ca_FR.ISO8859-15',
locale.py(843):     'ca_fr.iso885915@euro':                 'ca_FR.ISO8859-15',
locale.py(844):     'ca_fr.utf8@euro':                      'ca_FR.UTF-8',
locale.py(845):     'ca_fr@euro':                           'ca_FR.ISO8859-15',
locale.py(846):     'ca_it':                                'ca_IT.ISO8859-1',
locale.py(847):     'ca_it.iso88591':                       'ca_IT.ISO8859-1',
locale.py(848):     'ca_it.iso885915':                      'ca_IT.ISO8859-15',
locale.py(849):     'ca_it.iso885915@euro':                 'ca_IT.ISO8859-15',
locale.py(850):     'ca_it.utf8@euro':                      'ca_IT.UTF-8',
locale.py(851):     'ca_it@euro':                           'ca_IT.ISO8859-15',
locale.py(852):     'catalan':                              'ca_ES.ISO8859-1',
locale.py(853):     'cextend':                              'en_US.ISO8859-1',
locale.py(854):     'cextend.en':                           'en_US.ISO8859-1',
locale.py(855):     'chinese-s':                            'zh_CN.eucCN',
locale.py(856):     'chinese-t':                            'zh_TW.eucTW',
locale.py(857):     'croatian':                             'hr_HR.ISO8859-2',
locale.py(858):     'cs':                                   'cs_CZ.ISO8859-2',
locale.py(859):     'cs_cs':                                'cs_CZ.ISO8859-2',
locale.py(860):     'cs_cs.iso88592':                       'cs_CS.ISO8859-2',
locale.py(861):     'cs_cz':                                'cs_CZ.ISO8859-2',
locale.py(862):     'cs_cz.iso88592':                       'cs_CZ.ISO8859-2',
locale.py(863):     'cy':                                   'cy_GB.ISO8859-1',
locale.py(864):     'cy_gb':                                'cy_GB.ISO8859-1',
locale.py(865):     'cy_gb.iso88591':                       'cy_GB.ISO8859-1',
locale.py(866):     'cy_gb.iso885914':                      'cy_GB.ISO8859-14',
locale.py(867):     'cy_gb.iso885915':                      'cy_GB.ISO8859-15',
locale.py(868):     'cy_gb@euro':                           'cy_GB.ISO8859-15',
locale.py(869):     'cz':                                   'cs_CZ.ISO8859-2',
locale.py(870):     'cz_cz':                                'cs_CZ.ISO8859-2',
locale.py(871):     'czech':                                'cs_CZ.ISO8859-2',
locale.py(872):     'da':                                   'da_DK.ISO8859-1',
locale.py(873):     'da.iso885915':                         'da_DK.ISO8859-15',
locale.py(874):     'da_dk':                                'da_DK.ISO8859-1',
locale.py(875):     'da_dk.88591':                          'da_DK.ISO8859-1',
locale.py(876):     'da_dk.885915':                         'da_DK.ISO8859-15',
locale.py(877):     'da_dk.iso88591':                       'da_DK.ISO8859-1',
locale.py(878):     'da_dk.iso885915':                      'da_DK.ISO8859-15',
locale.py(879):     'da_dk@euro':                           'da_DK.ISO8859-15',
locale.py(880):     'danish':                               'da_DK.ISO8859-1',
locale.py(881):     'danish.iso88591':                      'da_DK.ISO8859-1',
locale.py(882):     'dansk':                                'da_DK.ISO8859-1',
locale.py(883):     'de':                                   'de_DE.ISO8859-1',
locale.py(884):     'de.iso885915':                         'de_DE.ISO8859-15',
locale.py(885):     'de_at':                                'de_AT.ISO8859-1',
locale.py(886):     'de_at.iso88591':                       'de_AT.ISO8859-1',
locale.py(887):     'de_at.iso885915':                      'de_AT.ISO8859-15',
locale.py(888):     'de_at.iso885915@euro':                 'de_AT.ISO8859-15',
locale.py(889):     'de_at.utf8@euro':                      'de_AT.UTF-8',
locale.py(890):     'de_at@euro':                           'de_AT.ISO8859-15',
locale.py(891):     'de_be':                                'de_BE.ISO8859-1',
locale.py(892):     'de_be.iso88591':                       'de_BE.ISO8859-1',
locale.py(893):     'de_be.iso885915':                      'de_BE.ISO8859-15',
locale.py(894):     'de_be.iso885915@euro':                 'de_BE.ISO8859-15',
locale.py(895):     'de_be.utf8@euro':                      'de_BE.UTF-8',
locale.py(896):     'de_be@euro':                           'de_BE.ISO8859-15',
locale.py(897):     'de_ch':                                'de_CH.ISO8859-1',
locale.py(898):     'de_ch.iso88591':                       'de_CH.ISO8859-1',
locale.py(899):     'de_ch.iso885915':                      'de_CH.ISO8859-15',
locale.py(900):     'de_ch@euro':                           'de_CH.ISO8859-15',
locale.py(901):     'de_de':                                'de_DE.ISO8859-1',
locale.py(902):     'de_de.88591':                          'de_DE.ISO8859-1',
locale.py(903):     'de_de.885915':                         'de_DE.ISO8859-15',
locale.py(904):     'de_de.885915@euro':                    'de_DE.ISO8859-15',
locale.py(905):     'de_de.iso88591':                       'de_DE.ISO8859-1',
locale.py(906):     'de_de.iso885915':                      'de_DE.ISO8859-15',
locale.py(907):     'de_de.iso885915@euro':                 'de_DE.ISO8859-15',
locale.py(908):     'de_de.utf8@euro':                      'de_DE.UTF-8',
locale.py(909):     'de_de@euro':                           'de_DE.ISO8859-15',
locale.py(910):     'de_lu':                                'de_LU.ISO8859-1',
locale.py(911):     'de_lu.iso88591':                       'de_LU.ISO8859-1',
locale.py(912):     'de_lu.iso885915':                      'de_LU.ISO8859-15',
locale.py(913):     'de_lu.iso885915@euro':                 'de_LU.ISO8859-15',
locale.py(914):     'de_lu.utf8@euro':                      'de_LU.UTF-8',
locale.py(915):     'de_lu@euro':                           'de_LU.ISO8859-15',
locale.py(916):     'deutsch':                              'de_DE.ISO8859-1',
locale.py(917):     'dutch':                                'nl_NL.ISO8859-1',
locale.py(918):     'dutch.iso88591':                       'nl_BE.ISO8859-1',
locale.py(919):     'ee':                                   'ee_EE.ISO8859-4',
locale.py(920):     'ee_ee':                                'ee_EE.ISO8859-4',
locale.py(921):     'ee_ee.iso88594':                       'ee_EE.ISO8859-4',
locale.py(922):     'eesti':                                'et_EE.ISO8859-1',
locale.py(923):     'el':                                   'el_GR.ISO8859-7',
locale.py(924):     'el_gr':                                'el_GR.ISO8859-7',
locale.py(925):     'el_gr.iso88597':                       'el_GR.ISO8859-7',
locale.py(926):     'el_gr@euro':                           'el_GR.ISO8859-15',
locale.py(927):     'en':                                   'en_US.ISO8859-1',
locale.py(928):     'en.iso88591':                          'en_US.ISO8859-1',
locale.py(929):     'en_au':                                'en_AU.ISO8859-1',
locale.py(930):     'en_au.iso88591':                       'en_AU.ISO8859-1',
locale.py(931):     'en_be':                                'en_BE.ISO8859-1',
locale.py(932):     'en_be@euro':                           'en_BE.ISO8859-15',
locale.py(933):     'en_bw':                                'en_BW.ISO8859-1',
locale.py(934):     'en_bw.iso88591':                       'en_BW.ISO8859-1',
locale.py(935):     'en_ca':                                'en_CA.ISO8859-1',
locale.py(936):     'en_ca.iso88591':                       'en_CA.ISO8859-1',
locale.py(937):     'en_gb':                                'en_GB.ISO8859-1',
locale.py(938):     'en_gb.88591':                          'en_GB.ISO8859-1',
locale.py(939):     'en_gb.iso88591':                       'en_GB.ISO8859-1',
locale.py(940):     'en_gb.iso885915':                      'en_GB.ISO8859-15',
locale.py(941):     'en_gb@euro':                           'en_GB.ISO8859-15',
locale.py(942):     'en_hk':                                'en_HK.ISO8859-1',
locale.py(943):     'en_hk.iso88591':                       'en_HK.ISO8859-1',
locale.py(944):     'en_ie':                                'en_IE.ISO8859-1',
locale.py(945):     'en_ie.iso88591':                       'en_IE.ISO8859-1',
locale.py(946):     'en_ie.iso885915':                      'en_IE.ISO8859-15',
locale.py(947):     'en_ie.iso885915@euro':                 'en_IE.ISO8859-15',
locale.py(948):     'en_ie.utf8@euro':                      'en_IE.UTF-8',
locale.py(949):     'en_ie@euro':                           'en_IE.ISO8859-15',
locale.py(950):     'en_in':                                'en_IN.ISO8859-1',
locale.py(951):     'en_nz':                                'en_NZ.ISO8859-1',
locale.py(952):     'en_nz.iso88591':                       'en_NZ.ISO8859-1',
locale.py(953):     'en_ph':                                'en_PH.ISO8859-1',
locale.py(954):     'en_ph.iso88591':                       'en_PH.ISO8859-1',
locale.py(955):     'en_sg':                                'en_SG.ISO8859-1',
locale.py(956):     'en_sg.iso88591':                       'en_SG.ISO8859-1',
locale.py(957):     'en_uk':                                'en_GB.ISO8859-1',
locale.py(958):     'en_us':                                'en_US.ISO8859-1',
locale.py(959):     'en_us.88591':                          'en_US.ISO8859-1',
locale.py(960):     'en_us.885915':                         'en_US.ISO8859-15',
locale.py(961):     'en_us.iso88591':                       'en_US.ISO8859-1',
locale.py(962):     'en_us.iso885915':                      'en_US.ISO8859-15',
locale.py(963):     'en_us.iso885915@euro':                 'en_US.ISO8859-15',
locale.py(964):     'en_us@euro':                           'en_US.ISO8859-15',
locale.py(965):     'en_us@euro@euro':                      'en_US.ISO8859-15',
locale.py(966):     'en_za':                                'en_ZA.ISO8859-1',
locale.py(967):     'en_za.88591':                          'en_ZA.ISO8859-1',
locale.py(968):     'en_za.iso88591':                       'en_ZA.ISO8859-1',
locale.py(969):     'en_za.iso885915':                      'en_ZA.ISO8859-15',
locale.py(970):     'en_za@euro':                           'en_ZA.ISO8859-15',
locale.py(971):     'en_zw':                                'en_ZW.ISO8859-1',
locale.py(972):     'en_zw.iso88591':                       'en_ZW.ISO8859-1',
locale.py(973):     'eng_gb':                               'en_GB.ISO8859-1',
locale.py(974):     'eng_gb.8859':                          'en_GB.ISO8859-1',
locale.py(975):     'english':                              'en_EN.ISO8859-1',
locale.py(976):     'english.iso88591':                     'en_EN.ISO8859-1',
locale.py(977):     'english_uk':                           'en_GB.ISO8859-1',
locale.py(978):     'english_uk.8859':                      'en_GB.ISO8859-1',
locale.py(979):     'english_united-states':                'en_US.ISO8859-1',
locale.py(980):     'english_united-states.437':            'C',
locale.py(981):     'english_us':                           'en_US.ISO8859-1',
locale.py(982):     'english_us.8859':                      'en_US.ISO8859-1',
locale.py(983):     'english_us.ascii':                     'en_US.ISO8859-1',
locale.py(984):     'eo':                                   'eo_XX.ISO8859-3',
locale.py(985):     'eo_eo':                                'eo_EO.ISO8859-3',
locale.py(986):     'eo_eo.iso88593':                       'eo_EO.ISO8859-3',
locale.py(987):     'eo_xx':                                'eo_XX.ISO8859-3',
locale.py(988):     'eo_xx.iso88593':                       'eo_XX.ISO8859-3',
locale.py(989):     'es':                                   'es_ES.ISO8859-1',
locale.py(990):     'es_ar':                                'es_AR.ISO8859-1',
locale.py(991):     'es_ar.iso88591':                       'es_AR.ISO8859-1',
locale.py(992):     'es_bo':                                'es_BO.ISO8859-1',
locale.py(993):     'es_bo.iso88591':                       'es_BO.ISO8859-1',
locale.py(994):     'es_cl':                                'es_CL.ISO8859-1',
locale.py(995):     'es_cl.iso88591':                       'es_CL.ISO8859-1',
locale.py(996):     'es_co':                                'es_CO.ISO8859-1',
locale.py(997):     'es_co.iso88591':                       'es_CO.ISO8859-1',
locale.py(998):     'es_cr':                                'es_CR.ISO8859-1',
locale.py(999):     'es_cr.iso88591':                       'es_CR.ISO8859-1',
locale.py(1000):     'es_do':                                'es_DO.ISO8859-1',
locale.py(1001):     'es_do.iso88591':                       'es_DO.ISO8859-1',
locale.py(1002):     'es_ec':                                'es_EC.ISO8859-1',
locale.py(1003):     'es_ec.iso88591':                       'es_EC.ISO8859-1',
locale.py(1004):     'es_es':                                'es_ES.ISO8859-1',
locale.py(1005):     'es_es.88591':                          'es_ES.ISO8859-1',
locale.py(1006):     'es_es.iso88591':                       'es_ES.ISO8859-1',
locale.py(1007):     'es_es.iso885915':                      'es_ES.ISO8859-15',
locale.py(1008):     'es_es.iso885915@euro':                 'es_ES.ISO8859-15',
locale.py(1009):     'es_es.utf8@euro':                      'es_ES.UTF-8',
locale.py(1010):     'es_es@euro':                           'es_ES.ISO8859-15',
locale.py(1011):     'es_gt':                                'es_GT.ISO8859-1',
locale.py(1012):     'es_gt.iso88591':                       'es_GT.ISO8859-1',
locale.py(1013):     'es_hn':                                'es_HN.ISO8859-1',
locale.py(1014):     'es_hn.iso88591':                       'es_HN.ISO8859-1',
locale.py(1015):     'es_mx':                                'es_MX.ISO8859-1',
locale.py(1016):     'es_mx.iso88591':                       'es_MX.ISO8859-1',
locale.py(1017):     'es_ni':                                'es_NI.ISO8859-1',
locale.py(1018):     'es_ni.iso88591':                       'es_NI.ISO8859-1',
locale.py(1019):     'es_pa':                                'es_PA.ISO8859-1',
locale.py(1020):     'es_pa.iso88591':                       'es_PA.ISO8859-1',
locale.py(1021):     'es_pa.iso885915':                      'es_PA.ISO8859-15',
locale.py(1022):     'es_pa@euro':                           'es_PA.ISO8859-15',
locale.py(1023):     'es_pe':                                'es_PE.ISO8859-1',
locale.py(1024):     'es_pe.iso88591':                       'es_PE.ISO8859-1',
locale.py(1025):     'es_pe.iso885915':                      'es_PE.ISO8859-15',
locale.py(1026):     'es_pe@euro':                           'es_PE.ISO8859-15',
locale.py(1027):     'es_pr':                                'es_PR.ISO8859-1',
locale.py(1028):     'es_pr.iso88591':                       'es_PR.ISO8859-1',
locale.py(1029):     'es_py':                                'es_PY.ISO8859-1',
locale.py(1030):     'es_py.iso88591':                       'es_PY.ISO8859-1',
locale.py(1031):     'es_py.iso885915':                      'es_PY.ISO8859-15',
locale.py(1032):     'es_py@euro':                           'es_PY.ISO8859-15',
locale.py(1033):     'es_sv':                                'es_SV.ISO8859-1',
locale.py(1034):     'es_sv.iso88591':                       'es_SV.ISO8859-1',
locale.py(1035):     'es_sv.iso885915':                      'es_SV.ISO8859-15',
locale.py(1036):     'es_sv@euro':                           'es_SV.ISO8859-15',
locale.py(1037):     'es_us':                                'es_US.ISO8859-1',
locale.py(1038):     'es_us.iso88591':                       'es_US.ISO8859-1',
locale.py(1039):     'es_uy':                                'es_UY.ISO8859-1',
locale.py(1040):     'es_uy.iso88591':                       'es_UY.ISO8859-1',
locale.py(1041):     'es_uy.iso885915':                      'es_UY.ISO8859-15',
locale.py(1042):     'es_uy@euro':                           'es_UY.ISO8859-15',
locale.py(1043):     'es_ve':                                'es_VE.ISO8859-1',
locale.py(1044):     'es_ve.iso88591':                       'es_VE.ISO8859-1',
locale.py(1045):     'es_ve.iso885915':                      'es_VE.ISO8859-15',
locale.py(1046):     'es_ve@euro':                           'es_VE.ISO8859-15',
locale.py(1047):     'estonian':                             'et_EE.ISO8859-1',
locale.py(1048):     'et':                                   'et_EE.ISO8859-15',
locale.py(1049):     'et_ee':                                'et_EE.ISO8859-15',
locale.py(1050):     'et_ee.iso88591':                       'et_EE.ISO8859-1',
locale.py(1051):     'et_ee.iso885913':                      'et_EE.ISO8859-13',
locale.py(1052):     'et_ee.iso885915':                      'et_EE.ISO8859-15',
locale.py(1053):     'et_ee.iso88594':                       'et_EE.ISO8859-4',
locale.py(1054):     'et_ee@euro':                           'et_EE.ISO8859-15',
locale.py(1055):     'eu':                                   'eu_ES.ISO8859-1',
locale.py(1056):     'eu_es':                                'eu_ES.ISO8859-1',
locale.py(1057):     'eu_es.iso88591':                       'eu_ES.ISO8859-1',
locale.py(1058):     'eu_es.iso885915':                      'eu_ES.ISO8859-15',
locale.py(1059):     'eu_es.iso885915@euro':                 'eu_ES.ISO8859-15',
locale.py(1060):     'eu_es.utf8@euro':                      'eu_ES.UTF-8',
locale.py(1061):     'eu_es@euro':                           'eu_ES.ISO8859-15',
locale.py(1062):     'fa':                                   'fa_IR.UTF-8',
locale.py(1063):     'fa_ir':                                'fa_IR.UTF-8',
locale.py(1064):     'fa_ir.isiri3342':                      'fa_IR.ISIRI-3342',
locale.py(1065):     'fi':                                   'fi_FI.ISO8859-15',
locale.py(1066):     'fi.iso885915':                         'fi_FI.ISO8859-15',
locale.py(1067):     'fi_fi':                                'fi_FI.ISO8859-15',
locale.py(1068):     'fi_fi.88591':                          'fi_FI.ISO8859-1',
locale.py(1069):     'fi_fi.iso88591':                       'fi_FI.ISO8859-1',
locale.py(1070):     'fi_fi.iso885915':                      'fi_FI.ISO8859-15',
locale.py(1071):     'fi_fi.iso885915@euro':                 'fi_FI.ISO8859-15',
locale.py(1072):     'fi_fi.utf8@euro':                      'fi_FI.UTF-8',
locale.py(1073):     'fi_fi@euro':                           'fi_FI.ISO8859-15',
locale.py(1074):     'finnish':                              'fi_FI.ISO8859-1',
locale.py(1075):     'finnish.iso88591':                     'fi_FI.ISO8859-1',
locale.py(1076):     'fo':                                   'fo_FO.ISO8859-1',
locale.py(1077):     'fo_fo':                                'fo_FO.ISO8859-1',
locale.py(1078):     'fo_fo.iso88591':                       'fo_FO.ISO8859-1',
locale.py(1079):     'fo_fo.iso885915':                      'fo_FO.ISO8859-15',
locale.py(1080):     'fo_fo@euro':                           'fo_FO.ISO8859-15',
locale.py(1081):     'fr':                                   'fr_FR.ISO8859-1',
locale.py(1082):     'fr.iso885915':                         'fr_FR.ISO8859-15',
locale.py(1083):     'fr_be':                                'fr_BE.ISO8859-1',
locale.py(1084):     'fr_be.88591':                          'fr_BE.ISO8859-1',
locale.py(1085):     'fr_be.iso88591':                       'fr_BE.ISO8859-1',
locale.py(1086):     'fr_be.iso885915':                      'fr_BE.ISO8859-15',
locale.py(1087):     'fr_be.iso885915@euro':                 'fr_BE.ISO8859-15',
locale.py(1088):     'fr_be.utf8@euro':                      'fr_BE.UTF-8',
locale.py(1089):     'fr_be@euro':                           'fr_BE.ISO8859-15',
locale.py(1090):     'fr_ca':                                'fr_CA.ISO8859-1',
locale.py(1091):     'fr_ca.88591':                          'fr_CA.ISO8859-1',
locale.py(1092):     'fr_ca.iso88591':                       'fr_CA.ISO8859-1',
locale.py(1093):     'fr_ca.iso885915':                      'fr_CA.ISO8859-15',
locale.py(1094):     'fr_ca@euro':                           'fr_CA.ISO8859-15',
locale.py(1095):     'fr_ch':                                'fr_CH.ISO8859-1',
locale.py(1096):     'fr_ch.88591':                          'fr_CH.ISO8859-1',
locale.py(1097):     'fr_ch.iso88591':                       'fr_CH.ISO8859-1',
locale.py(1098):     'fr_ch.iso885915':                      'fr_CH.ISO8859-15',
locale.py(1099):     'fr_ch@euro':                           'fr_CH.ISO8859-15',
locale.py(1100):     'fr_fr':                                'fr_FR.ISO8859-1',
locale.py(1101):     'fr_fr.88591':                          'fr_FR.ISO8859-1',
locale.py(1102):     'fr_fr.iso88591':                       'fr_FR.ISO8859-1',
locale.py(1103):     'fr_fr.iso885915':                      'fr_FR.ISO8859-15',
locale.py(1104):     'fr_fr.iso885915@euro':                 'fr_FR.ISO8859-15',
locale.py(1105):     'fr_fr.utf8@euro':                      'fr_FR.UTF-8',
locale.py(1106):     'fr_fr@euro':                           'fr_FR.ISO8859-15',
locale.py(1107):     'fr_lu':                                'fr_LU.ISO8859-1',
locale.py(1108):     'fr_lu.88591':                          'fr_LU.ISO8859-1',
locale.py(1109):     'fr_lu.iso88591':                       'fr_LU.ISO8859-1',
locale.py(1110):     'fr_lu.iso885915':                      'fr_LU.ISO8859-15',
locale.py(1111):     'fr_lu.iso885915@euro':                 'fr_LU.ISO8859-15',
locale.py(1112):     'fr_lu.utf8@euro':                      'fr_LU.UTF-8',
locale.py(1113):     'fr_lu@euro':                           'fr_LU.ISO8859-15',
locale.py(1114):     'fran\xe7ais':                          'fr_FR.ISO8859-1',
locale.py(1115):     'fre_fr':                               'fr_FR.ISO8859-1',
locale.py(1116):     'fre_fr.8859':                          'fr_FR.ISO8859-1',
locale.py(1117):     'french':                               'fr_FR.ISO8859-1',
locale.py(1118):     'french.iso88591':                      'fr_CH.ISO8859-1',
locale.py(1119):     'french_france':                        'fr_FR.ISO8859-1',
locale.py(1120):     'french_france.8859':                   'fr_FR.ISO8859-1',
locale.py(1121):     'ga':                                   'ga_IE.ISO8859-1',
locale.py(1122):     'ga_ie':                                'ga_IE.ISO8859-1',
locale.py(1123):     'ga_ie.iso88591':                       'ga_IE.ISO8859-1',
locale.py(1124):     'ga_ie.iso885914':                      'ga_IE.ISO8859-14',
locale.py(1125):     'ga_ie.iso885915':                      'ga_IE.ISO8859-15',
locale.py(1126):     'ga_ie.iso885915@euro':                 'ga_IE.ISO8859-15',
locale.py(1127):     'ga_ie.utf8@euro':                      'ga_IE.UTF-8',
locale.py(1128):     'ga_ie@euro':                           'ga_IE.ISO8859-15',
locale.py(1129):     'galego':                               'gl_ES.ISO8859-1',
locale.py(1130):     'galician':                             'gl_ES.ISO8859-1',
locale.py(1131):     'gd':                                   'gd_GB.ISO8859-1',
locale.py(1132):     'gd_gb':                                'gd_GB.ISO8859-1',
locale.py(1133):     'gd_gb.iso88591':                       'gd_GB.ISO8859-1',
locale.py(1134):     'gd_gb.iso885914':                      'gd_GB.ISO8859-14',
locale.py(1135):     'gd_gb.iso885915':                      'gd_GB.ISO8859-15',
locale.py(1136):     'gd_gb@euro':                           'gd_GB.ISO8859-15',
locale.py(1137):     'ger_de':                               'de_DE.ISO8859-1',
locale.py(1138):     'ger_de.8859':                          'de_DE.ISO8859-1',
locale.py(1139):     'german':                               'de_DE.ISO8859-1',
locale.py(1140):     'german.iso88591':                      'de_CH.ISO8859-1',
locale.py(1141):     'german_germany':                       'de_DE.ISO8859-1',
locale.py(1142):     'german_germany.8859':                  'de_DE.ISO8859-1',
locale.py(1143):     'gl':                                   'gl_ES.ISO8859-1',
locale.py(1144):     'gl_es':                                'gl_ES.ISO8859-1',
locale.py(1145):     'gl_es.iso88591':                       'gl_ES.ISO8859-1',
locale.py(1146):     'gl_es.iso885915':                      'gl_ES.ISO8859-15',
locale.py(1147):     'gl_es.iso885915@euro':                 'gl_ES.ISO8859-15',
locale.py(1148):     'gl_es.utf8@euro':                      'gl_ES.UTF-8',
locale.py(1149):     'gl_es@euro':                           'gl_ES.ISO8859-15',
locale.py(1150):     'greek':                                'el_GR.ISO8859-7',
locale.py(1151):     'greek.iso88597':                       'el_GR.ISO8859-7',
locale.py(1152):     'gu_in':                                'gu_IN.UTF-8',
locale.py(1153):     'gv':                                   'gv_GB.ISO8859-1',
locale.py(1154):     'gv_gb':                                'gv_GB.ISO8859-1',
locale.py(1155):     'gv_gb.iso88591':                       'gv_GB.ISO8859-1',
locale.py(1156):     'gv_gb.iso885914':                      'gv_GB.ISO8859-14',
locale.py(1157):     'gv_gb.iso885915':                      'gv_GB.ISO8859-15',
locale.py(1158):     'gv_gb@euro':                           'gv_GB.ISO8859-15',
locale.py(1159):     'he':                                   'he_IL.ISO8859-8',
locale.py(1160):     'he_il':                                'he_IL.ISO8859-8',
locale.py(1161):     'he_il.cp1255':                         'he_IL.CP1255',
locale.py(1162):     'he_il.iso88598':                       'he_IL.ISO8859-8',
locale.py(1163):     'he_il.microsoftcp1255':                'he_IL.CP1255',
locale.py(1164):     'hebrew':                               'iw_IL.ISO8859-8',
locale.py(1165):     'hebrew.iso88598':                      'iw_IL.ISO8859-8',
locale.py(1166):     'hi':                                   'hi_IN.ISCII-DEV',
locale.py(1167):     'hi_in':                                'hi_IN.ISCII-DEV',
locale.py(1168):     'hi_in.isciidev':                       'hi_IN.ISCII-DEV',
locale.py(1169):     'hne':                                  'hne_IN.UTF-8',
locale.py(1170):     'hr':                                   'hr_HR.ISO8859-2',
locale.py(1171):     'hr_hr':                                'hr_HR.ISO8859-2',
locale.py(1172):     'hr_hr.iso88592':                       'hr_HR.ISO8859-2',
locale.py(1173):     'hrvatski':                             'hr_HR.ISO8859-2',
locale.py(1174):     'hu':                                   'hu_HU.ISO8859-2',
locale.py(1175):     'hu_hu':                                'hu_HU.ISO8859-2',
locale.py(1176):     'hu_hu.iso88592':                       'hu_HU.ISO8859-2',
locale.py(1177):     'hungarian':                            'hu_HU.ISO8859-2',
locale.py(1178):     'icelandic':                            'is_IS.ISO8859-1',
locale.py(1179):     'icelandic.iso88591':                   'is_IS.ISO8859-1',
locale.py(1180):     'id':                                   'id_ID.ISO8859-1',
locale.py(1181):     'id_id':                                'id_ID.ISO8859-1',
locale.py(1182):     'in':                                   'id_ID.ISO8859-1',
locale.py(1183):     'in_id':                                'id_ID.ISO8859-1',
locale.py(1184):     'is':                                   'is_IS.ISO8859-1',
locale.py(1185):     'is_is':                                'is_IS.ISO8859-1',
locale.py(1186):     'is_is.iso88591':                       'is_IS.ISO8859-1',
locale.py(1187):     'is_is.iso885915':                      'is_IS.ISO8859-15',
locale.py(1188):     'is_is@euro':                           'is_IS.ISO8859-15',
locale.py(1189):     'iso-8859-1':                           'en_US.ISO8859-1',
locale.py(1190):     'iso-8859-15':                          'en_US.ISO8859-15',
locale.py(1191):     'iso8859-1':                            'en_US.ISO8859-1',
locale.py(1192):     'iso8859-15':                           'en_US.ISO8859-15',
locale.py(1193):     'iso_8859_1':                           'en_US.ISO8859-1',
locale.py(1194):     'iso_8859_15':                          'en_US.ISO8859-15',
locale.py(1195):     'it':                                   'it_IT.ISO8859-1',
locale.py(1196):     'it.iso885915':                         'it_IT.ISO8859-15',
locale.py(1197):     'it_ch':                                'it_CH.ISO8859-1',
locale.py(1198):     'it_ch.iso88591':                       'it_CH.ISO8859-1',
locale.py(1199):     'it_ch.iso885915':                      'it_CH.ISO8859-15',
locale.py(1200):     'it_ch@euro':                           'it_CH.ISO8859-15',
locale.py(1201):     'it_it':                                'it_IT.ISO8859-1',
locale.py(1202):     'it_it.88591':                          'it_IT.ISO8859-1',
locale.py(1203):     'it_it.iso88591':                       'it_IT.ISO8859-1',
locale.py(1204):     'it_it.iso885915':                      'it_IT.ISO8859-15',
locale.py(1205):     'it_it.iso885915@euro':                 'it_IT.ISO8859-15',
locale.py(1206):     'it_it.utf8@euro':                      'it_IT.UTF-8',
locale.py(1207):     'it_it@euro':                           'it_IT.ISO8859-15',
locale.py(1208):     'italian':                              'it_IT.ISO8859-1',
locale.py(1209):     'italian.iso88591':                     'it_IT.ISO8859-1',
locale.py(1210):     'iu':                                   'iu_CA.NUNACOM-8',
locale.py(1211):     'iu_ca':                                'iu_CA.NUNACOM-8',
locale.py(1212):     'iu_ca.nunacom8':                       'iu_CA.NUNACOM-8',
locale.py(1213):     'iw':                                   'he_IL.ISO8859-8',
locale.py(1214):     'iw_il':                                'he_IL.ISO8859-8',
locale.py(1215):     'iw_il.iso88598':                       'he_IL.ISO8859-8',
locale.py(1216):     'ja':                                   'ja_JP.eucJP',
locale.py(1217):     'ja.jis':                               'ja_JP.JIS7',
locale.py(1218):     'ja.sjis':                              'ja_JP.SJIS',
locale.py(1219):     'ja_jp':                                'ja_JP.eucJP',
locale.py(1220):     'ja_jp.ajec':                           'ja_JP.eucJP',
locale.py(1221):     'ja_jp.euc':                            'ja_JP.eucJP',
locale.py(1222):     'ja_jp.eucjp':                          'ja_JP.eucJP',
locale.py(1223):     'ja_jp.iso-2022-jp':                    'ja_JP.JIS7',
locale.py(1224):     'ja_jp.iso2022jp':                      'ja_JP.JIS7',
locale.py(1225):     'ja_jp.jis':                            'ja_JP.JIS7',
locale.py(1226):     'ja_jp.jis7':                           'ja_JP.JIS7',
locale.py(1227):     'ja_jp.mscode':                         'ja_JP.SJIS',
locale.py(1228):     'ja_jp.pck':                            'ja_JP.SJIS',
locale.py(1229):     'ja_jp.sjis':                           'ja_JP.SJIS',
locale.py(1230):     'ja_jp.ujis':                           'ja_JP.eucJP',
locale.py(1231):     'japan':                                'ja_JP.eucJP',
locale.py(1232):     'japanese':                             'ja_JP.eucJP',
locale.py(1233):     'japanese-euc':                         'ja_JP.eucJP',
locale.py(1234):     'japanese.euc':                         'ja_JP.eucJP',
locale.py(1235):     'japanese.sjis':                        'ja_JP.SJIS',
locale.py(1236):     'jp_jp':                                'ja_JP.eucJP',
locale.py(1237):     'ka':                                   'ka_GE.GEORGIAN-ACADEMY',
locale.py(1238):     'ka_ge':                                'ka_GE.GEORGIAN-ACADEMY',
locale.py(1239):     'ka_ge.georgianacademy':                'ka_GE.GEORGIAN-ACADEMY',
locale.py(1240):     'ka_ge.georgianps':                     'ka_GE.GEORGIAN-PS',
locale.py(1241):     'ka_ge.georgianrs':                     'ka_GE.GEORGIAN-ACADEMY',
locale.py(1242):     'kl':                                   'kl_GL.ISO8859-1',
locale.py(1243):     'kl_gl':                                'kl_GL.ISO8859-1',
locale.py(1244):     'kl_gl.iso88591':                       'kl_GL.ISO8859-1',
locale.py(1245):     'kl_gl.iso885915':                      'kl_GL.ISO8859-15',
locale.py(1246):     'kl_gl@euro':                           'kl_GL.ISO8859-15',
locale.py(1247):     'km_kh':                                'km_KH.UTF-8',
locale.py(1248):     'kn':                                   'kn_IN.UTF-8',
locale.py(1249):     'kn_in':                                'kn_IN.UTF-8',
locale.py(1250):     'ko':                                   'ko_KR.eucKR',
locale.py(1251):     'ko_kr':                                'ko_KR.eucKR',
locale.py(1252):     'ko_kr.euc':                            'ko_KR.eucKR',
locale.py(1253):     'ko_kr.euckr':                          'ko_KR.eucKR',
locale.py(1254):     'korean':                               'ko_KR.eucKR',
locale.py(1255):     'korean.euc':                           'ko_KR.eucKR',
locale.py(1256):     'ks':                                   'ks_IN.UTF-8',
locale.py(1257):     'ks_in@devanagari':                     'ks_IN@devanagari.UTF-8',
locale.py(1258):     'kw':                                   'kw_GB.ISO8859-1',
locale.py(1259):     'kw_gb':                                'kw_GB.ISO8859-1',
locale.py(1260):     'kw_gb.iso88591':                       'kw_GB.ISO8859-1',
locale.py(1261):     'kw_gb.iso885914':                      'kw_GB.ISO8859-14',
locale.py(1262):     'kw_gb.iso885915':                      'kw_GB.ISO8859-15',
locale.py(1263):     'kw_gb@euro':                           'kw_GB.ISO8859-15',
locale.py(1264):     'ky':                                   'ky_KG.UTF-8',
locale.py(1265):     'ky_kg':                                'ky_KG.UTF-8',
locale.py(1266):     'lithuanian':                           'lt_LT.ISO8859-13',
locale.py(1267):     'lo':                                   'lo_LA.MULELAO-1',
locale.py(1268):     'lo_la':                                'lo_LA.MULELAO-1',
locale.py(1269):     'lo_la.cp1133':                         'lo_LA.IBM-CP1133',
locale.py(1270):     'lo_la.ibmcp1133':                      'lo_LA.IBM-CP1133',
locale.py(1271):     'lo_la.mulelao1':                       'lo_LA.MULELAO-1',
locale.py(1272):     'lt':                                   'lt_LT.ISO8859-13',
locale.py(1273):     'lt_lt':                                'lt_LT.ISO8859-13',
locale.py(1274):     'lt_lt.iso885913':                      'lt_LT.ISO8859-13',
locale.py(1275):     'lt_lt.iso88594':                       'lt_LT.ISO8859-4',
locale.py(1276):     'lv':                                   'lv_LV.ISO8859-13',
locale.py(1277):     'lv_lv':                                'lv_LV.ISO8859-13',
locale.py(1278):     'lv_lv.iso885913':                      'lv_LV.ISO8859-13',
locale.py(1279):     'lv_lv.iso88594':                       'lv_LV.ISO8859-4',
locale.py(1280):     'mai':                                  'mai_IN.UTF-8',
locale.py(1281):     'mi':                                   'mi_NZ.ISO8859-1',
locale.py(1282):     'mi_nz':                                'mi_NZ.ISO8859-1',
locale.py(1283):     'mi_nz.iso88591':                       'mi_NZ.ISO8859-1',
locale.py(1284):     'mk':                                   'mk_MK.ISO8859-5',
locale.py(1285):     'mk_mk':                                'mk_MK.ISO8859-5',
locale.py(1286):     'mk_mk.cp1251':                         'mk_MK.CP1251',
locale.py(1287):     'mk_mk.iso88595':                       'mk_MK.ISO8859-5',
locale.py(1288):     'mk_mk.microsoftcp1251':                'mk_MK.CP1251',
locale.py(1289):     'ml':                                   'ml_IN.UTF-8',
locale.py(1290):     'mr':                                   'mr_IN.UTF-8',
locale.py(1291):     'mr_in':                                'mr_IN.UTF-8',
locale.py(1292):     'ms':                                   'ms_MY.ISO8859-1',
locale.py(1293):     'ms_my':                                'ms_MY.ISO8859-1',
locale.py(1294):     'ms_my.iso88591':                       'ms_MY.ISO8859-1',
locale.py(1295):     'mt':                                   'mt_MT.ISO8859-3',
locale.py(1296):     'mt_mt':                                'mt_MT.ISO8859-3',
locale.py(1297):     'mt_mt.iso88593':                       'mt_MT.ISO8859-3',
locale.py(1298):     'nb':                                   'nb_NO.ISO8859-1',
locale.py(1299):     'nb_no':                                'nb_NO.ISO8859-1',
locale.py(1300):     'nb_no.88591':                          'nb_NO.ISO8859-1',
locale.py(1301):     'nb_no.iso88591':                       'nb_NO.ISO8859-1',
locale.py(1302):     'nb_no.iso885915':                      'nb_NO.ISO8859-15',
locale.py(1303):     'nb_no@euro':                           'nb_NO.ISO8859-15',
locale.py(1304):     'nl':                                   'nl_NL.ISO8859-1',
locale.py(1305):     'nl.iso885915':                         'nl_NL.ISO8859-15',
locale.py(1306):     'nl_be':                                'nl_BE.ISO8859-1',
locale.py(1307):     'nl_be.88591':                          'nl_BE.ISO8859-1',
locale.py(1308):     'nl_be.iso88591':                       'nl_BE.ISO8859-1',
locale.py(1309):     'nl_be.iso885915':                      'nl_BE.ISO8859-15',
locale.py(1310):     'nl_be.iso885915@euro':                 'nl_BE.ISO8859-15',
locale.py(1311):     'nl_be.utf8@euro':                      'nl_BE.UTF-8',
locale.py(1312):     'nl_be@euro':                           'nl_BE.ISO8859-15',
locale.py(1313):     'nl_nl':                                'nl_NL.ISO8859-1',
locale.py(1314):     'nl_nl.88591':                          'nl_NL.ISO8859-1',
locale.py(1315):     'nl_nl.iso88591':                       'nl_NL.ISO8859-1',
locale.py(1316):     'nl_nl.iso885915':                      'nl_NL.ISO8859-15',
locale.py(1317):     'nl_nl.iso885915@euro':                 'nl_NL.ISO8859-15',
locale.py(1318):     'nl_nl.utf8@euro':                      'nl_NL.UTF-8',
locale.py(1319):     'nl_nl@euro':                           'nl_NL.ISO8859-15',
locale.py(1320):     'nn':                                   'nn_NO.ISO8859-1',
locale.py(1321):     'nn_no':                                'nn_NO.ISO8859-1',
locale.py(1322):     'nn_no.88591':                          'nn_NO.ISO8859-1',
locale.py(1323):     'nn_no.iso88591':                       'nn_NO.ISO8859-1',
locale.py(1324):     'nn_no.iso885915':                      'nn_NO.ISO8859-15',
locale.py(1325):     'nn_no@euro':                           'nn_NO.ISO8859-15',
locale.py(1326):     'no':                                   'no_NO.ISO8859-1',
locale.py(1327):     'no@nynorsk':                           'ny_NO.ISO8859-1',
locale.py(1328):     'no_no':                                'no_NO.ISO8859-1',
locale.py(1329):     'no_no.88591':                          'no_NO.ISO8859-1',
locale.py(1330):     'no_no.iso88591':                       'no_NO.ISO8859-1',
locale.py(1331):     'no_no.iso885915':                      'no_NO.ISO8859-15',
locale.py(1332):     'no_no.iso88591@bokmal':                'no_NO.ISO8859-1',
locale.py(1333):     'no_no.iso88591@nynorsk':               'no_NO.ISO8859-1',
locale.py(1334):     'no_no@euro':                           'no_NO.ISO8859-15',
locale.py(1335):     'norwegian':                            'no_NO.ISO8859-1',
locale.py(1336):     'norwegian.iso88591':                   'no_NO.ISO8859-1',
locale.py(1337):     'nr':                                   'nr_ZA.ISO8859-1',
locale.py(1338):     'nr_za':                                'nr_ZA.ISO8859-1',
locale.py(1339):     'nr_za.iso88591':                       'nr_ZA.ISO8859-1',
locale.py(1340):     'nso':                                  'nso_ZA.ISO8859-15',
locale.py(1341):     'nso_za':                               'nso_ZA.ISO8859-15',
locale.py(1342):     'nso_za.iso885915':                     'nso_ZA.ISO8859-15',
locale.py(1343):     'ny':                                   'ny_NO.ISO8859-1',
locale.py(1344):     'ny_no':                                'ny_NO.ISO8859-1',
locale.py(1345):     'ny_no.88591':                          'ny_NO.ISO8859-1',
locale.py(1346):     'ny_no.iso88591':                       'ny_NO.ISO8859-1',
locale.py(1347):     'ny_no.iso885915':                      'ny_NO.ISO8859-15',
locale.py(1348):     'ny_no@euro':                           'ny_NO.ISO8859-15',
locale.py(1349):     'nynorsk':                              'nn_NO.ISO8859-1',
locale.py(1350):     'oc':                                   'oc_FR.ISO8859-1',
locale.py(1351):     'oc_fr':                                'oc_FR.ISO8859-1',
locale.py(1352):     'oc_fr.iso88591':                       'oc_FR.ISO8859-1',
locale.py(1353):     'oc_fr.iso885915':                      'oc_FR.ISO8859-15',
locale.py(1354):     'oc_fr@euro':                           'oc_FR.ISO8859-15',
locale.py(1355):     'or':                                   'or_IN.UTF-8',
locale.py(1356):     'pa':                                   'pa_IN.UTF-8',
locale.py(1357):     'pa_in':                                'pa_IN.UTF-8',
locale.py(1358):     'pd':                                   'pd_US.ISO8859-1',
locale.py(1359):     'pd_de':                                'pd_DE.ISO8859-1',
locale.py(1360):     'pd_de.iso88591':                       'pd_DE.ISO8859-1',
locale.py(1361):     'pd_de.iso885915':                      'pd_DE.ISO8859-15',
locale.py(1362):     'pd_de@euro':                           'pd_DE.ISO8859-15',
locale.py(1363):     'pd_us':                                'pd_US.ISO8859-1',
locale.py(1364):     'pd_us.iso88591':                       'pd_US.ISO8859-1',
locale.py(1365):     'pd_us.iso885915':                      'pd_US.ISO8859-15',
locale.py(1366):     'pd_us@euro':                           'pd_US.ISO8859-15',
locale.py(1367):     'ph':                                   'ph_PH.ISO8859-1',
locale.py(1368):     'ph_ph':                                'ph_PH.ISO8859-1',
locale.py(1369):     'ph_ph.iso88591':                       'ph_PH.ISO8859-1',
locale.py(1370):     'pl':                                   'pl_PL.ISO8859-2',
locale.py(1371):     'pl_pl':                                'pl_PL.ISO8859-2',
locale.py(1372):     'pl_pl.iso88592':                       'pl_PL.ISO8859-2',
locale.py(1373):     'polish':                               'pl_PL.ISO8859-2',
locale.py(1374):     'portuguese':                           'pt_PT.ISO8859-1',
locale.py(1375):     'portuguese.iso88591':                  'pt_PT.ISO8859-1',
locale.py(1376):     'portuguese_brazil':                    'pt_BR.ISO8859-1',
locale.py(1377):     'portuguese_brazil.8859':               'pt_BR.ISO8859-1',
locale.py(1378):     'posix':                                'C',
locale.py(1379):     'posix-utf2':                           'C',
locale.py(1380):     'pp':                                   'pp_AN.ISO8859-1',
locale.py(1381):     'pp_an':                                'pp_AN.ISO8859-1',
locale.py(1382):     'pp_an.iso88591':                       'pp_AN.ISO8859-1',
locale.py(1383):     'pt':                                   'pt_PT.ISO8859-1',
locale.py(1384):     'pt.iso885915':                         'pt_PT.ISO8859-15',
locale.py(1385):     'pt_br':                                'pt_BR.ISO8859-1',
locale.py(1386):     'pt_br.88591':                          'pt_BR.ISO8859-1',
locale.py(1387):     'pt_br.iso88591':                       'pt_BR.ISO8859-1',
locale.py(1388):     'pt_br.iso885915':                      'pt_BR.ISO8859-15',
locale.py(1389):     'pt_br@euro':                           'pt_BR.ISO8859-15',
locale.py(1390):     'pt_pt':                                'pt_PT.ISO8859-1',
locale.py(1391):     'pt_pt.88591':                          'pt_PT.ISO8859-1',
locale.py(1392):     'pt_pt.iso88591':                       'pt_PT.ISO8859-1',
locale.py(1393):     'pt_pt.iso885915':                      'pt_PT.ISO8859-15',
locale.py(1394):     'pt_pt.iso885915@euro':                 'pt_PT.ISO8859-15',
locale.py(1395):     'pt_pt.utf8@euro':                      'pt_PT.UTF-8',
locale.py(1396):     'pt_pt@euro':                           'pt_PT.ISO8859-15',
locale.py(1397):     'ro':                                   'ro_RO.ISO8859-2',
locale.py(1398):     'ro_ro':                                'ro_RO.ISO8859-2',
locale.py(1399):     'ro_ro.iso88592':                       'ro_RO.ISO8859-2',
locale.py(1400):     'romanian':                             'ro_RO.ISO8859-2',
locale.py(1401):     'ru':                                   'ru_RU.UTF-8',
locale.py(1402):     'ru.koi8r':                             'ru_RU.KOI8-R',
locale.py(1403):     'ru_ru':                                'ru_RU.UTF-8',
locale.py(1404):     'ru_ru.cp1251':                         'ru_RU.CP1251',
locale.py(1405):     'ru_ru.iso88595':                       'ru_RU.ISO8859-5',
locale.py(1406):     'ru_ru.koi8r':                          'ru_RU.KOI8-R',
locale.py(1407):     'ru_ru.microsoftcp1251':                'ru_RU.CP1251',
locale.py(1408):     'ru_ua':                                'ru_UA.KOI8-U',
locale.py(1409):     'ru_ua.cp1251':                         'ru_UA.CP1251',
locale.py(1410):     'ru_ua.koi8u':                          'ru_UA.KOI8-U',
locale.py(1411):     'ru_ua.microsoftcp1251':                'ru_UA.CP1251',
locale.py(1412):     'rumanian':                             'ro_RO.ISO8859-2',
locale.py(1413):     'russian':                              'ru_RU.ISO8859-5',
locale.py(1414):     'rw':                                   'rw_RW.ISO8859-1',
locale.py(1415):     'rw_rw':                                'rw_RW.ISO8859-1',
locale.py(1416):     'rw_rw.iso88591':                       'rw_RW.ISO8859-1',
locale.py(1417):     'sd':                                   'sd_IN@devanagari.UTF-8',
locale.py(1418):     'se_no':                                'se_NO.UTF-8',
locale.py(1419):     'serbocroatian':                        'sr_RS.UTF-8@latin',
locale.py(1420):     'sh':                                   'sr_RS.UTF-8@latin',
locale.py(1421):     'sh_ba.iso88592@bosnia':                'sr_CS.ISO8859-2',
locale.py(1422):     'sh_hr':                                'sh_HR.ISO8859-2',
locale.py(1423):     'sh_hr.iso88592':                       'hr_HR.ISO8859-2',
locale.py(1424):     'sh_sp':                                'sr_CS.ISO8859-2',
locale.py(1425):     'sh_yu':                                'sr_RS.UTF-8@latin',
locale.py(1426):     'si':                                   'si_LK.UTF-8',
locale.py(1427):     'si_lk':                                'si_LK.UTF-8',
locale.py(1428):     'sinhala':                              'si_LK.UTF-8',
locale.py(1429):     'sk':                                   'sk_SK.ISO8859-2',
locale.py(1430):     'sk_sk':                                'sk_SK.ISO8859-2',
locale.py(1431):     'sk_sk.iso88592':                       'sk_SK.ISO8859-2',
locale.py(1432):     'sl':                                   'sl_SI.ISO8859-2',
locale.py(1433):     'sl_cs':                                'sl_CS.ISO8859-2',
locale.py(1434):     'sl_si':                                'sl_SI.ISO8859-2',
locale.py(1435):     'sl_si.iso88592':                       'sl_SI.ISO8859-2',
locale.py(1436):     'slovak':                               'sk_SK.ISO8859-2',
locale.py(1437):     'slovene':                              'sl_SI.ISO8859-2',
locale.py(1438):     'slovenian':                            'sl_SI.ISO8859-2',
locale.py(1439):     'sp':                                   'sr_CS.ISO8859-5',
locale.py(1440):     'sp_yu':                                'sr_CS.ISO8859-5',
locale.py(1441):     'spanish':                              'es_ES.ISO8859-1',
locale.py(1442):     'spanish.iso88591':                     'es_ES.ISO8859-1',
locale.py(1443):     'spanish_spain':                        'es_ES.ISO8859-1',
locale.py(1444):     'spanish_spain.8859':                   'es_ES.ISO8859-1',
locale.py(1445):     'sq':                                   'sq_AL.ISO8859-2',
locale.py(1446):     'sq_al':                                'sq_AL.ISO8859-2',
locale.py(1447):     'sq_al.iso88592':                       'sq_AL.ISO8859-2',
locale.py(1448):     'sr':                                   'sr_RS.UTF-8',
locale.py(1449):     'sr@cyrillic':                          'sr_RS.UTF-8',
locale.py(1450):     'sr@latin':                             'sr_RS.UTF-8@latin',
locale.py(1451):     'sr@latn':                              'sr_RS.UTF-8@latin',
locale.py(1452):     'sr_cs':                                'sr_RS.UTF-8',
locale.py(1453):     'sr_cs.iso88592':                       'sr_CS.ISO8859-2',
locale.py(1454):     'sr_cs.iso88592@latn':                  'sr_CS.ISO8859-2',
locale.py(1455):     'sr_cs.iso88595':                       'sr_CS.ISO8859-5',
locale.py(1456):     'sr_cs.utf8@latn':                      'sr_RS.UTF-8@latin',
locale.py(1457):     'sr_cs@latn':                           'sr_RS.UTF-8@latin',
locale.py(1458):     'sr_me':                                'sr_ME.UTF-8',
locale.py(1459):     'sr_rs':                                'sr_RS.UTF-8',
locale.py(1460):     'sr_rs.utf8@latn':                      'sr_RS.UTF-8@latin',
locale.py(1461):     'sr_rs@latin':                          'sr_RS.UTF-8@latin',
locale.py(1462):     'sr_rs@latn':                           'sr_RS.UTF-8@latin',
locale.py(1463):     'sr_sp':                                'sr_CS.ISO8859-2',
locale.py(1464):     'sr_yu':                                'sr_RS.UTF-8@latin',
locale.py(1465):     'sr_yu.cp1251@cyrillic':                'sr_CS.CP1251',
locale.py(1466):     'sr_yu.iso88592':                       'sr_CS.ISO8859-2',
locale.py(1467):     'sr_yu.iso88595':                       'sr_CS.ISO8859-5',
locale.py(1468):     'sr_yu.iso88595@cyrillic':              'sr_CS.ISO8859-5',
locale.py(1469):     'sr_yu.microsoftcp1251@cyrillic':       'sr_CS.CP1251',
locale.py(1470):     'sr_yu.utf8@cyrillic':                  'sr_RS.UTF-8',
locale.py(1471):     'sr_yu@cyrillic':                       'sr_RS.UTF-8',
locale.py(1472):     'ss':                                   'ss_ZA.ISO8859-1',
locale.py(1473):     'ss_za':                                'ss_ZA.ISO8859-1',
locale.py(1474):     'ss_za.iso88591':                       'ss_ZA.ISO8859-1',
locale.py(1475):     'st':                                   'st_ZA.ISO8859-1',
locale.py(1476):     'st_za':                                'st_ZA.ISO8859-1',
locale.py(1477):     'st_za.iso88591':                       'st_ZA.ISO8859-1',
locale.py(1478):     'sv':                                   'sv_SE.ISO8859-1',
locale.py(1479):     'sv.iso885915':                         'sv_SE.ISO8859-15',
locale.py(1480):     'sv_fi':                                'sv_FI.ISO8859-1',
locale.py(1481):     'sv_fi.iso88591':                       'sv_FI.ISO8859-1',
locale.py(1482):     'sv_fi.iso885915':                      'sv_FI.ISO8859-15',
locale.py(1483):     'sv_fi.iso885915@euro':                 'sv_FI.ISO8859-15',
locale.py(1484):     'sv_fi.utf8@euro':                      'sv_FI.UTF-8',
locale.py(1485):     'sv_fi@euro':                           'sv_FI.ISO8859-15',
locale.py(1486):     'sv_se':                                'sv_SE.ISO8859-1',
locale.py(1487):     'sv_se.88591':                          'sv_SE.ISO8859-1',
locale.py(1488):     'sv_se.iso88591':                       'sv_SE.ISO8859-1',
locale.py(1489):     'sv_se.iso885915':                      'sv_SE.ISO8859-15',
locale.py(1490):     'sv_se@euro':                           'sv_SE.ISO8859-15',
locale.py(1491):     'swedish':                              'sv_SE.ISO8859-1',
locale.py(1492):     'swedish.iso88591':                     'sv_SE.ISO8859-1',
locale.py(1493):     'ta':                                   'ta_IN.TSCII-0',
locale.py(1494):     'ta_in':                                'ta_IN.TSCII-0',
locale.py(1495):     'ta_in.tscii':                          'ta_IN.TSCII-0',
locale.py(1496):     'ta_in.tscii0':                         'ta_IN.TSCII-0',
locale.py(1497):     'te':                                   'te_IN.UTF-8',
locale.py(1498):     'tg':                                   'tg_TJ.KOI8-C',
locale.py(1499):     'tg_tj':                                'tg_TJ.KOI8-C',
locale.py(1500):     'tg_tj.koi8c':                          'tg_TJ.KOI8-C',
locale.py(1501):     'th':                                   'th_TH.ISO8859-11',
locale.py(1502):     'th_th':                                'th_TH.ISO8859-11',
locale.py(1503):     'th_th.iso885911':                      'th_TH.ISO8859-11',
locale.py(1504):     'th_th.tactis':                         'th_TH.TIS620',
locale.py(1505):     'th_th.tis620':                         'th_TH.TIS620',
locale.py(1506):     'thai':                                 'th_TH.ISO8859-11',
locale.py(1507):     'tl':                                   'tl_PH.ISO8859-1',
locale.py(1508):     'tl_ph':                                'tl_PH.ISO8859-1',
locale.py(1509):     'tl_ph.iso88591':                       'tl_PH.ISO8859-1',
locale.py(1510):     'tn':                                   'tn_ZA.ISO8859-15',
locale.py(1511):     'tn_za':                                'tn_ZA.ISO8859-15',
locale.py(1512):     'tn_za.iso885915':                      'tn_ZA.ISO8859-15',
locale.py(1513):     'tr':                                   'tr_TR.ISO8859-9',
locale.py(1514):     'tr_tr':                                'tr_TR.ISO8859-9',
locale.py(1515):     'tr_tr.iso88599':                       'tr_TR.ISO8859-9',
locale.py(1516):     'ts':                                   'ts_ZA.ISO8859-1',
locale.py(1517):     'ts_za':                                'ts_ZA.ISO8859-1',
locale.py(1518):     'ts_za.iso88591':                       'ts_ZA.ISO8859-1',
locale.py(1519):     'tt':                                   'tt_RU.TATAR-CYR',
locale.py(1520):     'tt_ru':                                'tt_RU.TATAR-CYR',
locale.py(1521):     'tt_ru.koi8c':                          'tt_RU.KOI8-C',
locale.py(1522):     'tt_ru.tatarcyr':                       'tt_RU.TATAR-CYR',
locale.py(1523):     'turkish':                              'tr_TR.ISO8859-9',
locale.py(1524):     'turkish.iso88599':                     'tr_TR.ISO8859-9',
locale.py(1525):     'uk':                                   'uk_UA.KOI8-U',
locale.py(1526):     'uk_ua':                                'uk_UA.KOI8-U',
locale.py(1527):     'uk_ua.cp1251':                         'uk_UA.CP1251',
locale.py(1528):     'uk_ua.iso88595':                       'uk_UA.ISO8859-5',
locale.py(1529):     'uk_ua.koi8u':                          'uk_UA.KOI8-U',
locale.py(1530):     'uk_ua.microsoftcp1251':                'uk_UA.CP1251',
locale.py(1531):     'univ':                                 'en_US.utf',
locale.py(1532):     'universal':                            'en_US.utf',
locale.py(1533):     'universal.utf8@ucs4':                  'en_US.UTF-8',
locale.py(1534):     'ur':                                   'ur_PK.CP1256',
locale.py(1535):     'ur_pk':                                'ur_PK.CP1256',
locale.py(1536):     'ur_pk.cp1256':                         'ur_PK.CP1256',
locale.py(1537):     'ur_pk.microsoftcp1256':                'ur_PK.CP1256',
locale.py(1538):     'uz':                                   'uz_UZ.UTF-8',
locale.py(1539):     'uz_uz':                                'uz_UZ.UTF-8',
locale.py(1540):     'uz_uz.iso88591':                       'uz_UZ.ISO8859-1',
locale.py(1541):     'uz_uz.utf8@cyrillic':                  'uz_UZ.UTF-8',
locale.py(1542):     'uz_uz@cyrillic':                       'uz_UZ.UTF-8',
locale.py(1543):     've':                                   've_ZA.UTF-8',
locale.py(1544):     've_za':                                've_ZA.UTF-8',
locale.py(1545):     'vi':                                   'vi_VN.TCVN',
locale.py(1546):     'vi_vn':                                'vi_VN.TCVN',
locale.py(1547):     'vi_vn.tcvn':                           'vi_VN.TCVN',
locale.py(1548):     'vi_vn.tcvn5712':                       'vi_VN.TCVN',
locale.py(1549):     'vi_vn.viscii':                         'vi_VN.VISCII',
locale.py(1550):     'vi_vn.viscii111':                      'vi_VN.VISCII',
locale.py(1551):     'wa':                                   'wa_BE.ISO8859-1',
locale.py(1552):     'wa_be':                                'wa_BE.ISO8859-1',
locale.py(1553):     'wa_be.iso88591':                       'wa_BE.ISO8859-1',
locale.py(1554):     'wa_be.iso885915':                      'wa_BE.ISO8859-15',
locale.py(1555):     'wa_be.iso885915@euro':                 'wa_BE.ISO8859-15',
locale.py(1556):     'wa_be@euro':                           'wa_BE.ISO8859-15',
locale.py(1557):     'xh':                                   'xh_ZA.ISO8859-1',
locale.py(1558):     'xh_za':                                'xh_ZA.ISO8859-1',
locale.py(1559):     'xh_za.iso88591':                       'xh_ZA.ISO8859-1',
locale.py(1560):     'yi':                                   'yi_US.CP1255',
locale.py(1561):     'yi_us':                                'yi_US.CP1255',
locale.py(1562):     'yi_us.cp1255':                         'yi_US.CP1255',
locale.py(1563):     'yi_us.microsoftcp1255':                'yi_US.CP1255',
locale.py(1564):     'zh':                                   'zh_CN.eucCN',
locale.py(1565):     'zh_cn':                                'zh_CN.gb2312',
locale.py(1566):     'zh_cn.big5':                           'zh_TW.big5',
locale.py(1567):     'zh_cn.euc':                            'zh_CN.eucCN',
locale.py(1568):     'zh_cn.gb18030':                        'zh_CN.gb18030',
locale.py(1569):     'zh_cn.gb2312':                         'zh_CN.gb2312',
locale.py(1570):     'zh_cn.gbk':                            'zh_CN.gbk',
locale.py(1571):     'zh_hk':                                'zh_HK.big5hkscs',
locale.py(1572):     'zh_hk.big5':                           'zh_HK.big5',
locale.py(1573):     'zh_hk.big5hk':                         'zh_HK.big5hkscs',
locale.py(1574):     'zh_hk.big5hkscs':                      'zh_HK.big5hkscs',
locale.py(1575):     'zh_tw':                                'zh_TW.big5',
locale.py(1576):     'zh_tw.big5':                           'zh_TW.big5',
locale.py(1577):     'zh_tw.euc':                            'zh_TW.eucTW',
locale.py(1578):     'zh_tw.euctw':                          'zh_TW.eucTW',
locale.py(1579):     'zu':                                   'zu_ZA.ISO8859-1',
locale.py(1580):     'zu_za':                                'zu_ZA.ISO8859-1',
locale.py(1581):     'zu_za.iso88591':                       'zu_ZA.ISO8859-1',
locale.py(1597): windows_locale = {
locale.py(1598):     0x0436: "af_ZA", # Afrikaans
locale.py(1599):     0x041c: "sq_AL", # Albanian
locale.py(1600):     0x0484: "gsw_FR",# Alsatian - France
locale.py(1601):     0x045e: "am_ET", # Amharic - Ethiopia
locale.py(1602):     0x0401: "ar_SA", # Arabic - Saudi Arabia
locale.py(1603):     0x0801: "ar_IQ", # Arabic - Iraq
locale.py(1604):     0x0c01: "ar_EG", # Arabic - Egypt
locale.py(1605):     0x1001: "ar_LY", # Arabic - Libya
locale.py(1606):     0x1401: "ar_DZ", # Arabic - Algeria
locale.py(1607):     0x1801: "ar_MA", # Arabic - Morocco
locale.py(1608):     0x1c01: "ar_TN", # Arabic - Tunisia
locale.py(1609):     0x2001: "ar_OM", # Arabic - Oman
locale.py(1610):     0x2401: "ar_YE", # Arabic - Yemen
locale.py(1611):     0x2801: "ar_SY", # Arabic - Syria
locale.py(1612):     0x2c01: "ar_JO", # Arabic - Jordan
locale.py(1613):     0x3001: "ar_LB", # Arabic - Lebanon
locale.py(1614):     0x3401: "ar_KW", # Arabic - Kuwait
locale.py(1615):     0x3801: "ar_AE", # Arabic - United Arab Emirates
locale.py(1616):     0x3c01: "ar_BH", # Arabic - Bahrain
locale.py(1617):     0x4001: "ar_QA", # Arabic - Qatar
locale.py(1618):     0x042b: "hy_AM", # Armenian
locale.py(1619):     0x044d: "as_IN", # Assamese - India
locale.py(1620):     0x042c: "az_AZ", # Azeri - Latin
locale.py(1621):     0x082c: "az_AZ", # Azeri - Cyrillic
locale.py(1622):     0x046d: "ba_RU", # Bashkir
locale.py(1623):     0x042d: "eu_ES", # Basque - Russia
locale.py(1624):     0x0423: "be_BY", # Belarusian
locale.py(1625):     0x0445: "bn_IN", # Begali
locale.py(1626):     0x201a: "bs_BA", # Bosnian - Cyrillic
locale.py(1627):     0x141a: "bs_BA", # Bosnian - Latin
locale.py(1628):     0x047e: "br_FR", # Breton - France
locale.py(1629):     0x0402: "bg_BG", # Bulgarian
locale.py(1631):     0x0403: "ca_ES", # Catalan
locale.py(1632):     0x0004: "zh_CHS",# Chinese - Simplified
locale.py(1633):     0x0404: "zh_TW", # Chinese - Taiwan
locale.py(1634):     0x0804: "zh_CN", # Chinese - PRC
locale.py(1635):     0x0c04: "zh_HK", # Chinese - Hong Kong S.A.R.
locale.py(1636):     0x1004: "zh_SG", # Chinese - Singapore
locale.py(1637):     0x1404: "zh_MO", # Chinese - Macao S.A.R.
locale.py(1638):     0x7c04: "zh_CHT",# Chinese - Traditional
locale.py(1639):     0x0483: "co_FR", # Corsican - France
locale.py(1640):     0x041a: "hr_HR", # Croatian
locale.py(1641):     0x101a: "hr_BA", # Croatian - Bosnia
locale.py(1642):     0x0405: "cs_CZ", # Czech
locale.py(1643):     0x0406: "da_DK", # Danish
locale.py(1644):     0x048c: "gbz_AF",# Dari - Afghanistan
locale.py(1645):     0x0465: "div_MV",# Divehi - Maldives
locale.py(1646):     0x0413: "nl_NL", # Dutch - The Netherlands
locale.py(1647):     0x0813: "nl_BE", # Dutch - Belgium
locale.py(1648):     0x0409: "en_US", # English - United States
locale.py(1649):     0x0809: "en_GB", # English - United Kingdom
locale.py(1650):     0x0c09: "en_AU", # English - Australia
locale.py(1651):     0x1009: "en_CA", # English - Canada
locale.py(1652):     0x1409: "en_NZ", # English - New Zealand
locale.py(1653):     0x1809: "en_IE", # English - Ireland
locale.py(1654):     0x1c09: "en_ZA", # English - South Africa
locale.py(1655):     0x2009: "en_JA", # English - Jamaica
locale.py(1656):     0x2409: "en_CB", # English - Carribbean
locale.py(1657):     0x2809: "en_BZ", # English - Belize
locale.py(1658):     0x2c09: "en_TT", # English - Trinidad
locale.py(1659):     0x3009: "en_ZW", # English - Zimbabwe
locale.py(1660):     0x3409: "en_PH", # English - Philippines
locale.py(1661):     0x4009: "en_IN", # English - India
locale.py(1662):     0x4409: "en_MY", # English - Malaysia
locale.py(1663):     0x4809: "en_IN", # English - Singapore
locale.py(1664):     0x0425: "et_EE", # Estonian
locale.py(1665):     0x0438: "fo_FO", # Faroese
locale.py(1666):     0x0464: "fil_PH",# Filipino
locale.py(1667):     0x040b: "fi_FI", # Finnish
locale.py(1668):     0x040c: "fr_FR", # French - France
locale.py(1669):     0x080c: "fr_BE", # French - Belgium
locale.py(1670):     0x0c0c: "fr_CA", # French - Canada
locale.py(1671):     0x100c: "fr_CH", # French - Switzerland
locale.py(1672):     0x140c: "fr_LU", # French - Luxembourg
locale.py(1673):     0x180c: "fr_MC", # French - Monaco
locale.py(1674):     0x0462: "fy_NL", # Frisian - Netherlands
locale.py(1675):     0x0456: "gl_ES", # Galician
locale.py(1676):     0x0437: "ka_GE", # Georgian
locale.py(1677):     0x0407: "de_DE", # German - Germany
locale.py(1678):     0x0807: "de_CH", # German - Switzerland
locale.py(1679):     0x0c07: "de_AT", # German - Austria
locale.py(1680):     0x1007: "de_LU", # German - Luxembourg
locale.py(1681):     0x1407: "de_LI", # German - Liechtenstein
locale.py(1682):     0x0408: "el_GR", # Greek
locale.py(1683):     0x046f: "kl_GL", # Greenlandic - Greenland
locale.py(1684):     0x0447: "gu_IN", # Gujarati
locale.py(1685):     0x0468: "ha_NG", # Hausa - Latin
locale.py(1686):     0x040d: "he_IL", # Hebrew
locale.py(1687):     0x0439: "hi_IN", # Hindi
locale.py(1688):     0x040e: "hu_HU", # Hungarian
locale.py(1689):     0x040f: "is_IS", # Icelandic
locale.py(1690):     0x0421: "id_ID", # Indonesian
locale.py(1691):     0x045d: "iu_CA", # Inuktitut - Syllabics
locale.py(1692):     0x085d: "iu_CA", # Inuktitut - Latin
locale.py(1693):     0x083c: "ga_IE", # Irish - Ireland
locale.py(1694):     0x0410: "it_IT", # Italian - Italy
locale.py(1695):     0x0810: "it_CH", # Italian - Switzerland
locale.py(1696):     0x0411: "ja_JP", # Japanese
locale.py(1697):     0x044b: "kn_IN", # Kannada - India
locale.py(1698):     0x043f: "kk_KZ", # Kazakh
locale.py(1699):     0x0453: "kh_KH", # Khmer - Cambodia
locale.py(1700):     0x0486: "qut_GT",# K'iche - Guatemala
locale.py(1701):     0x0487: "rw_RW", # Kinyarwanda - Rwanda
locale.py(1702):     0x0457: "kok_IN",# Konkani
locale.py(1703):     0x0412: "ko_KR", # Korean
locale.py(1704):     0x0440: "ky_KG", # Kyrgyz
locale.py(1705):     0x0454: "lo_LA", # Lao - Lao PDR
locale.py(1706):     0x0426: "lv_LV", # Latvian
locale.py(1707):     0x0427: "lt_LT", # Lithuanian
locale.py(1708):     0x082e: "dsb_DE",# Lower Sorbian - Germany
locale.py(1709):     0x046e: "lb_LU", # Luxembourgish
locale.py(1710):     0x042f: "mk_MK", # FYROM Macedonian
locale.py(1711):     0x043e: "ms_MY", # Malay - Malaysia
locale.py(1712):     0x083e: "ms_BN", # Malay - Brunei Darussalam
locale.py(1713):     0x044c: "ml_IN", # Malayalam - India
locale.py(1714):     0x043a: "mt_MT", # Maltese
locale.py(1715):     0x0481: "mi_NZ", # Maori
locale.py(1716):     0x047a: "arn_CL",# Mapudungun
locale.py(1717):     0x044e: "mr_IN", # Marathi
locale.py(1718):     0x047c: "moh_CA",# Mohawk - Canada
locale.py(1719):     0x0450: "mn_MN", # Mongolian - Cyrillic
locale.py(1720):     0x0850: "mn_CN", # Mongolian - PRC
locale.py(1721):     0x0461: "ne_NP", # Nepali
locale.py(1722):     0x0414: "nb_NO", # Norwegian - Bokmal
locale.py(1723):     0x0814: "nn_NO", # Norwegian - Nynorsk
locale.py(1724):     0x0482: "oc_FR", # Occitan - France
locale.py(1725):     0x0448: "or_IN", # Oriya - India
locale.py(1726):     0x0463: "ps_AF", # Pashto - Afghanistan
locale.py(1727):     0x0429: "fa_IR", # Persian
locale.py(1728):     0x0415: "pl_PL", # Polish
locale.py(1729):     0x0416: "pt_BR", # Portuguese - Brazil
locale.py(1730):     0x0816: "pt_PT", # Portuguese - Portugal
locale.py(1731):     0x0446: "pa_IN", # Punjabi
locale.py(1732):     0x046b: "quz_BO",# Quechua (Bolivia)
locale.py(1733):     0x086b: "quz_EC",# Quechua (Ecuador)
locale.py(1734):     0x0c6b: "quz_PE",# Quechua (Peru)
locale.py(1735):     0x0418: "ro_RO", # Romanian - Romania
locale.py(1736):     0x0417: "rm_CH", # Romansh
locale.py(1737):     0x0419: "ru_RU", # Russian
locale.py(1738):     0x243b: "smn_FI",# Sami Finland
locale.py(1739):     0x103b: "smj_NO",# Sami Norway
locale.py(1740):     0x143b: "smj_SE",# Sami Sweden
locale.py(1741):     0x043b: "se_NO", # Sami Northern Norway
locale.py(1742):     0x083b: "se_SE", # Sami Northern Sweden
locale.py(1743):     0x0c3b: "se_FI", # Sami Northern Finland
locale.py(1744):     0x203b: "sms_FI",# Sami Skolt
locale.py(1745):     0x183b: "sma_NO",# Sami Southern Norway
locale.py(1746):     0x1c3b: "sma_SE",# Sami Southern Sweden
locale.py(1747):     0x044f: "sa_IN", # Sanskrit
locale.py(1748):     0x0c1a: "sr_SP", # Serbian - Cyrillic
locale.py(1749):     0x1c1a: "sr_BA", # Serbian - Bosnia Cyrillic
locale.py(1750):     0x081a: "sr_SP", # Serbian - Latin
locale.py(1751):     0x181a: "sr_BA", # Serbian - Bosnia Latin
locale.py(1752):     0x045b: "si_LK", # Sinhala - Sri Lanka
locale.py(1753):     0x046c: "ns_ZA", # Northern Sotho
locale.py(1754):     0x0432: "tn_ZA", # Setswana - Southern Africa
locale.py(1755):     0x041b: "sk_SK", # Slovak
locale.py(1756):     0x0424: "sl_SI", # Slovenian
locale.py(1757):     0x040a: "es_ES", # Spanish - Spain
locale.py(1758):     0x080a: "es_MX", # Spanish - Mexico
locale.py(1759):     0x0c0a: "es_ES", # Spanish - Spain (Modern)
locale.py(1760):     0x100a: "es_GT", # Spanish - Guatemala
locale.py(1761):     0x140a: "es_CR", # Spanish - Costa Rica
locale.py(1762):     0x180a: "es_PA", # Spanish - Panama
locale.py(1763):     0x1c0a: "es_DO", # Spanish - Dominican Republic
locale.py(1764):     0x200a: "es_VE", # Spanish - Venezuela
locale.py(1765):     0x240a: "es_CO", # Spanish - Colombia
locale.py(1766):     0x280a: "es_PE", # Spanish - Peru
locale.py(1767):     0x2c0a: "es_AR", # Spanish - Argentina
locale.py(1768):     0x300a: "es_EC", # Spanish - Ecuador
locale.py(1769):     0x340a: "es_CL", # Spanish - Chile
locale.py(1770):     0x380a: "es_UR", # Spanish - Uruguay
locale.py(1771):     0x3c0a: "es_PY", # Spanish - Paraguay
locale.py(1772):     0x400a: "es_BO", # Spanish - Bolivia
locale.py(1773):     0x440a: "es_SV", # Spanish - El Salvador
locale.py(1774):     0x480a: "es_HN", # Spanish - Honduras
locale.py(1775):     0x4c0a: "es_NI", # Spanish - Nicaragua
locale.py(1776):     0x500a: "es_PR", # Spanish - Puerto Rico
locale.py(1777):     0x540a: "es_US", # Spanish - United States
locale.py(1779):     0x0441: "sw_KE", # Swahili
locale.py(1780):     0x041d: "sv_SE", # Swedish - Sweden
locale.py(1781):     0x081d: "sv_FI", # Swedish - Finland
locale.py(1782):     0x045a: "syr_SY",# Syriac
locale.py(1783):     0x0428: "tg_TJ", # Tajik - Cyrillic
locale.py(1784):     0x085f: "tmz_DZ",# Tamazight - Latin
locale.py(1785):     0x0449: "ta_IN", # Tamil
locale.py(1786):     0x0444: "tt_RU", # Tatar
locale.py(1787):     0x044a: "te_IN", # Telugu
locale.py(1788):     0x041e: "th_TH", # Thai
locale.py(1789):     0x0851: "bo_BT", # Tibetan - Bhutan
locale.py(1790):     0x0451: "bo_CN", # Tibetan - PRC
locale.py(1791):     0x041f: "tr_TR", # Turkish
locale.py(1792):     0x0442: "tk_TM", # Turkmen - Cyrillic
locale.py(1793):     0x0480: "ug_CN", # Uighur - Arabic
locale.py(1794):     0x0422: "uk_UA", # Ukrainian
locale.py(1795):     0x042e: "wen_DE",# Upper Sorbian - Germany
locale.py(1796):     0x0420: "ur_PK", # Urdu
locale.py(1797):     0x0820: "ur_IN", # Urdu - India
locale.py(1798):     0x0443: "uz_UZ", # Uzbek - Latin
locale.py(1799):     0x0843: "uz_UZ", # Uzbek - Cyrillic
locale.py(1800):     0x042a: "vi_VN", # Vietnamese
locale.py(1801):     0x0452: "cy_GB", # Welsh
locale.py(1802):     0x0488: "wo_SN", # Wolof - Senegal
locale.py(1803):     0x0434: "xh_ZA", # Xhosa - South Africa
locale.py(1804):     0x0485: "sah_RU",# Yakut - Cyrillic
locale.py(1805):     0x0478: "ii_CN", # Yi - PRC
locale.py(1806):     0x046a: "yo_NG", # Yoruba - Nigeria
locale.py(1807):     0x0435: "zu_ZA", # Zulu
locale.py(1810): def _print_locale():
locale.py(1868): try:
locale.py(1869):     LC_MESSAGES
locale.py(1873):     __all__.append("LC_MESSAGES")
locale.py(1875): if __name__=='__main__':
 --- modulename: copy, funcname: <module>
copy.py(49): """
copy.py(51): import types
copy.py(52): import weakref
 --- modulename: weakref, funcname: <module>
weakref.py(6): """
weakref.py(12): import UserDict
weakref.py(14): from _weakref import (
weakref.py(23): from _weakrefset import WeakSet
weakref.py(25): from exceptions import ReferenceError
weakref.py(28): ProxyTypes = (ProxyType, CallableProxyType)
weakref.py(30): __all__ = ["ref", "proxy", "getweakrefcount", "getweakrefs",
weakref.py(31):            "WeakKeyDictionary", "ReferenceError", "ReferenceType", "ProxyType",
weakref.py(32):            "CallableProxyType", "ProxyTypes", "WeakValueDictionary", 'WeakSet']
weakref.py(35): class WeakValueDictionary(UserDict.UserDict):
 --- modulename: weakref, funcname: WeakValueDictionary
weakref.py(35): class WeakValueDictionary(UserDict.UserDict):
weakref.py(40):     """
weakref.py(47):     def __init__(self, *args, **kw):
weakref.py(55):     def __getitem__(self, key):
weakref.py(62):     def __contains__(self, key):
weakref.py(69):     def has_key(self, key):
weakref.py(76):     def __repr__(self):
weakref.py(79):     def __setitem__(self, key, value):
weakref.py(82):     def copy(self):
weakref.py(90):     __copy__ = copy
weakref.py(92):     def __deepcopy__(self, memo):
weakref.py(101):     def get(self, key, default=None):
weakref.py(114):     def items(self):
weakref.py(122):     def iteritems(self):
weakref.py(128):     def iterkeys(self):
weakref.py(131):     def __iter__(self):
weakref.py(134):     def itervaluerefs(self):
weakref.py(146):     def itervalues(self):
weakref.py(152):     def popitem(self):
weakref.py(159):     def pop(self, key, *args):
weakref.py(171):     def setdefault(self, key, default=None):
weakref.py(180):     def update(self, dict=None, **kwargs):
weakref.py(190):     def valuerefs(self):
weakref.py(202):     def values(self):
weakref.py(211): class KeyedRef(ref):
 --- modulename: weakref, funcname: KeyedRef
weakref.py(211): class KeyedRef(ref):
weakref.py(219):     """
weakref.py(221):     __slots__ = "key",
weakref.py(223):     def __new__(type, ob, callback, key):
weakref.py(228):     def __init__(self, ob, callback, key):
weakref.py(232): class WeakKeyDictionary(UserDict.UserDict):
 --- modulename: weakref, funcname: WeakKeyDictionary
weakref.py(232): class WeakKeyDictionary(UserDict.UserDict):
weakref.py(241):     """
weakref.py(243):     def __init__(self, dict=None):
weakref.py(252):     def __delitem__(self, key):
weakref.py(255):     def __getitem__(self, key):
weakref.py(258):     def __repr__(self):
weakref.py(261):     def __setitem__(self, key, value):
weakref.py(264):     def copy(self):
weakref.py(272):     __copy__ = copy
weakref.py(274):     def __deepcopy__(self, memo):
weakref.py(283):     def get(self, key, default=None):
weakref.py(286):     def has_key(self, key):
weakref.py(293):     def __contains__(self, key):
weakref.py(300):     def items(self):
weakref.py(308):     def iteritems(self):
weakref.py(314):     def iterkeyrefs(self):
weakref.py(326):     def iterkeys(self):
weakref.py(332):     def __iter__(self):
weakref.py(335):     def itervalues(self):
weakref.py(338):     def keyrefs(self):
weakref.py(350):     def keys(self):
weakref.py(358):     def popitem(self):
weakref.py(365):     def pop(self, key, *args):
weakref.py(368):     def setdefault(self, key, default=None):
weakref.py(371):     def update(self, dict=None, **kwargs):
copy.py(53): from copy_reg import dispatch_table
copy.py(55): class Error(Exception):
 --- modulename: copy, funcname: Error
copy.py(55): class Error(Exception):
copy.py(56):     pass
copy.py(57): error = Error   # backward compatibility
copy.py(59): try:
copy.py(60):     from org.python.core import PyStringMap
copy.py(61): except ImportError:
copy.py(62):     PyStringMap = None
copy.py(64): __all__ = ["Error", "copy", "deepcopy"]
copy.py(66): def copy(x):
copy.py(99): _copy_dispatch = d = {}
copy.py(101): def _copy_immutable(x):
copy.py(103): for t in (type(None), int, long, float, bool, str, tuple,
copy.py(104):           frozenset, type, xrange, types.ClassType,
copy.py(105):           types.BuiltinFunctionType, type(Ellipsis),
copy.py(106):           types.FunctionType, weakref.ref):
copy.py(107):     d[t] = _copy_immutable
copy.py(106):           types.FunctionType, weakref.ref):
copy.py(107):     d[t] = _copy_immutable
copy.py(106):           types.FunctionType, weakref.ref):
copy.py(107):     d[t] = _copy_immutable
copy.py(106):           types.FunctionType, weakref.ref):
copy.py(107):     d[t] = _copy_immutable
copy.py(106):           types.FunctionType, weakref.ref):
copy.py(107):     d[t] = _copy_immutable
copy.py(106):           types.FunctionType, weakref.ref):
copy.py(107):     d[t] = _copy_immutable
copy.py(106):           types.FunctionType, weakref.ref):
copy.py(107):     d[t] = _copy_immutable
copy.py(106):           types.FunctionType, weakref.ref):
copy.py(107):     d[t] = _copy_immutable
copy.py(106):           types.FunctionType, weakref.ref):
copy.py(107):     d[t] = _copy_immutable
copy.py(106):           types.FunctionType, weakref.ref):
copy.py(107):     d[t] = _copy_immutable
copy.py(106):           types.FunctionType, weakref.ref):
copy.py(107):     d[t] = _copy_immutable
copy.py(106):           types.FunctionType, weakref.ref):
copy.py(107):     d[t] = _copy_immutable
copy.py(106):           types.FunctionType, weakref.ref):
copy.py(107):     d[t] = _copy_immutable
copy.py(106):           types.FunctionType, weakref.ref):
copy.py(107):     d[t] = _copy_immutable
copy.py(106):           types.FunctionType, weakref.ref):
copy.py(107):     d[t] = _copy_immutable
copy.py(106):           types.FunctionType, weakref.ref):
copy.py(108): for name in ("ComplexType", "UnicodeType", "CodeType"):
copy.py(109):     t = getattr(types, name, None)
copy.py(110):     if t is not None:
copy.py(111):         d[t] = _copy_immutable
copy.py(108): for name in ("ComplexType", "UnicodeType", "CodeType"):
copy.py(109):     t = getattr(types, name, None)
copy.py(110):     if t is not None:
copy.py(111):         d[t] = _copy_immutable
copy.py(108): for name in ("ComplexType", "UnicodeType", "CodeType"):
copy.py(109):     t = getattr(types, name, None)
copy.py(110):     if t is not None:
copy.py(111):         d[t] = _copy_immutable
copy.py(108): for name in ("ComplexType", "UnicodeType", "CodeType"):
copy.py(113): def _copy_with_constructor(x):
copy.py(115): for t in (list, dict, set):
copy.py(116):     d[t] = _copy_with_constructor
copy.py(115): for t in (list, dict, set):
copy.py(116):     d[t] = _copy_with_constructor
copy.py(115): for t in (list, dict, set):
copy.py(116):     d[t] = _copy_with_constructor
copy.py(115): for t in (list, dict, set):
copy.py(118): def _copy_with_copy_method(x):
copy.py(120): if PyStringMap is not None:
copy.py(123): def _copy_inst(x):
copy.py(141): d[types.InstanceType] = _copy_inst
copy.py(143): del d
copy.py(145): def deepcopy(x, memo=None, _nil=[]):
copy.py(196): _deepcopy_dispatch = d = {}
copy.py(198): def _deepcopy_atomic(x, memo):
copy.py(200): d[type(None)] = _deepcopy_atomic
copy.py(201): d[type(Ellipsis)] = _deepcopy_atomic
copy.py(202): d[int] = _deepcopy_atomic
copy.py(203): d[long] = _deepcopy_atomic
copy.py(204): d[float] = _deepcopy_atomic
copy.py(205): d[bool] = _deepcopy_atomic
copy.py(206): try:
copy.py(207):     d[complex] = _deepcopy_atomic
copy.py(210): d[str] = _deepcopy_atomic
copy.py(211): try:
copy.py(212):     d[unicode] = _deepcopy_atomic
copy.py(215): try:
copy.py(216):     d[types.CodeType] = _deepcopy_atomic
copy.py(219): d[type] = _deepcopy_atomic
copy.py(220): d[xrange] = _deepcopy_atomic
copy.py(221): d[types.ClassType] = _deepcopy_atomic
copy.py(222): d[types.BuiltinFunctionType] = _deepcopy_atomic
copy.py(223): d[types.FunctionType] = _deepcopy_atomic
copy.py(224): d[weakref.ref] = _deepcopy_atomic
copy.py(226): def _deepcopy_list(x, memo):
copy.py(232): d[list] = _deepcopy_list
copy.py(234): def _deepcopy_tuple(x, memo):
copy.py(251): d[tuple] = _deepcopy_tuple
copy.py(253): def _deepcopy_dict(x, memo):
copy.py(259): d[dict] = _deepcopy_dict
copy.py(260): if PyStringMap is not None:
copy.py(263): def _deepcopy_method(x, memo): # Copy instance methods
copy.py(265): _deepcopy_dispatch[types.MethodType] = _deepcopy_method
copy.py(267): def _keep_alive(x, memo):
copy.py(283): def _deepcopy_inst(x, memo):
copy.py(304): d[types.InstanceType] = _deepcopy_inst
copy.py(306): def _reconstruct(x, info, deep, memo=None):
copy.py(361): del d
copy.py(363): del types
copy.py(366): class _EmptyClass:
 --- modulename: copy, funcname: _EmptyClass
copy.py(366): class _EmptyClass:
copy.py(367):     pass
copy.py(369): def _test():
copy.py(432): if __name__ == '__main__':
 --- modulename: struct, funcname: <module>
struct.py(1): from _struct import *
struct.py(2): from _struct import _clearcache
struct.py(3): from _struct import __doc__
gettext.py(50): from errno import ENOENT
gettext.py(53): __all__ = ['NullTranslations', 'GNUTranslations', 'Catalog',
gettext.py(54):            'find', 'translation', 'install', 'textdomain', 'bindtextdomain',
gettext.py(55):            'dgettext', 'dngettext', 'gettext', 'ngettext',
gettext.py(58): _default_localedir = os.path.join(sys.prefix, 'share', 'locale')
 --- modulename: posixpath, funcname: join
posixpath.py(73):     path = a
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(81):     return path
gettext.py(61): def test(condition, true, false):
gettext.py(75): def c2py(plural):
gettext.py(130): def _expand_lang(locale):
gettext.py(173): class NullTranslations:
 --- modulename: gettext, funcname: NullTranslations
gettext.py(173): class NullTranslations:
gettext.py(174):     def __init__(self, fp=None):
gettext.py(182):     def _parse(self, fp):
gettext.py(185):     def add_fallback(self, fallback):
gettext.py(191):     def gettext(self, message):
gettext.py(196):     def lgettext(self, message):
gettext.py(201):     def ngettext(self, msgid1, msgid2, n):
gettext.py(209):     def lngettext(self, msgid1, msgid2, n):
gettext.py(217):     def ugettext(self, message):
gettext.py(222):     def ungettext(self, msgid1, msgid2, n):
gettext.py(230):     def info(self):
gettext.py(233):     def charset(self):
gettext.py(236):     def output_charset(self):
gettext.py(239):     def set_output_charset(self, charset):
gettext.py(242):     def install(self, unicode=False, names=None):
gettext.py(257): class GNUTranslations(NullTranslations):
 --- modulename: gettext, funcname: GNUTranslations
gettext.py(257): class GNUTranslations(NullTranslations):
gettext.py(259):     LE_MAGIC = 0x950412deL
gettext.py(260):     BE_MAGIC = 0xde120495L
gettext.py(262):     def _parse(self, fp):
gettext.py(343):     def gettext(self, message):
gettext.py(357):     def lgettext(self, message):
gettext.py(368):     def ngettext(self, msgid1, msgid2, n):
gettext.py(384):     def lngettext(self, msgid1, msgid2, n):
gettext.py(398):     def ugettext(self, message):
gettext.py(407):     def ungettext(self, msgid1, msgid2, n):
gettext.py(421): def find(domain, localedir=None, languages=None, all=0):
gettext.py(459): _translations = {}
gettext.py(461): def translation(domain, localedir=None, languages=None,
gettext.py(462):                 class_=None, fallback=False, codeset=None):
gettext.py(492): def install(domain, localedir=None, unicode=False, codeset=None, names=None):
gettext.py(499): _localedirs = {}
gettext.py(501): _localecodesets = {}
gettext.py(503): _current_domain = 'messages'
gettext.py(506): def textdomain(domain=None):
gettext.py(513): def bindtextdomain(domain, localedir=None):
gettext.py(520): def bind_textdomain_codeset(domain, codeset=None):
gettext.py(527): def dgettext(domain, message):
gettext.py(535): def ldgettext(domain, message):
gettext.py(543): def dngettext(domain, msgid1, msgid2, n):
gettext.py(554): def ldngettext(domain, msgid1, msgid2, n):
gettext.py(565): def gettext(message):
gettext.py(568): def lgettext(message):
gettext.py(571): def ngettext(msgid1, msgid2, n):
gettext.py(574): def lngettext(msgid1, msgid2, n):
gettext.py(591): Catalog = translation
optparse.py(94): _ = gettext
optparse.py(97): class OptParseError (Exception):
 --- modulename: optparse, funcname: OptParseError
optparse.py(97): class OptParseError (Exception):
optparse.py(98):     def __init__(self, msg):
optparse.py(101):     def __str__(self):
optparse.py(105): class OptionError (OptParseError):
 --- modulename: optparse, funcname: OptionError
optparse.py(105): class OptionError (OptParseError):
optparse.py(109):     """
optparse.py(111):     def __init__(self, msg, option):
optparse.py(115):     def __str__(self):
optparse.py(121): class OptionConflictError (OptionError):
 --- modulename: optparse, funcname: OptionConflictError
optparse.py(121): class OptionConflictError (OptionError):
optparse.py(124):     """
optparse.py(126): class OptionValueError (OptParseError):
 --- modulename: optparse, funcname: OptionValueError
optparse.py(126): class OptionValueError (OptParseError):
optparse.py(130):     """
optparse.py(132): class BadOptionError (OptParseError):
 --- modulename: optparse, funcname: BadOptionError
optparse.py(132): class BadOptionError (OptParseError):
optparse.py(135):     """
optparse.py(136):     def __init__(self, opt_str):
optparse.py(139):     def __str__(self):
optparse.py(142): class AmbiguousOptionError (BadOptionError):
 --- modulename: optparse, funcname: AmbiguousOptionError
optparse.py(142): class AmbiguousOptionError (BadOptionError):
optparse.py(145):     """
optparse.py(146):     def __init__(self, opt_str, possibilities):
optparse.py(150):     def __str__(self):
optparse.py(155): class HelpFormatter:
 --- modulename: optparse, funcname: HelpFormatter
optparse.py(155): class HelpFormatter:
optparse.py(196):     """
optparse.py(198):     NO_DEFAULT_VALUE = "none"
optparse.py(200):     def __init__(self,
optparse.py(224):     def set_parser(self, parser):
optparse.py(227):     def set_short_opt_delimiter(self, delim):
optparse.py(233):     def set_long_opt_delimiter(self, delim):
optparse.py(239):     def indent(self):
optparse.py(243):     def dedent(self):
optparse.py(248):     def format_usage(self, usage):
optparse.py(251):     def format_heading(self, heading):
optparse.py(254):     def _format_text(self, text):
optparse.py(266):     def format_description(self, description):
optparse.py(272):     def format_epilog(self, epilog):
optparse.py(279):     def expand_default(self, option):
optparse.py(289):     def format_option(self, option):
optparse.py(324):     def store_option_strings(self, parser):
optparse.py(342):     def format_option_strings(self, option):
optparse.py(361): class IndentedHelpFormatter (HelpFormatter):
 --- modulename: optparse, funcname: IndentedHelpFormatter
optparse.py(361): class IndentedHelpFormatter (HelpFormatter):
optparse.py(363):     """
optparse.py(366):                  indent_increment=2,
optparse.py(367):                  max_help_position=24,
optparse.py(368):                  width=None,
optparse.py(369):                  short_first=1):
optparse.py(373):     def format_usage(self, usage):
optparse.py(376):     def format_heading(self, heading):
optparse.py(380): class TitledHelpFormatter (HelpFormatter):
 --- modulename: optparse, funcname: TitledHelpFormatter
optparse.py(380): class TitledHelpFormatter (HelpFormatter):
optparse.py(382):     """
optparse.py(385):                  indent_increment=0,
optparse.py(386):                  max_help_position=24,
optparse.py(387):                  width=None,
optparse.py(388):                  short_first=0):
optparse.py(392):     def format_usage(self, usage):
optparse.py(395):     def format_heading(self, heading):
optparse.py(399): def _parse_num(val, type):
optparse.py(412): def _parse_int(val):
optparse.py(415): def _parse_long(val):
optparse.py(418): _builtin_cvt = { "int" : (_parse_int, _("integer")),
 --- modulename: gettext, funcname: gettext
gettext.py(566):     return dgettext(_current_domain, message)
 --- modulename: gettext, funcname: dgettext
gettext.py(528):     try:
gettext.py(529):         t = translation(domain, _localedirs.get(domain, None),
gettext.py(530):                         codeset=_localecodesets.get(domain))
 --- modulename: gettext, funcname: translation
gettext.py(463):     if class_ is None:
gettext.py(464):         class_ = GNUTranslations
gettext.py(465):     mofiles = find(domain, localedir, languages, all=1)
 --- modulename: gettext, funcname: find
gettext.py(423):     if localedir is None:
gettext.py(424):         localedir = _default_localedir
gettext.py(425):     if languages is None:
gettext.py(426):         languages = []
gettext.py(427):         for envar in ('LANGUAGE', 'LC_ALL', 'LC_MESSAGES', 'LANG'):
gettext.py(428):             val = os.environ.get(envar)
 --- modulename: UserDict, funcname: get
UserDict.py(59):         if key not in self:
 --- modulename: UserDict, funcname: __contains__
UserDict.py(71):         return key in self.data
UserDict.py(60):             return failobj
gettext.py(429):             if val:
gettext.py(427):         for envar in ('LANGUAGE', 'LC_ALL', 'LC_MESSAGES', 'LANG'):
gettext.py(428):             val = os.environ.get(envar)
 --- modulename: UserDict, funcname: get
UserDict.py(59):         if key not in self:
 --- modulename: UserDict, funcname: __contains__
UserDict.py(71):         return key in self.data
UserDict.py(60):             return failobj
gettext.py(429):             if val:
gettext.py(427):         for envar in ('LANGUAGE', 'LC_ALL', 'LC_MESSAGES', 'LANG'):
gettext.py(428):             val = os.environ.get(envar)
 --- modulename: UserDict, funcname: get
UserDict.py(59):         if key not in self:
 --- modulename: UserDict, funcname: __contains__
UserDict.py(71):         return key in self.data
UserDict.py(60):             return failobj
gettext.py(429):             if val:
gettext.py(427):         for envar in ('LANGUAGE', 'LC_ALL', 'LC_MESSAGES', 'LANG'):
gettext.py(428):             val = os.environ.get(envar)
 --- modulename: UserDict, funcname: get
UserDict.py(59):         if key not in self:
 --- modulename: UserDict, funcname: __contains__
UserDict.py(71):         return key in self.data
UserDict.py(61):         return self[key]
 --- modulename: UserDict, funcname: __getitem__
UserDict.py(19):         if key in self.data:
UserDict.py(20):             return self.data[key]
gettext.py(429):             if val:
gettext.py(430):                 languages = val.split(':')
gettext.py(431):                 break
gettext.py(432):         if 'C' not in languages:
gettext.py(433):             languages.append('C')
gettext.py(435):     nelangs = []
gettext.py(436):     for lang in languages:
gettext.py(437):         for nelang in _expand_lang(lang):
 --- modulename: gettext, funcname: _expand_lang
gettext.py(131):     from locale import normalize
gettext.py(132):     locale = normalize(locale)
 --- modulename: locale, funcname: normalize
locale.py(364):     if isinstance(localename, _unicode):
locale.py(366):     fullname = localename.translate(_ascii_lower_map)
locale.py(367):     if ':' in fullname:
locale.py(370):     if '.' in fullname:
locale.py(371):         langname, encoding = fullname.split('.')[:2]
locale.py(372):         fullname = langname + '.' + encoding
locale.py(378):     norm_encoding = encoding.replace('-', '')
locale.py(379):     norm_encoding = norm_encoding.replace('_', '')
locale.py(380):     lookup_name = langname + '.' + encoding
locale.py(381):     code = locale_alias.get(lookup_name, None)
locale.py(382):     if code is not None:
locale.py(387):     code = locale_alias.get(langname, None)
locale.py(388):     if code is not None:
locale.py(390):         if '.' in code:
locale.py(391):             langname, defenc = code.split('.')
locale.py(395):         if encoding:
locale.py(397):             norm_encoding = encodings.normalize_encoding(encoding)
 --- modulename: __init__, funcname: normalize_encoding
__init__.py(64):     if hasattr(__builtin__, "unicode") and isinstance(encoding, unicode):
__init__.py(69):     return '_'.join(encoding.translate(_norm_encoding_map).split())
locale.py(399):             norm_encoding = encodings.aliases.aliases.get(norm_encoding,
locale.py(400):                                                           norm_encoding)
locale.py(402):             encoding = locale_encoding_alias.get(norm_encoding,
locale.py(403):                                                  norm_encoding)
locale.py(407):         if encoding:
locale.py(408):             return langname + '.' + encoding
gettext.py(133):     COMPONENT_CODESET   = 1 << 0
gettext.py(134):     COMPONENT_TERRITORY = 1 << 1
gettext.py(135):     COMPONENT_MODIFIER  = 1 << 2
gettext.py(137):     mask = 0
gettext.py(138):     pos = locale.find('@')
gettext.py(139):     if pos >= 0:
gettext.py(144):         modifier = ''
gettext.py(145):     pos = locale.find('.')
gettext.py(146):     if pos >= 0:
gettext.py(147):         codeset = locale[pos:]
gettext.py(148):         locale = locale[:pos]
gettext.py(149):         mask |= COMPONENT_CODESET
gettext.py(152):     pos = locale.find('_')
gettext.py(153):     if pos >= 0:
gettext.py(154):         territory = locale[pos:]
gettext.py(155):         locale = locale[:pos]
gettext.py(156):         mask |= COMPONENT_TERRITORY
gettext.py(159):     language = locale
gettext.py(160):     ret = []
gettext.py(161):     for i in range(mask+1):
gettext.py(162):         if not (i & ~mask):  # if all components for this combo exist ...
gettext.py(163):             val = language
gettext.py(164):             if i & COMPONENT_TERRITORY: val += territory
gettext.py(165):             if i & COMPONENT_CODESET:   val += codeset
gettext.py(166):             if i & COMPONENT_MODIFIER:  val += modifier
gettext.py(167):             ret.append(val)
gettext.py(161):     for i in range(mask+1):
gettext.py(162):         if not (i & ~mask):  # if all components for this combo exist ...
gettext.py(163):             val = language
gettext.py(164):             if i & COMPONENT_TERRITORY: val += territory
gettext.py(165):             if i & COMPONENT_CODESET:   val += codeset
gettext.py(166):             if i & COMPONENT_MODIFIER:  val += modifier
gettext.py(167):             ret.append(val)
gettext.py(161):     for i in range(mask+1):
gettext.py(162):         if not (i & ~mask):  # if all components for this combo exist ...
gettext.py(163):             val = language
gettext.py(164):             if i & COMPONENT_TERRITORY: val += territory
gettext.py(165):             if i & COMPONENT_CODESET:   val += codeset
gettext.py(166):             if i & COMPONENT_MODIFIER:  val += modifier
gettext.py(167):             ret.append(val)
gettext.py(161):     for i in range(mask+1):
gettext.py(162):         if not (i & ~mask):  # if all components for this combo exist ...
gettext.py(163):             val = language
gettext.py(164):             if i & COMPONENT_TERRITORY: val += territory
gettext.py(165):             if i & COMPONENT_CODESET:   val += codeset
gettext.py(166):             if i & COMPONENT_MODIFIER:  val += modifier
gettext.py(167):             ret.append(val)
gettext.py(161):     for i in range(mask+1):
gettext.py(168):     ret.reverse()
gettext.py(169):     return ret
gettext.py(438):             if nelang not in nelangs:
gettext.py(439):                 nelangs.append(nelang)
gettext.py(437):         for nelang in _expand_lang(lang):
gettext.py(438):             if nelang not in nelangs:
gettext.py(439):                 nelangs.append(nelang)
gettext.py(437):         for nelang in _expand_lang(lang):
gettext.py(438):             if nelang not in nelangs:
gettext.py(439):                 nelangs.append(nelang)
gettext.py(437):         for nelang in _expand_lang(lang):
gettext.py(438):             if nelang not in nelangs:
gettext.py(439):                 nelangs.append(nelang)
gettext.py(437):         for nelang in _expand_lang(lang):
gettext.py(436):     for lang in languages:
gettext.py(437):         for nelang in _expand_lang(lang):
 --- modulename: gettext, funcname: _expand_lang
gettext.py(131):     from locale import normalize
gettext.py(132):     locale = normalize(locale)
 --- modulename: locale, funcname: normalize
locale.py(364):     if isinstance(localename, _unicode):
locale.py(366):     fullname = localename.translate(_ascii_lower_map)
locale.py(367):     if ':' in fullname:
locale.py(370):     if '.' in fullname:
locale.py(374):         langname = fullname
locale.py(375):         encoding = ''
locale.py(378):     norm_encoding = encoding.replace('-', '')
locale.py(379):     norm_encoding = norm_encoding.replace('_', '')
locale.py(380):     lookup_name = langname + '.' + encoding
locale.py(381):     code = locale_alias.get(lookup_name, None)
locale.py(382):     if code is not None:
locale.py(387):     code = locale_alias.get(langname, None)
locale.py(388):     if code is not None:
locale.py(390):         if '.' in code:
locale.py(393):             langname = code
locale.py(394):             defenc = ''
locale.py(395):         if encoding:
locale.py(405):             encoding = defenc
locale.py(407):         if encoding:
locale.py(410):             return langname
gettext.py(133):     COMPONENT_CODESET   = 1 << 0
gettext.py(134):     COMPONENT_TERRITORY = 1 << 1
gettext.py(135):     COMPONENT_MODIFIER  = 1 << 2
gettext.py(137):     mask = 0
gettext.py(138):     pos = locale.find('@')
gettext.py(139):     if pos >= 0:
gettext.py(144):         modifier = ''
gettext.py(145):     pos = locale.find('.')
gettext.py(146):     if pos >= 0:
gettext.py(151):         codeset = ''
gettext.py(152):     pos = locale.find('_')
gettext.py(153):     if pos >= 0:
gettext.py(158):         territory = ''
gettext.py(159):     language = locale
gettext.py(160):     ret = []
gettext.py(161):     for i in range(mask+1):
gettext.py(162):         if not (i & ~mask):  # if all components for this combo exist ...
gettext.py(163):             val = language
gettext.py(164):             if i & COMPONENT_TERRITORY: val += territory
gettext.py(165):             if i & COMPONENT_CODESET:   val += codeset
gettext.py(166):             if i & COMPONENT_MODIFIER:  val += modifier
gettext.py(167):             ret.append(val)
gettext.py(161):     for i in range(mask+1):
gettext.py(168):     ret.reverse()
gettext.py(169):     return ret
gettext.py(438):             if nelang not in nelangs:
gettext.py(439):                 nelangs.append(nelang)
gettext.py(437):         for nelang in _expand_lang(lang):
gettext.py(436):     for lang in languages:
gettext.py(441):     if all:
gettext.py(442):         result = []
gettext.py(445):     for lang in nelangs:
gettext.py(446):         if lang == 'C':
gettext.py(448):         mofile = os.path.join(localedir, lang, 'LC_MESSAGES', '%s.mo' % domain)
 --- modulename: posixpath, funcname: join
posixpath.py(73):     path = a
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(81):     return path
gettext.py(449):         if os.path.exists(mofile):
 --- modulename: genericpath, funcname: exists
genericpath.py(17):     try:
genericpath.py(18):         os.stat(path)
genericpath.py(19):     except os.error:
genericpath.py(20):         return False
gettext.py(445):     for lang in nelangs:
gettext.py(446):         if lang == 'C':
gettext.py(448):         mofile = os.path.join(localedir, lang, 'LC_MESSAGES', '%s.mo' % domain)
 --- modulename: posixpath, funcname: join
posixpath.py(73):     path = a
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(81):     return path
gettext.py(449):         if os.path.exists(mofile):
 --- modulename: genericpath, funcname: exists
genericpath.py(17):     try:
genericpath.py(18):         os.stat(path)
genericpath.py(19):     except os.error:
genericpath.py(20):         return False
gettext.py(445):     for lang in nelangs:
gettext.py(446):         if lang == 'C':
gettext.py(448):         mofile = os.path.join(localedir, lang, 'LC_MESSAGES', '%s.mo' % domain)
 --- modulename: posixpath, funcname: join
posixpath.py(73):     path = a
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(81):     return path
gettext.py(449):         if os.path.exists(mofile):
 --- modulename: genericpath, funcname: exists
genericpath.py(17):     try:
genericpath.py(18):         os.stat(path)
genericpath.py(19):     except os.error:
genericpath.py(20):         return False
gettext.py(445):     for lang in nelangs:
gettext.py(446):         if lang == 'C':
gettext.py(448):         mofile = os.path.join(localedir, lang, 'LC_MESSAGES', '%s.mo' % domain)
 --- modulename: posixpath, funcname: join
posixpath.py(73):     path = a
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(81):     return path
gettext.py(449):         if os.path.exists(mofile):
 --- modulename: genericpath, funcname: exists
genericpath.py(17):     try:
genericpath.py(18):         os.stat(path)
genericpath.py(19):     except os.error:
genericpath.py(20):         return False
gettext.py(445):     for lang in nelangs:
gettext.py(446):         if lang == 'C':
gettext.py(447):             break
gettext.py(454):     return result
gettext.py(466):     if not mofiles:
gettext.py(467):         if fallback:
gettext.py(469):         raise IOError(ENOENT, 'No translation file found for domain', domain)
gettext.py(531):     except IOError:
gettext.py(532):         return message
optparse.py(419):                  "long" : (_parse_long, _("long integer")),
 --- modulename: gettext, funcname: gettext
gettext.py(566):     return dgettext(_current_domain, message)
 --- modulename: gettext, funcname: dgettext
gettext.py(528):     try:
gettext.py(529):         t = translation(domain, _localedirs.get(domain, None),
gettext.py(530):                         codeset=_localecodesets.get(domain))
 --- modulename: gettext, funcname: translation
gettext.py(463):     if class_ is None:
gettext.py(464):         class_ = GNUTranslations
gettext.py(465):     mofiles = find(domain, localedir, languages, all=1)
 --- modulename: gettext, funcname: find
gettext.py(423):     if localedir is None:
gettext.py(424):         localedir = _default_localedir
gettext.py(425):     if languages is None:
gettext.py(426):         languages = []
gettext.py(427):         for envar in ('LANGUAGE', 'LC_ALL', 'LC_MESSAGES', 'LANG'):
gettext.py(428):             val = os.environ.get(envar)
 --- modulename: UserDict, funcname: get
UserDict.py(59):         if key not in self:
 --- modulename: UserDict, funcname: __contains__
UserDict.py(71):         return key in self.data
UserDict.py(60):             return failobj
gettext.py(429):             if val:
gettext.py(427):         for envar in ('LANGUAGE', 'LC_ALL', 'LC_MESSAGES', 'LANG'):
gettext.py(428):             val = os.environ.get(envar)
 --- modulename: UserDict, funcname: get
UserDict.py(59):         if key not in self:
 --- modulename: UserDict, funcname: __contains__
UserDict.py(71):         return key in self.data
UserDict.py(60):             return failobj
gettext.py(429):             if val:
gettext.py(427):         for envar in ('LANGUAGE', 'LC_ALL', 'LC_MESSAGES', 'LANG'):
gettext.py(428):             val = os.environ.get(envar)
 --- modulename: UserDict, funcname: get
UserDict.py(59):         if key not in self:
 --- modulename: UserDict, funcname: __contains__
UserDict.py(71):         return key in self.data
UserDict.py(60):             return failobj
gettext.py(429):             if val:
gettext.py(427):         for envar in ('LANGUAGE', 'LC_ALL', 'LC_MESSAGES', 'LANG'):
gettext.py(428):             val = os.environ.get(envar)
 --- modulename: UserDict, funcname: get
UserDict.py(59):         if key not in self:
 --- modulename: UserDict, funcname: __contains__
UserDict.py(71):         return key in self.data
UserDict.py(61):         return self[key]
 --- modulename: UserDict, funcname: __getitem__
UserDict.py(19):         if key in self.data:
UserDict.py(20):             return self.data[key]
gettext.py(429):             if val:
gettext.py(430):                 languages = val.split(':')
gettext.py(431):                 break
gettext.py(432):         if 'C' not in languages:
gettext.py(433):             languages.append('C')
gettext.py(435):     nelangs = []
gettext.py(436):     for lang in languages:
gettext.py(437):         for nelang in _expand_lang(lang):
 --- modulename: gettext, funcname: _expand_lang
gettext.py(131):     from locale import normalize
gettext.py(132):     locale = normalize(locale)
 --- modulename: locale, funcname: normalize
locale.py(364):     if isinstance(localename, _unicode):
locale.py(366):     fullname = localename.translate(_ascii_lower_map)
locale.py(367):     if ':' in fullname:
locale.py(370):     if '.' in fullname:
locale.py(371):         langname, encoding = fullname.split('.')[:2]
locale.py(372):         fullname = langname + '.' + encoding
locale.py(378):     norm_encoding = encoding.replace('-', '')
locale.py(379):     norm_encoding = norm_encoding.replace('_', '')
locale.py(380):     lookup_name = langname + '.' + encoding
locale.py(381):     code = locale_alias.get(lookup_name, None)
locale.py(382):     if code is not None:
locale.py(387):     code = locale_alias.get(langname, None)
locale.py(388):     if code is not None:
locale.py(390):         if '.' in code:
locale.py(391):             langname, defenc = code.split('.')
locale.py(395):         if encoding:
locale.py(397):             norm_encoding = encodings.normalize_encoding(encoding)
 --- modulename: __init__, funcname: normalize_encoding
__init__.py(64):     if hasattr(__builtin__, "unicode") and isinstance(encoding, unicode):
__init__.py(69):     return '_'.join(encoding.translate(_norm_encoding_map).split())
locale.py(399):             norm_encoding = encodings.aliases.aliases.get(norm_encoding,
locale.py(400):                                                           norm_encoding)
locale.py(402):             encoding = locale_encoding_alias.get(norm_encoding,
locale.py(403):                                                  norm_encoding)
locale.py(407):         if encoding:
locale.py(408):             return langname + '.' + encoding
gettext.py(133):     COMPONENT_CODESET   = 1 << 0
gettext.py(134):     COMPONENT_TERRITORY = 1 << 1
gettext.py(135):     COMPONENT_MODIFIER  = 1 << 2
gettext.py(137):     mask = 0
gettext.py(138):     pos = locale.find('@')
gettext.py(139):     if pos >= 0:
gettext.py(144):         modifier = ''
gettext.py(145):     pos = locale.find('.')
gettext.py(146):     if pos >= 0:
gettext.py(147):         codeset = locale[pos:]
gettext.py(148):         locale = locale[:pos]
gettext.py(149):         mask |= COMPONENT_CODESET
gettext.py(152):     pos = locale.find('_')
gettext.py(153):     if pos >= 0:
gettext.py(154):         territory = locale[pos:]
gettext.py(155):         locale = locale[:pos]
gettext.py(156):         mask |= COMPONENT_TERRITORY
gettext.py(159):     language = locale
gettext.py(160):     ret = []
gettext.py(161):     for i in range(mask+1):
gettext.py(162):         if not (i & ~mask):  # if all components for this combo exist ...
gettext.py(163):             val = language
gettext.py(164):             if i & COMPONENT_TERRITORY: val += territory
gettext.py(165):             if i & COMPONENT_CODESET:   val += codeset
gettext.py(166):             if i & COMPONENT_MODIFIER:  val += modifier
gettext.py(167):             ret.append(val)
gettext.py(161):     for i in range(mask+1):
gettext.py(162):         if not (i & ~mask):  # if all components for this combo exist ...
gettext.py(163):             val = language
gettext.py(164):             if i & COMPONENT_TERRITORY: val += territory
gettext.py(165):             if i & COMPONENT_CODESET:   val += codeset
gettext.py(166):             if i & COMPONENT_MODIFIER:  val += modifier
gettext.py(167):             ret.append(val)
gettext.py(161):     for i in range(mask+1):
gettext.py(162):         if not (i & ~mask):  # if all components for this combo exist ...
gettext.py(163):             val = language
gettext.py(164):             if i & COMPONENT_TERRITORY: val += territory
gettext.py(165):             if i & COMPONENT_CODESET:   val += codeset
gettext.py(166):             if i & COMPONENT_MODIFIER:  val += modifier
gettext.py(167):             ret.append(val)
gettext.py(161):     for i in range(mask+1):
gettext.py(162):         if not (i & ~mask):  # if all components for this combo exist ...
gettext.py(163):             val = language
gettext.py(164):             if i & COMPONENT_TERRITORY: val += territory
gettext.py(165):             if i & COMPONENT_CODESET:   val += codeset
gettext.py(166):             if i & COMPONENT_MODIFIER:  val += modifier
gettext.py(167):             ret.append(val)
gettext.py(161):     for i in range(mask+1):
gettext.py(168):     ret.reverse()
gettext.py(169):     return ret
gettext.py(438):             if nelang not in nelangs:
gettext.py(439):                 nelangs.append(nelang)
gettext.py(437):         for nelang in _expand_lang(lang):
gettext.py(438):             if nelang not in nelangs:
gettext.py(439):                 nelangs.append(nelang)
gettext.py(437):         for nelang in _expand_lang(lang):
gettext.py(438):             if nelang not in nelangs:
gettext.py(439):                 nelangs.append(nelang)
gettext.py(437):         for nelang in _expand_lang(lang):
gettext.py(438):             if nelang not in nelangs:
gettext.py(439):                 nelangs.append(nelang)
gettext.py(437):         for nelang in _expand_lang(lang):
gettext.py(436):     for lang in languages:
gettext.py(437):         for nelang in _expand_lang(lang):
 --- modulename: gettext, funcname: _expand_lang
gettext.py(131):     from locale import normalize
gettext.py(132):     locale = normalize(locale)
 --- modulename: locale, funcname: normalize
locale.py(364):     if isinstance(localename, _unicode):
locale.py(366):     fullname = localename.translate(_ascii_lower_map)
locale.py(367):     if ':' in fullname:
locale.py(370):     if '.' in fullname:
locale.py(374):         langname = fullname
locale.py(375):         encoding = ''
locale.py(378):     norm_encoding = encoding.replace('-', '')
locale.py(379):     norm_encoding = norm_encoding.replace('_', '')
locale.py(380):     lookup_name = langname + '.' + encoding
locale.py(381):     code = locale_alias.get(lookup_name, None)
locale.py(382):     if code is not None:
locale.py(387):     code = locale_alias.get(langname, None)
locale.py(388):     if code is not None:
locale.py(390):         if '.' in code:
locale.py(393):             langname = code
locale.py(394):             defenc = ''
locale.py(395):         if encoding:
locale.py(405):             encoding = defenc
locale.py(407):         if encoding:
locale.py(410):             return langname
gettext.py(133):     COMPONENT_CODESET   = 1 << 0
gettext.py(134):     COMPONENT_TERRITORY = 1 << 1
gettext.py(135):     COMPONENT_MODIFIER  = 1 << 2
gettext.py(137):     mask = 0
gettext.py(138):     pos = locale.find('@')
gettext.py(139):     if pos >= 0:
gettext.py(144):         modifier = ''
gettext.py(145):     pos = locale.find('.')
gettext.py(146):     if pos >= 0:
gettext.py(151):         codeset = ''
gettext.py(152):     pos = locale.find('_')
gettext.py(153):     if pos >= 0:
gettext.py(158):         territory = ''
gettext.py(159):     language = locale
gettext.py(160):     ret = []
gettext.py(161):     for i in range(mask+1):
gettext.py(162):         if not (i & ~mask):  # if all components for this combo exist ...
gettext.py(163):             val = language
gettext.py(164):             if i & COMPONENT_TERRITORY: val += territory
gettext.py(165):             if i & COMPONENT_CODESET:   val += codeset
gettext.py(166):             if i & COMPONENT_MODIFIER:  val += modifier
gettext.py(167):             ret.append(val)
gettext.py(161):     for i in range(mask+1):
gettext.py(168):     ret.reverse()
gettext.py(169):     return ret
gettext.py(438):             if nelang not in nelangs:
gettext.py(439):                 nelangs.append(nelang)
gettext.py(437):         for nelang in _expand_lang(lang):
gettext.py(436):     for lang in languages:
gettext.py(441):     if all:
gettext.py(442):         result = []
gettext.py(445):     for lang in nelangs:
gettext.py(446):         if lang == 'C':
gettext.py(448):         mofile = os.path.join(localedir, lang, 'LC_MESSAGES', '%s.mo' % domain)
 --- modulename: posixpath, funcname: join
posixpath.py(73):     path = a
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(81):     return path
gettext.py(449):         if os.path.exists(mofile):
 --- modulename: genericpath, funcname: exists
genericpath.py(17):     try:
genericpath.py(18):         os.stat(path)
genericpath.py(19):     except os.error:
genericpath.py(20):         return False
gettext.py(445):     for lang in nelangs:
gettext.py(446):         if lang == 'C':
gettext.py(448):         mofile = os.path.join(localedir, lang, 'LC_MESSAGES', '%s.mo' % domain)
 --- modulename: posixpath, funcname: join
posixpath.py(73):     path = a
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(81):     return path
gettext.py(449):         if os.path.exists(mofile):
 --- modulename: genericpath, funcname: exists
genericpath.py(17):     try:
genericpath.py(18):         os.stat(path)
genericpath.py(19):     except os.error:
genericpath.py(20):         return False
gettext.py(445):     for lang in nelangs:
gettext.py(446):         if lang == 'C':
gettext.py(448):         mofile = os.path.join(localedir, lang, 'LC_MESSAGES', '%s.mo' % domain)
 --- modulename: posixpath, funcname: join
posixpath.py(73):     path = a
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(81):     return path
gettext.py(449):         if os.path.exists(mofile):
 --- modulename: genericpath, funcname: exists
genericpath.py(17):     try:
genericpath.py(18):         os.stat(path)
genericpath.py(19):     except os.error:
genericpath.py(20):         return False
gettext.py(445):     for lang in nelangs:
gettext.py(446):         if lang == 'C':
gettext.py(448):         mofile = os.path.join(localedir, lang, 'LC_MESSAGES', '%s.mo' % domain)
 --- modulename: posixpath, funcname: join
posixpath.py(73):     path = a
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(81):     return path
gettext.py(449):         if os.path.exists(mofile):
 --- modulename: genericpath, funcname: exists
genericpath.py(17):     try:
genericpath.py(18):         os.stat(path)
genericpath.py(19):     except os.error:
genericpath.py(20):         return False
gettext.py(445):     for lang in nelangs:
gettext.py(446):         if lang == 'C':
gettext.py(447):             break
gettext.py(454):     return result
gettext.py(466):     if not mofiles:
gettext.py(467):         if fallback:
gettext.py(469):         raise IOError(ENOENT, 'No translation file found for domain', domain)
gettext.py(531):     except IOError:
gettext.py(532):         return message
optparse.py(420):                  "float" : (float, _("floating-point")),
 --- modulename: gettext, funcname: gettext
gettext.py(566):     return dgettext(_current_domain, message)
 --- modulename: gettext, funcname: dgettext
gettext.py(528):     try:
gettext.py(529):         t = translation(domain, _localedirs.get(domain, None),
gettext.py(530):                         codeset=_localecodesets.get(domain))
 --- modulename: gettext, funcname: translation
gettext.py(463):     if class_ is None:
gettext.py(464):         class_ = GNUTranslations
gettext.py(465):     mofiles = find(domain, localedir, languages, all=1)
 --- modulename: gettext, funcname: find
gettext.py(423):     if localedir is None:
gettext.py(424):         localedir = _default_localedir
gettext.py(425):     if languages is None:
gettext.py(426):         languages = []
gettext.py(427):         for envar in ('LANGUAGE', 'LC_ALL', 'LC_MESSAGES', 'LANG'):
gettext.py(428):             val = os.environ.get(envar)
 --- modulename: UserDict, funcname: get
UserDict.py(59):         if key not in self:
 --- modulename: UserDict, funcname: __contains__
UserDict.py(71):         return key in self.data
UserDict.py(60):             return failobj
gettext.py(429):             if val:
gettext.py(427):         for envar in ('LANGUAGE', 'LC_ALL', 'LC_MESSAGES', 'LANG'):
gettext.py(428):             val = os.environ.get(envar)
 --- modulename: UserDict, funcname: get
UserDict.py(59):         if key not in self:
 --- modulename: UserDict, funcname: __contains__
UserDict.py(71):         return key in self.data
UserDict.py(60):             return failobj
gettext.py(429):             if val:
gettext.py(427):         for envar in ('LANGUAGE', 'LC_ALL', 'LC_MESSAGES', 'LANG'):
gettext.py(428):             val = os.environ.get(envar)
 --- modulename: UserDict, funcname: get
UserDict.py(59):         if key not in self:
 --- modulename: UserDict, funcname: __contains__
UserDict.py(71):         return key in self.data
UserDict.py(60):             return failobj
gettext.py(429):             if val:
gettext.py(427):         for envar in ('LANGUAGE', 'LC_ALL', 'LC_MESSAGES', 'LANG'):
gettext.py(428):             val = os.environ.get(envar)
 --- modulename: UserDict, funcname: get
UserDict.py(59):         if key not in self:
 --- modulename: UserDict, funcname: __contains__
UserDict.py(71):         return key in self.data
UserDict.py(61):         return self[key]
 --- modulename: UserDict, funcname: __getitem__
UserDict.py(19):         if key in self.data:
UserDict.py(20):             return self.data[key]
gettext.py(429):             if val:
gettext.py(430):                 languages = val.split(':')
gettext.py(431):                 break
gettext.py(432):         if 'C' not in languages:
gettext.py(433):             languages.append('C')
gettext.py(435):     nelangs = []
gettext.py(436):     for lang in languages:
gettext.py(437):         for nelang in _expand_lang(lang):
 --- modulename: gettext, funcname: _expand_lang
gettext.py(131):     from locale import normalize
gettext.py(132):     locale = normalize(locale)
 --- modulename: locale, funcname: normalize
locale.py(364):     if isinstance(localename, _unicode):
locale.py(366):     fullname = localename.translate(_ascii_lower_map)
locale.py(367):     if ':' in fullname:
locale.py(370):     if '.' in fullname:
locale.py(371):         langname, encoding = fullname.split('.')[:2]
locale.py(372):         fullname = langname + '.' + encoding
locale.py(378):     norm_encoding = encoding.replace('-', '')
locale.py(379):     norm_encoding = norm_encoding.replace('_', '')
locale.py(380):     lookup_name = langname + '.' + encoding
locale.py(381):     code = locale_alias.get(lookup_name, None)
locale.py(382):     if code is not None:
locale.py(387):     code = locale_alias.get(langname, None)
locale.py(388):     if code is not None:
locale.py(390):         if '.' in code:
locale.py(391):             langname, defenc = code.split('.')
locale.py(395):         if encoding:
locale.py(397):             norm_encoding = encodings.normalize_encoding(encoding)
 --- modulename: __init__, funcname: normalize_encoding
__init__.py(64):     if hasattr(__builtin__, "unicode") and isinstance(encoding, unicode):
__init__.py(69):     return '_'.join(encoding.translate(_norm_encoding_map).split())
locale.py(399):             norm_encoding = encodings.aliases.aliases.get(norm_encoding,
locale.py(400):                                                           norm_encoding)
locale.py(402):             encoding = locale_encoding_alias.get(norm_encoding,
locale.py(403):                                                  norm_encoding)
locale.py(407):         if encoding:
locale.py(408):             return langname + '.' + encoding
gettext.py(133):     COMPONENT_CODESET   = 1 << 0
gettext.py(134):     COMPONENT_TERRITORY = 1 << 1
gettext.py(135):     COMPONENT_MODIFIER  = 1 << 2
gettext.py(137):     mask = 0
gettext.py(138):     pos = locale.find('@')
gettext.py(139):     if pos >= 0:
gettext.py(144):         modifier = ''
gettext.py(145):     pos = locale.find('.')
gettext.py(146):     if pos >= 0:
gettext.py(147):         codeset = locale[pos:]
gettext.py(148):         locale = locale[:pos]
gettext.py(149):         mask |= COMPONENT_CODESET
gettext.py(152):     pos = locale.find('_')
gettext.py(153):     if pos >= 0:
gettext.py(154):         territory = locale[pos:]
gettext.py(155):         locale = locale[:pos]
gettext.py(156):         mask |= COMPONENT_TERRITORY
gettext.py(159):     language = locale
gettext.py(160):     ret = []
gettext.py(161):     for i in range(mask+1):
gettext.py(162):         if not (i & ~mask):  # if all components for this combo exist ...
gettext.py(163):             val = language
gettext.py(164):             if i & COMPONENT_TERRITORY: val += territory
gettext.py(165):             if i & COMPONENT_CODESET:   val += codeset
gettext.py(166):             if i & COMPONENT_MODIFIER:  val += modifier
gettext.py(167):             ret.append(val)
gettext.py(161):     for i in range(mask+1):
gettext.py(162):         if not (i & ~mask):  # if all components for this combo exist ...
gettext.py(163):             val = language
gettext.py(164):             if i & COMPONENT_TERRITORY: val += territory
gettext.py(165):             if i & COMPONENT_CODESET:   val += codeset
gettext.py(166):             if i & COMPONENT_MODIFIER:  val += modifier
gettext.py(167):             ret.append(val)
gettext.py(161):     for i in range(mask+1):
gettext.py(162):         if not (i & ~mask):  # if all components for this combo exist ...
gettext.py(163):             val = language
gettext.py(164):             if i & COMPONENT_TERRITORY: val += territory
gettext.py(165):             if i & COMPONENT_CODESET:   val += codeset
gettext.py(166):             if i & COMPONENT_MODIFIER:  val += modifier
gettext.py(167):             ret.append(val)
gettext.py(161):     for i in range(mask+1):
gettext.py(162):         if not (i & ~mask):  # if all components for this combo exist ...
gettext.py(163):             val = language
gettext.py(164):             if i & COMPONENT_TERRITORY: val += territory
gettext.py(165):             if i & COMPONENT_CODESET:   val += codeset
gettext.py(166):             if i & COMPONENT_MODIFIER:  val += modifier
gettext.py(167):             ret.append(val)
gettext.py(161):     for i in range(mask+1):
gettext.py(168):     ret.reverse()
gettext.py(169):     return ret
gettext.py(438):             if nelang not in nelangs:
gettext.py(439):                 nelangs.append(nelang)
gettext.py(437):         for nelang in _expand_lang(lang):
gettext.py(438):             if nelang not in nelangs:
gettext.py(439):                 nelangs.append(nelang)
gettext.py(437):         for nelang in _expand_lang(lang):
gettext.py(438):             if nelang not in nelangs:
gettext.py(439):                 nelangs.append(nelang)
gettext.py(437):         for nelang in _expand_lang(lang):
gettext.py(438):             if nelang not in nelangs:
gettext.py(439):                 nelangs.append(nelang)
gettext.py(437):         for nelang in _expand_lang(lang):
gettext.py(436):     for lang in languages:
gettext.py(437):         for nelang in _expand_lang(lang):
 --- modulename: gettext, funcname: _expand_lang
gettext.py(131):     from locale import normalize
gettext.py(132):     locale = normalize(locale)
 --- modulename: locale, funcname: normalize
locale.py(364):     if isinstance(localename, _unicode):
locale.py(366):     fullname = localename.translate(_ascii_lower_map)
locale.py(367):     if ':' in fullname:
locale.py(370):     if '.' in fullname:
locale.py(374):         langname = fullname
locale.py(375):         encoding = ''
locale.py(378):     norm_encoding = encoding.replace('-', '')
locale.py(379):     norm_encoding = norm_encoding.replace('_', '')
locale.py(380):     lookup_name = langname + '.' + encoding
locale.py(381):     code = locale_alias.get(lookup_name, None)
locale.py(382):     if code is not None:
locale.py(387):     code = locale_alias.get(langname, None)
locale.py(388):     if code is not None:
locale.py(390):         if '.' in code:
locale.py(393):             langname = code
locale.py(394):             defenc = ''
locale.py(395):         if encoding:
locale.py(405):             encoding = defenc
locale.py(407):         if encoding:
locale.py(410):             return langname
gettext.py(133):     COMPONENT_CODESET   = 1 << 0
gettext.py(134):     COMPONENT_TERRITORY = 1 << 1
gettext.py(135):     COMPONENT_MODIFIER  = 1 << 2
gettext.py(137):     mask = 0
gettext.py(138):     pos = locale.find('@')
gettext.py(139):     if pos >= 0:
gettext.py(144):         modifier = ''
gettext.py(145):     pos = locale.find('.')
gettext.py(146):     if pos >= 0:
gettext.py(151):         codeset = ''
gettext.py(152):     pos = locale.find('_')
gettext.py(153):     if pos >= 0:
gettext.py(158):         territory = ''
gettext.py(159):     language = locale
gettext.py(160):     ret = []
gettext.py(161):     for i in range(mask+1):
gettext.py(162):         if not (i & ~mask):  # if all components for this combo exist ...
gettext.py(163):             val = language
gettext.py(164):             if i & COMPONENT_TERRITORY: val += territory
gettext.py(165):             if i & COMPONENT_CODESET:   val += codeset
gettext.py(166):             if i & COMPONENT_MODIFIER:  val += modifier
gettext.py(167):             ret.append(val)
gettext.py(161):     for i in range(mask+1):
gettext.py(168):     ret.reverse()
gettext.py(169):     return ret
gettext.py(438):             if nelang not in nelangs:
gettext.py(439):                 nelangs.append(nelang)
gettext.py(437):         for nelang in _expand_lang(lang):
gettext.py(436):     for lang in languages:
gettext.py(441):     if all:
gettext.py(442):         result = []
gettext.py(445):     for lang in nelangs:
gettext.py(446):         if lang == 'C':
gettext.py(448):         mofile = os.path.join(localedir, lang, 'LC_MESSAGES', '%s.mo' % domain)
 --- modulename: posixpath, funcname: join
posixpath.py(73):     path = a
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(81):     return path
gettext.py(449):         if os.path.exists(mofile):
 --- modulename: genericpath, funcname: exists
genericpath.py(17):     try:
genericpath.py(18):         os.stat(path)
genericpath.py(19):     except os.error:
genericpath.py(20):         return False
gettext.py(445):     for lang in nelangs:
gettext.py(446):         if lang == 'C':
gettext.py(448):         mofile = os.path.join(localedir, lang, 'LC_MESSAGES', '%s.mo' % domain)
 --- modulename: posixpath, funcname: join
posixpath.py(73):     path = a
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(81):     return path
gettext.py(449):         if os.path.exists(mofile):
 --- modulename: genericpath, funcname: exists
genericpath.py(17):     try:
genericpath.py(18):         os.stat(path)
genericpath.py(19):     except os.error:
genericpath.py(20):         return False
gettext.py(445):     for lang in nelangs:
gettext.py(446):         if lang == 'C':
gettext.py(448):         mofile = os.path.join(localedir, lang, 'LC_MESSAGES', '%s.mo' % domain)
 --- modulename: posixpath, funcname: join
posixpath.py(73):     path = a
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(81):     return path
gettext.py(449):         if os.path.exists(mofile):
 --- modulename: genericpath, funcname: exists
genericpath.py(17):     try:
genericpath.py(18):         os.stat(path)
genericpath.py(19):     except os.error:
genericpath.py(20):         return False
gettext.py(445):     for lang in nelangs:
gettext.py(446):         if lang == 'C':
gettext.py(448):         mofile = os.path.join(localedir, lang, 'LC_MESSAGES', '%s.mo' % domain)
 --- modulename: posixpath, funcname: join
posixpath.py(73):     path = a
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(81):     return path
gettext.py(449):         if os.path.exists(mofile):
 --- modulename: genericpath, funcname: exists
genericpath.py(17):     try:
genericpath.py(18):         os.stat(path)
genericpath.py(19):     except os.error:
genericpath.py(20):         return False
gettext.py(445):     for lang in nelangs:
gettext.py(446):         if lang == 'C':
gettext.py(447):             break
gettext.py(454):     return result
gettext.py(466):     if not mofiles:
gettext.py(467):         if fallback:
gettext.py(469):         raise IOError(ENOENT, 'No translation file found for domain', domain)
gettext.py(531):     except IOError:
gettext.py(532):         return message
optparse.py(421):                  "complex" : (complex, _("complex")) }
 --- modulename: gettext, funcname: gettext
gettext.py(566):     return dgettext(_current_domain, message)
 --- modulename: gettext, funcname: dgettext
gettext.py(528):     try:
gettext.py(529):         t = translation(domain, _localedirs.get(domain, None),
gettext.py(530):                         codeset=_localecodesets.get(domain))
 --- modulename: gettext, funcname: translation
gettext.py(463):     if class_ is None:
gettext.py(464):         class_ = GNUTranslations
gettext.py(465):     mofiles = find(domain, localedir, languages, all=1)
 --- modulename: gettext, funcname: find
gettext.py(423):     if localedir is None:
gettext.py(424):         localedir = _default_localedir
gettext.py(425):     if languages is None:
gettext.py(426):         languages = []
gettext.py(427):         for envar in ('LANGUAGE', 'LC_ALL', 'LC_MESSAGES', 'LANG'):
gettext.py(428):             val = os.environ.get(envar)
 --- modulename: UserDict, funcname: get
UserDict.py(59):         if key not in self:
 --- modulename: UserDict, funcname: __contains__
UserDict.py(71):         return key in self.data
UserDict.py(60):             return failobj
gettext.py(429):             if val:
gettext.py(427):         for envar in ('LANGUAGE', 'LC_ALL', 'LC_MESSAGES', 'LANG'):
gettext.py(428):             val = os.environ.get(envar)
 --- modulename: UserDict, funcname: get
UserDict.py(59):         if key not in self:
 --- modulename: UserDict, funcname: __contains__
UserDict.py(71):         return key in self.data
UserDict.py(60):             return failobj
gettext.py(429):             if val:
gettext.py(427):         for envar in ('LANGUAGE', 'LC_ALL', 'LC_MESSAGES', 'LANG'):
gettext.py(428):             val = os.environ.get(envar)
 --- modulename: UserDict, funcname: get
UserDict.py(59):         if key not in self:
 --- modulename: UserDict, funcname: __contains__
UserDict.py(71):         return key in self.data
UserDict.py(60):             return failobj
gettext.py(429):             if val:
gettext.py(427):         for envar in ('LANGUAGE', 'LC_ALL', 'LC_MESSAGES', 'LANG'):
gettext.py(428):             val = os.environ.get(envar)
 --- modulename: UserDict, funcname: get
UserDict.py(59):         if key not in self:
 --- modulename: UserDict, funcname: __contains__
UserDict.py(71):         return key in self.data
UserDict.py(61):         return self[key]
 --- modulename: UserDict, funcname: __getitem__
UserDict.py(19):         if key in self.data:
UserDict.py(20):             return self.data[key]
gettext.py(429):             if val:
gettext.py(430):                 languages = val.split(':')
gettext.py(431):                 break
gettext.py(432):         if 'C' not in languages:
gettext.py(433):             languages.append('C')
gettext.py(435):     nelangs = []
gettext.py(436):     for lang in languages:
gettext.py(437):         for nelang in _expand_lang(lang):
 --- modulename: gettext, funcname: _expand_lang
gettext.py(131):     from locale import normalize
gettext.py(132):     locale = normalize(locale)
 --- modulename: locale, funcname: normalize
locale.py(364):     if isinstance(localename, _unicode):
locale.py(366):     fullname = localename.translate(_ascii_lower_map)
locale.py(367):     if ':' in fullname:
locale.py(370):     if '.' in fullname:
locale.py(371):         langname, encoding = fullname.split('.')[:2]
locale.py(372):         fullname = langname + '.' + encoding
locale.py(378):     norm_encoding = encoding.replace('-', '')
locale.py(379):     norm_encoding = norm_encoding.replace('_', '')
locale.py(380):     lookup_name = langname + '.' + encoding
locale.py(381):     code = locale_alias.get(lookup_name, None)
locale.py(382):     if code is not None:
locale.py(387):     code = locale_alias.get(langname, None)
locale.py(388):     if code is not None:
locale.py(390):         if '.' in code:
locale.py(391):             langname, defenc = code.split('.')
locale.py(395):         if encoding:
locale.py(397):             norm_encoding = encodings.normalize_encoding(encoding)
 --- modulename: __init__, funcname: normalize_encoding
__init__.py(64):     if hasattr(__builtin__, "unicode") and isinstance(encoding, unicode):
__init__.py(69):     return '_'.join(encoding.translate(_norm_encoding_map).split())
locale.py(399):             norm_encoding = encodings.aliases.aliases.get(norm_encoding,
locale.py(400):                                                           norm_encoding)
locale.py(402):             encoding = locale_encoding_alias.get(norm_encoding,
locale.py(403):                                                  norm_encoding)
locale.py(407):         if encoding:
locale.py(408):             return langname + '.' + encoding
gettext.py(133):     COMPONENT_CODESET   = 1 << 0
gettext.py(134):     COMPONENT_TERRITORY = 1 << 1
gettext.py(135):     COMPONENT_MODIFIER  = 1 << 2
gettext.py(137):     mask = 0
gettext.py(138):     pos = locale.find('@')
gettext.py(139):     if pos >= 0:
gettext.py(144):         modifier = ''
gettext.py(145):     pos = locale.find('.')
gettext.py(146):     if pos >= 0:
gettext.py(147):         codeset = locale[pos:]
gettext.py(148):         locale = locale[:pos]
gettext.py(149):         mask |= COMPONENT_CODESET
gettext.py(152):     pos = locale.find('_')
gettext.py(153):     if pos >= 0:
gettext.py(154):         territory = locale[pos:]
gettext.py(155):         locale = locale[:pos]
gettext.py(156):         mask |= COMPONENT_TERRITORY
gettext.py(159):     language = locale
gettext.py(160):     ret = []
gettext.py(161):     for i in range(mask+1):
gettext.py(162):         if not (i & ~mask):  # if all components for this combo exist ...
gettext.py(163):             val = language
gettext.py(164):             if i & COMPONENT_TERRITORY: val += territory
gettext.py(165):             if i & COMPONENT_CODESET:   val += codeset
gettext.py(166):             if i & COMPONENT_MODIFIER:  val += modifier
gettext.py(167):             ret.append(val)
gettext.py(161):     for i in range(mask+1):
gettext.py(162):         if not (i & ~mask):  # if all components for this combo exist ...
gettext.py(163):             val = language
gettext.py(164):             if i & COMPONENT_TERRITORY: val += territory
gettext.py(165):             if i & COMPONENT_CODESET:   val += codeset
gettext.py(166):             if i & COMPONENT_MODIFIER:  val += modifier
gettext.py(167):             ret.append(val)
gettext.py(161):     for i in range(mask+1):
gettext.py(162):         if not (i & ~mask):  # if all components for this combo exist ...
gettext.py(163):             val = language
gettext.py(164):             if i & COMPONENT_TERRITORY: val += territory
gettext.py(165):             if i & COMPONENT_CODESET:   val += codeset
gettext.py(166):             if i & COMPONENT_MODIFIER:  val += modifier
gettext.py(167):             ret.append(val)
gettext.py(161):     for i in range(mask+1):
gettext.py(162):         if not (i & ~mask):  # if all components for this combo exist ...
gettext.py(163):             val = language
gettext.py(164):             if i & COMPONENT_TERRITORY: val += territory
gettext.py(165):             if i & COMPONENT_CODESET:   val += codeset
gettext.py(166):             if i & COMPONENT_MODIFIER:  val += modifier
gettext.py(167):             ret.append(val)
gettext.py(161):     for i in range(mask+1):
gettext.py(168):     ret.reverse()
gettext.py(169):     return ret
gettext.py(438):             if nelang not in nelangs:
gettext.py(439):                 nelangs.append(nelang)
gettext.py(437):         for nelang in _expand_lang(lang):
gettext.py(438):             if nelang not in nelangs:
gettext.py(439):                 nelangs.append(nelang)
gettext.py(437):         for nelang in _expand_lang(lang):
gettext.py(438):             if nelang not in nelangs:
gettext.py(439):                 nelangs.append(nelang)
gettext.py(437):         for nelang in _expand_lang(lang):
gettext.py(438):             if nelang not in nelangs:
gettext.py(439):                 nelangs.append(nelang)
gettext.py(437):         for nelang in _expand_lang(lang):
gettext.py(436):     for lang in languages:
gettext.py(437):         for nelang in _expand_lang(lang):
 --- modulename: gettext, funcname: _expand_lang
gettext.py(131):     from locale import normalize
gettext.py(132):     locale = normalize(locale)
 --- modulename: locale, funcname: normalize
locale.py(364):     if isinstance(localename, _unicode):
locale.py(366):     fullname = localename.translate(_ascii_lower_map)
locale.py(367):     if ':' in fullname:
locale.py(370):     if '.' in fullname:
locale.py(374):         langname = fullname
locale.py(375):         encoding = ''
locale.py(378):     norm_encoding = encoding.replace('-', '')
locale.py(379):     norm_encoding = norm_encoding.replace('_', '')
locale.py(380):     lookup_name = langname + '.' + encoding
locale.py(381):     code = locale_alias.get(lookup_name, None)
locale.py(382):     if code is not None:
locale.py(387):     code = locale_alias.get(langname, None)
locale.py(388):     if code is not None:
locale.py(390):         if '.' in code:
locale.py(393):             langname = code
locale.py(394):             defenc = ''
locale.py(395):         if encoding:
locale.py(405):             encoding = defenc
locale.py(407):         if encoding:
locale.py(410):             return langname
gettext.py(133):     COMPONENT_CODESET   = 1 << 0
gettext.py(134):     COMPONENT_TERRITORY = 1 << 1
gettext.py(135):     COMPONENT_MODIFIER  = 1 << 2
gettext.py(137):     mask = 0
gettext.py(138):     pos = locale.find('@')
gettext.py(139):     if pos >= 0:
gettext.py(144):         modifier = ''
gettext.py(145):     pos = locale.find('.')
gettext.py(146):     if pos >= 0:
gettext.py(151):         codeset = ''
gettext.py(152):     pos = locale.find('_')
gettext.py(153):     if pos >= 0:
gettext.py(158):         territory = ''
gettext.py(159):     language = locale
gettext.py(160):     ret = []
gettext.py(161):     for i in range(mask+1):
gettext.py(162):         if not (i & ~mask):  # if all components for this combo exist ...
gettext.py(163):             val = language
gettext.py(164):             if i & COMPONENT_TERRITORY: val += territory
gettext.py(165):             if i & COMPONENT_CODESET:   val += codeset
gettext.py(166):             if i & COMPONENT_MODIFIER:  val += modifier
gettext.py(167):             ret.append(val)
gettext.py(161):     for i in range(mask+1):
gettext.py(168):     ret.reverse()
gettext.py(169):     return ret
gettext.py(438):             if nelang not in nelangs:
gettext.py(439):                 nelangs.append(nelang)
gettext.py(437):         for nelang in _expand_lang(lang):
gettext.py(436):     for lang in languages:
gettext.py(441):     if all:
gettext.py(442):         result = []
gettext.py(445):     for lang in nelangs:
gettext.py(446):         if lang == 'C':
gettext.py(448):         mofile = os.path.join(localedir, lang, 'LC_MESSAGES', '%s.mo' % domain)
 --- modulename: posixpath, funcname: join
posixpath.py(73):     path = a
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(81):     return path
gettext.py(449):         if os.path.exists(mofile):
 --- modulename: genericpath, funcname: exists
genericpath.py(17):     try:
genericpath.py(18):         os.stat(path)
genericpath.py(19):     except os.error:
genericpath.py(20):         return False
gettext.py(445):     for lang in nelangs:
gettext.py(446):         if lang == 'C':
gettext.py(448):         mofile = os.path.join(localedir, lang, 'LC_MESSAGES', '%s.mo' % domain)
 --- modulename: posixpath, funcname: join
posixpath.py(73):     path = a
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(81):     return path
gettext.py(449):         if os.path.exists(mofile):
 --- modulename: genericpath, funcname: exists
genericpath.py(17):     try:
genericpath.py(18):         os.stat(path)
genericpath.py(19):     except os.error:
genericpath.py(20):         return False
gettext.py(445):     for lang in nelangs:
gettext.py(446):         if lang == 'C':
gettext.py(448):         mofile = os.path.join(localedir, lang, 'LC_MESSAGES', '%s.mo' % domain)
 --- modulename: posixpath, funcname: join
posixpath.py(73):     path = a
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(81):     return path
gettext.py(449):         if os.path.exists(mofile):
 --- modulename: genericpath, funcname: exists
genericpath.py(17):     try:
genericpath.py(18):         os.stat(path)
genericpath.py(19):     except os.error:
genericpath.py(20):         return False
gettext.py(445):     for lang in nelangs:
gettext.py(446):         if lang == 'C':
gettext.py(448):         mofile = os.path.join(localedir, lang, 'LC_MESSAGES', '%s.mo' % domain)
 --- modulename: posixpath, funcname: join
posixpath.py(73):     path = a
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(81):     return path
gettext.py(449):         if os.path.exists(mofile):
 --- modulename: genericpath, funcname: exists
genericpath.py(17):     try:
genericpath.py(18):         os.stat(path)
genericpath.py(19):     except os.error:
genericpath.py(20):         return False
gettext.py(445):     for lang in nelangs:
gettext.py(446):         if lang == 'C':
gettext.py(447):             break
gettext.py(454):     return result
gettext.py(466):     if not mofiles:
gettext.py(467):         if fallback:
gettext.py(469):         raise IOError(ENOENT, 'No translation file found for domain', domain)
gettext.py(531):     except IOError:
gettext.py(532):         return message
optparse.py(423): def check_builtin(option, opt, value):
optparse.py(431): def check_choice(option, opt, value):
optparse.py(442): NO_DEFAULT = ("NO", "DEFAULT")
optparse.py(445): class Option:
 --- modulename: optparse, funcname: Option
optparse.py(445): class Option:
optparse.py(463):     """
optparse.py(467):     ATTRS = ['action',
optparse.py(468):              'type',
optparse.py(469):              'dest',
optparse.py(470):              'default',
optparse.py(471):              'nargs',
optparse.py(472):              'const',
optparse.py(473):              'choices',
optparse.py(474):              'callback',
optparse.py(475):              'callback_args',
optparse.py(476):              'callback_kwargs',
optparse.py(477):              'help',
optparse.py(478):              'metavar']
optparse.py(491):                "version")
optparse.py(502):                      "count")
optparse.py(508):                      "callback")
optparse.py(513):                             "append")
optparse.py(517):                      "append_const")
optparse.py(521):     TYPES = ("string", "int", "long", "float", "complex", "choice")
optparse.py(539):     TYPE_CHECKER = { "int"    : check_builtin,
optparse.py(540):                      "long"   : check_builtin,
optparse.py(541):                      "float"  : check_builtin,
optparse.py(542):                      "complex": check_builtin,
optparse.py(543):                      "choice" : check_choice,
optparse.py(555):     CHECK_METHODS = None
optparse.py(560):     def __init__(self, *opts, **attrs):
optparse.py(579):     def _check_opt_strings(self, opts):
optparse.py(588):     def _set_opt_strings(self, opts):
optparse.py(609):     def _set_attrs(self, attrs):
optparse.py(629):     def _check_action(self):
optparse.py(635):     def _check_type(self):
optparse.py(665):     def _check_choice(self):
optparse.py(678):     def _check_dest(self):
optparse.py(693):     def _check_const(self):
optparse.py(699):     def _check_nargs(self):
optparse.py(708):     def _check_callback(self):
optparse.py(736):     CHECK_METHODS = [_check_action,
optparse.py(737):                      _check_type,
optparse.py(738):                      _check_choice,
optparse.py(739):                      _check_dest,
optparse.py(740):                      _check_const,
optparse.py(741):                      _check_nargs,
optparse.py(742):                      _check_callback]
optparse.py(747):     def __str__(self):
optparse.py(750):     __repr__ = _repr
optparse.py(752):     def takes_value(self):
optparse.py(755):     def get_opt_string(self):
optparse.py(764):     def check_value(self, opt, value):
optparse.py(771):     def convert_value(self, opt, value):
optparse.py(778):     def process(self, opt, value, values, parser):
optparse.py(790):     def take_action(self, action, dest, opt, value, values, parser):
optparse.py(823): SUPPRESS_HELP = "SUPPRESS"+"HELP"
optparse.py(824): SUPPRESS_USAGE = "SUPPRESS"+"USAGE"
optparse.py(826): try:
optparse.py(827):     basestring
optparse.py(832):     def isbasestring(x):
optparse.py(835): class Values:
 --- modulename: optparse, funcname: Values
optparse.py(835): class Values:
optparse.py(837):     def __init__(self, defaults=None):
optparse.py(842):     def __str__(self):
optparse.py(845):     __repr__ = _repr
optparse.py(847):     def __cmp__(self, other):
optparse.py(855):     def _update_careful(self, dict):
optparse.py(868):     def _update_loose(self, dict):
optparse.py(876):     def _update(self, dict, mode):
optparse.py(884):     def read_module(self, modname, mode="careful"):
optparse.py(889):     def read_file(self, filename, mode="careful"):
optparse.py(894):     def ensure_value(self, attr, value):
optparse.py(900): class OptionContainer:
 --- modulename: optparse, funcname: OptionContainer
optparse.py(900): class OptionContainer:
optparse.py(930):     """
optparse.py(932):     def __init__(self, option_class, conflict_handler, description):
optparse.py(943):     def _create_option_mappings(self):
optparse.py(952):     def _share_option_mappings(self, parser):
optparse.py(959):     def set_conflict_handler(self, handler):
optparse.py(964):     def set_description(self, description):
optparse.py(967):     def get_description(self):
optparse.py(971):     def destroy(self):
optparse.py(980):     def _check_conflict(self, option):
optparse.py(1007):     def add_option(self, *args, **kwargs):
optparse.py(1037):     def add_options(self, option_list):
optparse.py(1043):     def get_option(self, opt_str):
optparse.py(1047):     def has_option(self, opt_str):
optparse.py(1051):     def remove_option(self, opt_str):
optparse.py(1067):     def format_option_help(self, formatter):
optparse.py(1076):     def format_description(self, formatter):
optparse.py(1079):     def format_help(self, formatter):
optparse.py(1088): class OptionGroup (OptionContainer):
 --- modulename: optparse, funcname: OptionGroup
optparse.py(1088): class OptionGroup (OptionContainer):
optparse.py(1090):     def __init__(self, parser, title, description=None):
optparse.py(1096):     def _create_option_list(self):
optparse.py(1100):     def set_title(self, title):
optparse.py(1103):     def destroy(self):
optparse.py(1110):     def format_help(self, formatter):
optparse.py(1118): class OptionParser (OptionContainer):
 --- modulename: optparse, funcname: OptionParser
optparse.py(1118): class OptionParser (OptionContainer):
optparse.py(1186):     """
optparse.py(1188):     standard_option_list = []
optparse.py(1191):                  usage=None,
optparse.py(1192):                  option_list=None,
optparse.py(1193):                  option_class=Option,
optparse.py(1194):                  version=None,
optparse.py(1195):                  conflict_handler="error",
optparse.py(1196):                  description=None,
optparse.py(1197):                  formatter=None,
optparse.py(1198):                  add_help_option=True,
optparse.py(1199):                  prog=None,
optparse.py(1200):                  epilog=None):
optparse.py(1224):     def destroy(self):
optparse.py(1242):     def _create_option_list(self):
optparse.py(1247):     def _add_help_option(self):
optparse.py(1252):     def _add_version_option(self):
optparse.py(1257):     def _populate_option_list(self, option_list, add_help=True):
optparse.py(1267):     def _init_parsing_state(self):
optparse.py(1276):     def set_usage(self, usage):
optparse.py(1287):     def enable_interspersed_args(self):
optparse.py(1295):     def disable_interspersed_args(self):
optparse.py(1303):     def set_process_default_values(self, process):
optparse.py(1306):     def set_default(self, dest, value):
optparse.py(1309):     def set_defaults(self, **kwargs):
optparse.py(1312):     def _get_all_options(self):
optparse.py(1318):     def get_default_values(self):
optparse.py(1335):     def add_option_group(self, *args, **kwargs):
optparse.py(1351):     def get_option_group(self, opt_str):
optparse.py(1361):     def _get_args(self, args):
optparse.py(1367):     def parse_args(self, args=None, values=None):
optparse.py(1406):     def check_values(self, values, args):
optparse.py(1419):     def _process_args(self, largs, rargs, values):
optparse.py(1470):     def _match_long_opt(self, opt):
optparse.py(1479):     def _process_long_opt(self, rargs, values):
optparse.py(1516):     def _process_short_opts(self, rargs, values):
optparse.py(1558):     def get_prog_name(self):
optparse.py(1564):     def expand_prog_name(self, s):
optparse.py(1567):     def get_description(self):
optparse.py(1570):     def exit(self, status=0, msg=None):
optparse.py(1575):     def error(self, msg):
optparse.py(1585):     def get_usage(self):
optparse.py(1592):     def print_usage(self, file=None):
optparse.py(1604):     def get_version(self):
optparse.py(1610):     def print_version(self, file=None):
optparse.py(1621):     def format_option_help(self, formatter=None):
optparse.py(1638):     def format_epilog(self, formatter):
optparse.py(1641):     def format_help(self, formatter=None):
optparse.py(1654):     def _get_encoding(self, file):
optparse.py(1660):     def print_help(self, file=None):
optparse.py(1674): def _match_abbrev(s, wordmap):
optparse.py(1703): make_option = Option
pacman.py(471):   """
pacman.py(472):   parser = OptionParser(usageStr)
 --- modulename: optparse, funcname: __init__
optparse.py(1201):         OptionContainer.__init__(
optparse.py(1202):             self, option_class, conflict_handler, description)
 --- modulename: optparse, funcname: __init__
optparse.py(937):         self._create_option_list()
 --- modulename: optparse, funcname: _create_option_list
optparse.py(1243):         self.option_list = []
optparse.py(1244):         self.option_groups = []
optparse.py(1245):         self._create_option_mappings()
 --- modulename: optparse, funcname: _create_option_mappings
optparse.py(947):         self._short_opt = {}            # single letter -> Option instance
optparse.py(948):         self._long_opt = {}             # long option -> Option instance
optparse.py(949):         self.defaults = {}              # maps option dest -> default value
optparse.py(939):         self.option_class = option_class
optparse.py(940):         self.set_conflict_handler(conflict_handler)
 --- modulename: optparse, funcname: set_conflict_handler
optparse.py(960):         if handler not in ("error", "resolve"):
optparse.py(962):         self.conflict_handler = handler
optparse.py(941):         self.set_description(description)
 --- modulename: optparse, funcname: set_description
optparse.py(965):         self.description = description
optparse.py(1203):         self.set_usage(usage)
 --- modulename: optparse, funcname: set_usage
optparse.py(1277):         if usage is None:
optparse.py(1279):         elif usage is SUPPRESS_USAGE:
optparse.py(1282):         elif usage.lower().startswith("usage: "):
optparse.py(1285):             self.usage = usage
optparse.py(1204):         self.prog = prog
optparse.py(1205):         self.version = version
optparse.py(1206):         self.allow_interspersed_args = True
optparse.py(1207):         self.process_default_values = True
optparse.py(1208):         if formatter is None:
optparse.py(1209):             formatter = IndentedHelpFormatter()
 --- modulename: optparse, funcname: __init__
optparse.py(370):         HelpFormatter.__init__(
optparse.py(371):             self, indent_increment, max_help_position, width, short_first)
 --- modulename: optparse, funcname: __init__
optparse.py(205):         self.parser = None
optparse.py(206):         self.indent_increment = indent_increment
optparse.py(207):         self.help_position = self.max_help_position = max_help_position
optparse.py(208):         if width is None:
optparse.py(209):             try:
optparse.py(210):                 width = int(os.environ['COLUMNS'])
 --- modulename: UserDict, funcname: __getitem__
UserDict.py(19):         if key in self.data:
UserDict.py(21):         if hasattr(self.__class__, "__missing__"):
UserDict.py(23):         raise KeyError(key)
optparse.py(211):             except (KeyError, ValueError):
optparse.py(212):                 width = 80
optparse.py(213):             width -= 2
optparse.py(214):         self.width = width
optparse.py(215):         self.current_indent = 0
optparse.py(216):         self.level = 0
optparse.py(217):         self.help_width = None          # computed later
optparse.py(218):         self.short_first = short_first
optparse.py(219):         self.default_tag = "%default"
optparse.py(220):         self.option_strings = {}
optparse.py(221):         self._short_opt_fmt = "%s %s"
optparse.py(222):         self._long_opt_fmt = "%s=%s"
optparse.py(1210):         self.formatter = formatter
optparse.py(1211):         self.formatter.set_parser(self)
 --- modulename: optparse, funcname: set_parser
optparse.py(225):         self.parser = parser
optparse.py(1212):         self.epilog = epilog
optparse.py(1218):         self._populate_option_list(option_list,
optparse.py(1219):                                    add_help=add_help_option)
 --- modulename: optparse, funcname: _populate_option_list
optparse.py(1258):         if self.standard_option_list:
optparse.py(1260):         if option_list:
optparse.py(1262):         if self.version:
optparse.py(1264):         if add_help:
optparse.py(1265):             self._add_help_option()
 --- modulename: optparse, funcname: _add_help_option
optparse.py(1248):         self.add_option("-h", "--help",
optparse.py(1249):                         action="help",
optparse.py(1250):                         help=_("show this help message and exit"))
 --- modulename: gettext, funcname: gettext
gettext.py(566):     return dgettext(_current_domain, message)
 --- modulename: gettext, funcname: dgettext
gettext.py(528):     try:
gettext.py(529):         t = translation(domain, _localedirs.get(domain, None),
gettext.py(530):                         codeset=_localecodesets.get(domain))
 --- modulename: gettext, funcname: translation
gettext.py(463):     if class_ is None:
gettext.py(464):         class_ = GNUTranslations
gettext.py(465):     mofiles = find(domain, localedir, languages, all=1)
 --- modulename: gettext, funcname: find
gettext.py(423):     if localedir is None:
gettext.py(424):         localedir = _default_localedir
gettext.py(425):     if languages is None:
gettext.py(426):         languages = []
gettext.py(427):         for envar in ('LANGUAGE', 'LC_ALL', 'LC_MESSAGES', 'LANG'):
gettext.py(428):             val = os.environ.get(envar)
 --- modulename: UserDict, funcname: get
UserDict.py(59):         if key not in self:
 --- modulename: UserDict, funcname: __contains__
UserDict.py(71):         return key in self.data
UserDict.py(60):             return failobj
gettext.py(429):             if val:
gettext.py(427):         for envar in ('LANGUAGE', 'LC_ALL', 'LC_MESSAGES', 'LANG'):
gettext.py(428):             val = os.environ.get(envar)
 --- modulename: UserDict, funcname: get
UserDict.py(59):         if key not in self:
 --- modulename: UserDict, funcname: __contains__
UserDict.py(71):         return key in self.data
UserDict.py(60):             return failobj
gettext.py(429):             if val:
gettext.py(427):         for envar in ('LANGUAGE', 'LC_ALL', 'LC_MESSAGES', 'LANG'):
gettext.py(428):             val = os.environ.get(envar)
 --- modulename: UserDict, funcname: get
UserDict.py(59):         if key not in self:
 --- modulename: UserDict, funcname: __contains__
UserDict.py(71):         return key in self.data
UserDict.py(60):             return failobj
gettext.py(429):             if val:
gettext.py(427):         for envar in ('LANGUAGE', 'LC_ALL', 'LC_MESSAGES', 'LANG'):
gettext.py(428):             val = os.environ.get(envar)
 --- modulename: UserDict, funcname: get
UserDict.py(59):         if key not in self:
 --- modulename: UserDict, funcname: __contains__
UserDict.py(71):         return key in self.data
UserDict.py(61):         return self[key]
 --- modulename: UserDict, funcname: __getitem__
UserDict.py(19):         if key in self.data:
UserDict.py(20):             return self.data[key]
gettext.py(429):             if val:
gettext.py(430):                 languages = val.split(':')
gettext.py(431):                 break
gettext.py(432):         if 'C' not in languages:
gettext.py(433):             languages.append('C')
gettext.py(435):     nelangs = []
gettext.py(436):     for lang in languages:
gettext.py(437):         for nelang in _expand_lang(lang):
 --- modulename: gettext, funcname: _expand_lang
gettext.py(131):     from locale import normalize
gettext.py(132):     locale = normalize(locale)
 --- modulename: locale, funcname: normalize
locale.py(364):     if isinstance(localename, _unicode):
locale.py(366):     fullname = localename.translate(_ascii_lower_map)
locale.py(367):     if ':' in fullname:
locale.py(370):     if '.' in fullname:
locale.py(371):         langname, encoding = fullname.split('.')[:2]
locale.py(372):         fullname = langname + '.' + encoding
locale.py(378):     norm_encoding = encoding.replace('-', '')
locale.py(379):     norm_encoding = norm_encoding.replace('_', '')
locale.py(380):     lookup_name = langname + '.' + encoding
locale.py(381):     code = locale_alias.get(lookup_name, None)
locale.py(382):     if code is not None:
locale.py(387):     code = locale_alias.get(langname, None)
locale.py(388):     if code is not None:
locale.py(390):         if '.' in code:
locale.py(391):             langname, defenc = code.split('.')
locale.py(395):         if encoding:
locale.py(397):             norm_encoding = encodings.normalize_encoding(encoding)
 --- modulename: __init__, funcname: normalize_encoding
__init__.py(64):     if hasattr(__builtin__, "unicode") and isinstance(encoding, unicode):
__init__.py(69):     return '_'.join(encoding.translate(_norm_encoding_map).split())
locale.py(399):             norm_encoding = encodings.aliases.aliases.get(norm_encoding,
locale.py(400):                                                           norm_encoding)
locale.py(402):             encoding = locale_encoding_alias.get(norm_encoding,
locale.py(403):                                                  norm_encoding)
locale.py(407):         if encoding:
locale.py(408):             return langname + '.' + encoding
gettext.py(133):     COMPONENT_CODESET   = 1 << 0
gettext.py(134):     COMPONENT_TERRITORY = 1 << 1
gettext.py(135):     COMPONENT_MODIFIER  = 1 << 2
gettext.py(137):     mask = 0
gettext.py(138):     pos = locale.find('@')
gettext.py(139):     if pos >= 0:
gettext.py(144):         modifier = ''
gettext.py(145):     pos = locale.find('.')
gettext.py(146):     if pos >= 0:
gettext.py(147):         codeset = locale[pos:]
gettext.py(148):         locale = locale[:pos]
gettext.py(149):         mask |= COMPONENT_CODESET
gettext.py(152):     pos = locale.find('_')
gettext.py(153):     if pos >= 0:
gettext.py(154):         territory = locale[pos:]
gettext.py(155):         locale = locale[:pos]
gettext.py(156):         mask |= COMPONENT_TERRITORY
gettext.py(159):     language = locale
gettext.py(160):     ret = []
gettext.py(161):     for i in range(mask+1):
gettext.py(162):         if not (i & ~mask):  # if all components for this combo exist ...
gettext.py(163):             val = language
gettext.py(164):             if i & COMPONENT_TERRITORY: val += territory
gettext.py(165):             if i & COMPONENT_CODESET:   val += codeset
gettext.py(166):             if i & COMPONENT_MODIFIER:  val += modifier
gettext.py(167):             ret.append(val)
gettext.py(161):     for i in range(mask+1):
gettext.py(162):         if not (i & ~mask):  # if all components for this combo exist ...
gettext.py(163):             val = language
gettext.py(164):             if i & COMPONENT_TERRITORY: val += territory
gettext.py(165):             if i & COMPONENT_CODESET:   val += codeset
gettext.py(166):             if i & COMPONENT_MODIFIER:  val += modifier
gettext.py(167):             ret.append(val)
gettext.py(161):     for i in range(mask+1):
gettext.py(162):         if not (i & ~mask):  # if all components for this combo exist ...
gettext.py(163):             val = language
gettext.py(164):             if i & COMPONENT_TERRITORY: val += territory
gettext.py(165):             if i & COMPONENT_CODESET:   val += codeset
gettext.py(166):             if i & COMPONENT_MODIFIER:  val += modifier
gettext.py(167):             ret.append(val)
gettext.py(161):     for i in range(mask+1):
gettext.py(162):         if not (i & ~mask):  # if all components for this combo exist ...
gettext.py(163):             val = language
gettext.py(164):             if i & COMPONENT_TERRITORY: val += territory
gettext.py(165):             if i & COMPONENT_CODESET:   val += codeset
gettext.py(166):             if i & COMPONENT_MODIFIER:  val += modifier
gettext.py(167):             ret.append(val)
gettext.py(161):     for i in range(mask+1):
gettext.py(168):     ret.reverse()
gettext.py(169):     return ret
gettext.py(438):             if nelang not in nelangs:
gettext.py(439):                 nelangs.append(nelang)
gettext.py(437):         for nelang in _expand_lang(lang):
gettext.py(438):             if nelang not in nelangs:
gettext.py(439):                 nelangs.append(nelang)
gettext.py(437):         for nelang in _expand_lang(lang):
gettext.py(438):             if nelang not in nelangs:
gettext.py(439):                 nelangs.append(nelang)
gettext.py(437):         for nelang in _expand_lang(lang):
gettext.py(438):             if nelang not in nelangs:
gettext.py(439):                 nelangs.append(nelang)
gettext.py(437):         for nelang in _expand_lang(lang):
gettext.py(436):     for lang in languages:
gettext.py(437):         for nelang in _expand_lang(lang):
 --- modulename: gettext, funcname: _expand_lang
gettext.py(131):     from locale import normalize
gettext.py(132):     locale = normalize(locale)
 --- modulename: locale, funcname: normalize
locale.py(364):     if isinstance(localename, _unicode):
locale.py(366):     fullname = localename.translate(_ascii_lower_map)
locale.py(367):     if ':' in fullname:
locale.py(370):     if '.' in fullname:
locale.py(374):         langname = fullname
locale.py(375):         encoding = ''
locale.py(378):     norm_encoding = encoding.replace('-', '')
locale.py(379):     norm_encoding = norm_encoding.replace('_', '')
locale.py(380):     lookup_name = langname + '.' + encoding
locale.py(381):     code = locale_alias.get(lookup_name, None)
locale.py(382):     if code is not None:
locale.py(387):     code = locale_alias.get(langname, None)
locale.py(388):     if code is not None:
locale.py(390):         if '.' in code:
locale.py(393):             langname = code
locale.py(394):             defenc = ''
locale.py(395):         if encoding:
locale.py(405):             encoding = defenc
locale.py(407):         if encoding:
locale.py(410):             return langname
gettext.py(133):     COMPONENT_CODESET   = 1 << 0
gettext.py(134):     COMPONENT_TERRITORY = 1 << 1
gettext.py(135):     COMPONENT_MODIFIER  = 1 << 2
gettext.py(137):     mask = 0
gettext.py(138):     pos = locale.find('@')
gettext.py(139):     if pos >= 0:
gettext.py(144):         modifier = ''
gettext.py(145):     pos = locale.find('.')
gettext.py(146):     if pos >= 0:
gettext.py(151):         codeset = ''
gettext.py(152):     pos = locale.find('_')
gettext.py(153):     if pos >= 0:
gettext.py(158):         territory = ''
gettext.py(159):     language = locale
gettext.py(160):     ret = []
gettext.py(161):     for i in range(mask+1):
gettext.py(162):         if not (i & ~mask):  # if all components for this combo exist ...
gettext.py(163):             val = language
gettext.py(164):             if i & COMPONENT_TERRITORY: val += territory
gettext.py(165):             if i & COMPONENT_CODESET:   val += codeset
gettext.py(166):             if i & COMPONENT_MODIFIER:  val += modifier
gettext.py(167):             ret.append(val)
gettext.py(161):     for i in range(mask+1):
gettext.py(168):     ret.reverse()
gettext.py(169):     return ret
gettext.py(438):             if nelang not in nelangs:
gettext.py(439):                 nelangs.append(nelang)
gettext.py(437):         for nelang in _expand_lang(lang):
gettext.py(436):     for lang in languages:
gettext.py(441):     if all:
gettext.py(442):         result = []
gettext.py(445):     for lang in nelangs:
gettext.py(446):         if lang == 'C':
gettext.py(448):         mofile = os.path.join(localedir, lang, 'LC_MESSAGES', '%s.mo' % domain)
 --- modulename: posixpath, funcname: join
posixpath.py(73):     path = a
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(81):     return path
gettext.py(449):         if os.path.exists(mofile):
 --- modulename: genericpath, funcname: exists
genericpath.py(17):     try:
genericpath.py(18):         os.stat(path)
genericpath.py(19):     except os.error:
genericpath.py(20):         return False
gettext.py(445):     for lang in nelangs:
gettext.py(446):         if lang == 'C':
gettext.py(448):         mofile = os.path.join(localedir, lang, 'LC_MESSAGES', '%s.mo' % domain)
 --- modulename: posixpath, funcname: join
posixpath.py(73):     path = a
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(81):     return path
gettext.py(449):         if os.path.exists(mofile):
 --- modulename: genericpath, funcname: exists
genericpath.py(17):     try:
genericpath.py(18):         os.stat(path)
genericpath.py(19):     except os.error:
genericpath.py(20):         return False
gettext.py(445):     for lang in nelangs:
gettext.py(446):         if lang == 'C':
gettext.py(448):         mofile = os.path.join(localedir, lang, 'LC_MESSAGES', '%s.mo' % domain)
 --- modulename: posixpath, funcname: join
posixpath.py(73):     path = a
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(81):     return path
gettext.py(449):         if os.path.exists(mofile):
 --- modulename: genericpath, funcname: exists
genericpath.py(17):     try:
genericpath.py(18):         os.stat(path)
genericpath.py(19):     except os.error:
genericpath.py(20):         return False
gettext.py(445):     for lang in nelangs:
gettext.py(446):         if lang == 'C':
gettext.py(448):         mofile = os.path.join(localedir, lang, 'LC_MESSAGES', '%s.mo' % domain)
 --- modulename: posixpath, funcname: join
posixpath.py(73):     path = a
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(81):     return path
gettext.py(449):         if os.path.exists(mofile):
 --- modulename: genericpath, funcname: exists
genericpath.py(17):     try:
genericpath.py(18):         os.stat(path)
genericpath.py(19):     except os.error:
genericpath.py(20):         return False
gettext.py(445):     for lang in nelangs:
gettext.py(446):         if lang == 'C':
gettext.py(447):             break
gettext.py(454):     return result
gettext.py(466):     if not mofiles:
gettext.py(467):         if fallback:
gettext.py(469):         raise IOError(ENOENT, 'No translation file found for domain', domain)
gettext.py(531):     except IOError:
gettext.py(532):         return message
 --- modulename: optparse, funcname: add_option
optparse.py(1011):         if type(args[0]) in types.StringTypes:
optparse.py(1012):             option = self.option_class(*args, **kwargs)
 --- modulename: optparse, funcname: __init__
optparse.py(563):         self._short_opts = []
optparse.py(564):         self._long_opts = []
optparse.py(565):         opts = self._check_opt_strings(opts)
 --- modulename: optparse, funcname: _check_opt_strings
optparse.py(583):         opts = filter(None, opts)
optparse.py(584):         if not opts:
optparse.py(586):         return opts
optparse.py(566):         self._set_opt_strings(opts)
 --- modulename: optparse, funcname: _set_opt_strings
optparse.py(589):         for opt in opts:
optparse.py(590):             if len(opt) < 2:
optparse.py(594):             elif len(opt) == 2:
optparse.py(595):                 if not (opt[0] == "-" and opt[1] != "-"):
optparse.py(600):                 self._short_opts.append(opt)
optparse.py(589):         for opt in opts:
optparse.py(590):             if len(opt) < 2:
optparse.py(594):             elif len(opt) == 2:
optparse.py(602):                 if not (opt[0:2] == "--" and opt[2] != "-"):
optparse.py(607):                 self._long_opts.append(opt)
optparse.py(589):         for opt in opts:
optparse.py(569):         self._set_attrs(attrs)
 --- modulename: optparse, funcname: _set_attrs
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(616):                     setattr(self, attr, NO_DEFAULT)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(619):         if attrs:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_action
optparse.py(630):         if self.action is None:
optparse.py(632):         elif self.action not in self.ACTIONS:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_type
optparse.py(636):         if self.type is None:
optparse.py(637):             if self.action in self.ALWAYS_TYPED_ACTIONS:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_choice
optparse.py(666):         if self.type == "choice":
optparse.py(674):         elif self.choices is not None:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_dest
optparse.py(681):         takes_value = (self.action in self.STORE_ACTIONS or
optparse.py(682):                        self.type is not None)
optparse.py(683):         if self.dest is None and takes_value:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_const
optparse.py(694):         if self.action not in self.CONST_ACTIONS and self.const is not None:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_nargs
optparse.py(700):         if self.action in self.TYPED_ACTIONS:
optparse.py(703):         elif self.nargs is not None:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_callback
optparse.py(709):         if self.action == "callback":
optparse.py(724):             if self.callback is not None:
optparse.py(728):             if self.callback_args is not None:
optparse.py(731):             if self.callback_kwargs is not None:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(1020):         self._check_conflict(option)
 --- modulename: optparse, funcname: _check_conflict
optparse.py(981):         conflict_opts = []
optparse.py(982):         for opt in option._short_opts:
optparse.py(983):             if opt in self._short_opt:
optparse.py(982):         for opt in option._short_opts:
optparse.py(985):         for opt in option._long_opts:
optparse.py(986):             if opt in self._long_opt:
optparse.py(985):         for opt in option._long_opts:
optparse.py(989):         if conflict_opts:
optparse.py(1022):         self.option_list.append(option)
optparse.py(1023):         option.container = self
optparse.py(1024):         for opt in option._short_opts:
optparse.py(1025):             self._short_opt[opt] = option
optparse.py(1024):         for opt in option._short_opts:
optparse.py(1026):         for opt in option._long_opts:
optparse.py(1027):             self._long_opt[opt] = option
optparse.py(1026):         for opt in option._long_opts:
optparse.py(1029):         if option.dest is not None:     # option has a dest, we need a default
optparse.py(1035):         return option
optparse.py(1221):         self._init_parsing_state()
 --- modulename: optparse, funcname: _init_parsing_state
optparse.py(1269):         self.rargs = None
optparse.py(1270):         self.largs = None
optparse.py(1271):         self.values = None
pacman.py(474):   parser.add_option('-n', '--numGames', dest='numGames', type='int',
pacman.py(475):                     help=default('the number of GAMES to play'), metavar='GAMES', default=1)
 --- modulename: pacman, funcname: default
pacman.py(445):   return str + ' [Default: %default]'
 --- modulename: optparse, funcname: add_option
optparse.py(1011):         if type(args[0]) in types.StringTypes:
optparse.py(1012):             option = self.option_class(*args, **kwargs)
 --- modulename: optparse, funcname: __init__
optparse.py(563):         self._short_opts = []
optparse.py(564):         self._long_opts = []
optparse.py(565):         opts = self._check_opt_strings(opts)
 --- modulename: optparse, funcname: _check_opt_strings
optparse.py(583):         opts = filter(None, opts)
optparse.py(584):         if not opts:
optparse.py(586):         return opts
optparse.py(566):         self._set_opt_strings(opts)
 --- modulename: optparse, funcname: _set_opt_strings
optparse.py(589):         for opt in opts:
optparse.py(590):             if len(opt) < 2:
optparse.py(594):             elif len(opt) == 2:
optparse.py(595):                 if not (opt[0] == "-" and opt[1] != "-"):
optparse.py(600):                 self._short_opts.append(opt)
optparse.py(589):         for opt in opts:
optparse.py(590):             if len(opt) < 2:
optparse.py(594):             elif len(opt) == 2:
optparse.py(602):                 if not (opt[0:2] == "--" and opt[2] != "-"):
optparse.py(607):                 self._long_opts.append(opt)
optparse.py(589):         for opt in opts:
optparse.py(569):         self._set_attrs(attrs)
 --- modulename: optparse, funcname: _set_attrs
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(619):         if attrs:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_action
optparse.py(630):         if self.action is None:
optparse.py(631):             self.action = "store"
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_type
optparse.py(636):         if self.type is None:
optparse.py(650):             import __builtin__
optparse.py(651):             if ( type(self.type) is types.TypeType or
optparse.py(652):                  (hasattr(self.type, "__name__") and
optparse.py(656):             if self.type == "str":
optparse.py(659):             if self.type not in self.TYPES:
optparse.py(661):             if self.action not in self.TYPED_ACTIONS:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_choice
optparse.py(666):         if self.type == "choice":
optparse.py(674):         elif self.choices is not None:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_dest
optparse.py(681):         takes_value = (self.action in self.STORE_ACTIONS or
optparse.py(683):         if self.dest is None and takes_value:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_const
optparse.py(694):         if self.action not in self.CONST_ACTIONS and self.const is not None:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_nargs
optparse.py(700):         if self.action in self.TYPED_ACTIONS:
optparse.py(701):             if self.nargs is None:
optparse.py(702):                 self.nargs = 1
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_callback
optparse.py(709):         if self.action == "callback":
optparse.py(724):             if self.callback is not None:
optparse.py(728):             if self.callback_args is not None:
optparse.py(731):             if self.callback_kwargs is not None:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(1020):         self._check_conflict(option)
 --- modulename: optparse, funcname: _check_conflict
optparse.py(981):         conflict_opts = []
optparse.py(982):         for opt in option._short_opts:
optparse.py(983):             if opt in self._short_opt:
optparse.py(982):         for opt in option._short_opts:
optparse.py(985):         for opt in option._long_opts:
optparse.py(986):             if opt in self._long_opt:
optparse.py(985):         for opt in option._long_opts:
optparse.py(989):         if conflict_opts:
optparse.py(1022):         self.option_list.append(option)
optparse.py(1023):         option.container = self
optparse.py(1024):         for opt in option._short_opts:
optparse.py(1025):             self._short_opt[opt] = option
optparse.py(1024):         for opt in option._short_opts:
optparse.py(1026):         for opt in option._long_opts:
optparse.py(1027):             self._long_opt[opt] = option
optparse.py(1026):         for opt in option._long_opts:
optparse.py(1029):         if option.dest is not None:     # option has a dest, we need a default
optparse.py(1030):             if option.default is not NO_DEFAULT:
optparse.py(1031):                 self.defaults[option.dest] = option.default
optparse.py(1035):         return option
pacman.py(476):   parser.add_option('-l', '--layout', dest='layout',
pacman.py(477):                     help=default('the LAYOUT_FILE from which to load the map layout'),
 --- modulename: pacman, funcname: default
pacman.py(445):   return str + ' [Default: %default]'
pacman.py(478):                     metavar='LAYOUT_FILE', default='mediumClassic')
 --- modulename: optparse, funcname: add_option
optparse.py(1011):         if type(args[0]) in types.StringTypes:
optparse.py(1012):             option = self.option_class(*args, **kwargs)
 --- modulename: optparse, funcname: __init__
optparse.py(563):         self._short_opts = []
optparse.py(564):         self._long_opts = []
optparse.py(565):         opts = self._check_opt_strings(opts)
 --- modulename: optparse, funcname: _check_opt_strings
optparse.py(583):         opts = filter(None, opts)
optparse.py(584):         if not opts:
optparse.py(586):         return opts
optparse.py(566):         self._set_opt_strings(opts)
 --- modulename: optparse, funcname: _set_opt_strings
optparse.py(589):         for opt in opts:
optparse.py(590):             if len(opt) < 2:
optparse.py(594):             elif len(opt) == 2:
optparse.py(595):                 if not (opt[0] == "-" and opt[1] != "-"):
optparse.py(600):                 self._short_opts.append(opt)
optparse.py(589):         for opt in opts:
optparse.py(590):             if len(opt) < 2:
optparse.py(594):             elif len(opt) == 2:
optparse.py(602):                 if not (opt[0:2] == "--" and opt[2] != "-"):
optparse.py(607):                 self._long_opts.append(opt)
optparse.py(589):         for opt in opts:
optparse.py(569):         self._set_attrs(attrs)
 --- modulename: optparse, funcname: _set_attrs
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(619):         if attrs:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_action
optparse.py(630):         if self.action is None:
optparse.py(631):             self.action = "store"
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_type
optparse.py(636):         if self.type is None:
optparse.py(637):             if self.action in self.ALWAYS_TYPED_ACTIONS:
optparse.py(638):                 if self.choices is not None:
optparse.py(643):                     self.type = "string"
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_choice
optparse.py(666):         if self.type == "choice":
optparse.py(674):         elif self.choices is not None:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_dest
optparse.py(681):         takes_value = (self.action in self.STORE_ACTIONS or
optparse.py(683):         if self.dest is None and takes_value:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_const
optparse.py(694):         if self.action not in self.CONST_ACTIONS and self.const is not None:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_nargs
optparse.py(700):         if self.action in self.TYPED_ACTIONS:
optparse.py(701):             if self.nargs is None:
optparse.py(702):                 self.nargs = 1
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_callback
optparse.py(709):         if self.action == "callback":
optparse.py(724):             if self.callback is not None:
optparse.py(728):             if self.callback_args is not None:
optparse.py(731):             if self.callback_kwargs is not None:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(1020):         self._check_conflict(option)
 --- modulename: optparse, funcname: _check_conflict
optparse.py(981):         conflict_opts = []
optparse.py(982):         for opt in option._short_opts:
optparse.py(983):             if opt in self._short_opt:
optparse.py(982):         for opt in option._short_opts:
optparse.py(985):         for opt in option._long_opts:
optparse.py(986):             if opt in self._long_opt:
optparse.py(985):         for opt in option._long_opts:
optparse.py(989):         if conflict_opts:
optparse.py(1022):         self.option_list.append(option)
optparse.py(1023):         option.container = self
optparse.py(1024):         for opt in option._short_opts:
optparse.py(1025):             self._short_opt[opt] = option
optparse.py(1024):         for opt in option._short_opts:
optparse.py(1026):         for opt in option._long_opts:
optparse.py(1027):             self._long_opt[opt] = option
optparse.py(1026):         for opt in option._long_opts:
optparse.py(1029):         if option.dest is not None:     # option has a dest, we need a default
optparse.py(1030):             if option.default is not NO_DEFAULT:
optparse.py(1031):                 self.defaults[option.dest] = option.default
optparse.py(1035):         return option
pacman.py(479):   parser.add_option('-p', '--pacman', dest='pacman',
pacman.py(480):                     help=default('the agent TYPE in the pacmanAgents module to use'),
 --- modulename: pacman, funcname: default
pacman.py(445):   return str + ' [Default: %default]'
pacman.py(481):                     metavar='TYPE', default='KeyboardAgent')
 --- modulename: optparse, funcname: add_option
optparse.py(1011):         if type(args[0]) in types.StringTypes:
optparse.py(1012):             option = self.option_class(*args, **kwargs)
 --- modulename: optparse, funcname: __init__
optparse.py(563):         self._short_opts = []
optparse.py(564):         self._long_opts = []
optparse.py(565):         opts = self._check_opt_strings(opts)
 --- modulename: optparse, funcname: _check_opt_strings
optparse.py(583):         opts = filter(None, opts)
optparse.py(584):         if not opts:
optparse.py(586):         return opts
optparse.py(566):         self._set_opt_strings(opts)
 --- modulename: optparse, funcname: _set_opt_strings
optparse.py(589):         for opt in opts:
optparse.py(590):             if len(opt) < 2:
optparse.py(594):             elif len(opt) == 2:
optparse.py(595):                 if not (opt[0] == "-" and opt[1] != "-"):
optparse.py(600):                 self._short_opts.append(opt)
optparse.py(589):         for opt in opts:
optparse.py(590):             if len(opt) < 2:
optparse.py(594):             elif len(opt) == 2:
optparse.py(602):                 if not (opt[0:2] == "--" and opt[2] != "-"):
optparse.py(607):                 self._long_opts.append(opt)
optparse.py(589):         for opt in opts:
optparse.py(569):         self._set_attrs(attrs)
 --- modulename: optparse, funcname: _set_attrs
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(619):         if attrs:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_action
optparse.py(630):         if self.action is None:
optparse.py(631):             self.action = "store"
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_type
optparse.py(636):         if self.type is None:
optparse.py(637):             if self.action in self.ALWAYS_TYPED_ACTIONS:
optparse.py(638):                 if self.choices is not None:
optparse.py(643):                     self.type = "string"
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_choice
optparse.py(666):         if self.type == "choice":
optparse.py(674):         elif self.choices is not None:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_dest
optparse.py(681):         takes_value = (self.action in self.STORE_ACTIONS or
optparse.py(683):         if self.dest is None and takes_value:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_const
optparse.py(694):         if self.action not in self.CONST_ACTIONS and self.const is not None:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_nargs
optparse.py(700):         if self.action in self.TYPED_ACTIONS:
optparse.py(701):             if self.nargs is None:
optparse.py(702):                 self.nargs = 1
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_callback
optparse.py(709):         if self.action == "callback":
optparse.py(724):             if self.callback is not None:
optparse.py(728):             if self.callback_args is not None:
optparse.py(731):             if self.callback_kwargs is not None:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(1020):         self._check_conflict(option)
 --- modulename: optparse, funcname: _check_conflict
optparse.py(981):         conflict_opts = []
optparse.py(982):         for opt in option._short_opts:
optparse.py(983):             if opt in self._short_opt:
optparse.py(982):         for opt in option._short_opts:
optparse.py(985):         for opt in option._long_opts:
optparse.py(986):             if opt in self._long_opt:
optparse.py(985):         for opt in option._long_opts:
optparse.py(989):         if conflict_opts:
optparse.py(1022):         self.option_list.append(option)
optparse.py(1023):         option.container = self
optparse.py(1024):         for opt in option._short_opts:
optparse.py(1025):             self._short_opt[opt] = option
optparse.py(1024):         for opt in option._short_opts:
optparse.py(1026):         for opt in option._long_opts:
optparse.py(1027):             self._long_opt[opt] = option
optparse.py(1026):         for opt in option._long_opts:
optparse.py(1029):         if option.dest is not None:     # option has a dest, we need a default
optparse.py(1030):             if option.default is not NO_DEFAULT:
optparse.py(1031):                 self.defaults[option.dest] = option.default
optparse.py(1035):         return option
pacman.py(482):   parser.add_option('-t', '--textGraphics', action='store_true', dest='textGraphics',
pacman.py(483):                     help='Display output as text only', default=False)
 --- modulename: optparse, funcname: add_option
optparse.py(1011):         if type(args[0]) in types.StringTypes:
optparse.py(1012):             option = self.option_class(*args, **kwargs)
 --- modulename: optparse, funcname: __init__
optparse.py(563):         self._short_opts = []
optparse.py(564):         self._long_opts = []
optparse.py(565):         opts = self._check_opt_strings(opts)
 --- modulename: optparse, funcname: _check_opt_strings
optparse.py(583):         opts = filter(None, opts)
optparse.py(584):         if not opts:
optparse.py(586):         return opts
optparse.py(566):         self._set_opt_strings(opts)
 --- modulename: optparse, funcname: _set_opt_strings
optparse.py(589):         for opt in opts:
optparse.py(590):             if len(opt) < 2:
optparse.py(594):             elif len(opt) == 2:
optparse.py(595):                 if not (opt[0] == "-" and opt[1] != "-"):
optparse.py(600):                 self._short_opts.append(opt)
optparse.py(589):         for opt in opts:
optparse.py(590):             if len(opt) < 2:
optparse.py(594):             elif len(opt) == 2:
optparse.py(602):                 if not (opt[0:2] == "--" and opt[2] != "-"):
optparse.py(607):                 self._long_opts.append(opt)
optparse.py(589):         for opt in opts:
optparse.py(569):         self._set_attrs(attrs)
 --- modulename: optparse, funcname: _set_attrs
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(619):         if attrs:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_action
optparse.py(630):         if self.action is None:
optparse.py(632):         elif self.action not in self.ACTIONS:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_type
optparse.py(636):         if self.type is None:
optparse.py(637):             if self.action in self.ALWAYS_TYPED_ACTIONS:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_choice
optparse.py(666):         if self.type == "choice":
optparse.py(674):         elif self.choices is not None:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_dest
optparse.py(681):         takes_value = (self.action in self.STORE_ACTIONS or
optparse.py(683):         if self.dest is None and takes_value:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_const
optparse.py(694):         if self.action not in self.CONST_ACTIONS and self.const is not None:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_nargs
optparse.py(700):         if self.action in self.TYPED_ACTIONS:
optparse.py(703):         elif self.nargs is not None:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_callback
optparse.py(709):         if self.action == "callback":
optparse.py(724):             if self.callback is not None:
optparse.py(728):             if self.callback_args is not None:
optparse.py(731):             if self.callback_kwargs is not None:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(1020):         self._check_conflict(option)
 --- modulename: optparse, funcname: _check_conflict
optparse.py(981):         conflict_opts = []
optparse.py(982):         for opt in option._short_opts:
optparse.py(983):             if opt in self._short_opt:
optparse.py(982):         for opt in option._short_opts:
optparse.py(985):         for opt in option._long_opts:
optparse.py(986):             if opt in self._long_opt:
optparse.py(985):         for opt in option._long_opts:
optparse.py(989):         if conflict_opts:
optparse.py(1022):         self.option_list.append(option)
optparse.py(1023):         option.container = self
optparse.py(1024):         for opt in option._short_opts:
optparse.py(1025):             self._short_opt[opt] = option
optparse.py(1024):         for opt in option._short_opts:
optparse.py(1026):         for opt in option._long_opts:
optparse.py(1027):             self._long_opt[opt] = option
optparse.py(1026):         for opt in option._long_opts:
optparse.py(1029):         if option.dest is not None:     # option has a dest, we need a default
optparse.py(1030):             if option.default is not NO_DEFAULT:
optparse.py(1031):                 self.defaults[option.dest] = option.default
optparse.py(1035):         return option
pacman.py(484):   parser.add_option('-q', '--quietTextGraphics', action='store_true', dest='quietGraphics',
pacman.py(485):                     help='Generate minimal output and no graphics', default=False)
 --- modulename: optparse, funcname: add_option
optparse.py(1011):         if type(args[0]) in types.StringTypes:
optparse.py(1012):             option = self.option_class(*args, **kwargs)
 --- modulename: optparse, funcname: __init__
optparse.py(563):         self._short_opts = []
optparse.py(564):         self._long_opts = []
optparse.py(565):         opts = self._check_opt_strings(opts)
 --- modulename: optparse, funcname: _check_opt_strings
optparse.py(583):         opts = filter(None, opts)
optparse.py(584):         if not opts:
optparse.py(586):         return opts
optparse.py(566):         self._set_opt_strings(opts)
 --- modulename: optparse, funcname: _set_opt_strings
optparse.py(589):         for opt in opts:
optparse.py(590):             if len(opt) < 2:
optparse.py(594):             elif len(opt) == 2:
optparse.py(595):                 if not (opt[0] == "-" and opt[1] != "-"):
optparse.py(600):                 self._short_opts.append(opt)
optparse.py(589):         for opt in opts:
optparse.py(590):             if len(opt) < 2:
optparse.py(594):             elif len(opt) == 2:
optparse.py(602):                 if not (opt[0:2] == "--" and opt[2] != "-"):
optparse.py(607):                 self._long_opts.append(opt)
optparse.py(589):         for opt in opts:
optparse.py(569):         self._set_attrs(attrs)
 --- modulename: optparse, funcname: _set_attrs
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(619):         if attrs:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_action
optparse.py(630):         if self.action is None:
optparse.py(632):         elif self.action not in self.ACTIONS:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_type
optparse.py(636):         if self.type is None:
optparse.py(637):             if self.action in self.ALWAYS_TYPED_ACTIONS:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_choice
optparse.py(666):         if self.type == "choice":
optparse.py(674):         elif self.choices is not None:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_dest
optparse.py(681):         takes_value = (self.action in self.STORE_ACTIONS or
optparse.py(683):         if self.dest is None and takes_value:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_const
optparse.py(694):         if self.action not in self.CONST_ACTIONS and self.const is not None:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_nargs
optparse.py(700):         if self.action in self.TYPED_ACTIONS:
optparse.py(703):         elif self.nargs is not None:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_callback
optparse.py(709):         if self.action == "callback":
optparse.py(724):             if self.callback is not None:
optparse.py(728):             if self.callback_args is not None:
optparse.py(731):             if self.callback_kwargs is not None:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(1020):         self._check_conflict(option)
 --- modulename: optparse, funcname: _check_conflict
optparse.py(981):         conflict_opts = []
optparse.py(982):         for opt in option._short_opts:
optparse.py(983):             if opt in self._short_opt:
optparse.py(982):         for opt in option._short_opts:
optparse.py(985):         for opt in option._long_opts:
optparse.py(986):             if opt in self._long_opt:
optparse.py(985):         for opt in option._long_opts:
optparse.py(989):         if conflict_opts:
optparse.py(1022):         self.option_list.append(option)
optparse.py(1023):         option.container = self
optparse.py(1024):         for opt in option._short_opts:
optparse.py(1025):             self._short_opt[opt] = option
optparse.py(1024):         for opt in option._short_opts:
optparse.py(1026):         for opt in option._long_opts:
optparse.py(1027):             self._long_opt[opt] = option
optparse.py(1026):         for opt in option._long_opts:
optparse.py(1029):         if option.dest is not None:     # option has a dest, we need a default
optparse.py(1030):             if option.default is not NO_DEFAULT:
optparse.py(1031):                 self.defaults[option.dest] = option.default
optparse.py(1035):         return option
pacman.py(486):   parser.add_option('-g', '--ghosts', dest='ghost',
pacman.py(487):                     help=default('the ghost agent TYPE in the ghostAgents module to use'),
 --- modulename: pacman, funcname: default
pacman.py(445):   return str + ' [Default: %default]'
pacman.py(488):                     metavar = 'TYPE', default='RandomGhost')
 --- modulename: optparse, funcname: add_option
optparse.py(1011):         if type(args[0]) in types.StringTypes:
optparse.py(1012):             option = self.option_class(*args, **kwargs)
 --- modulename: optparse, funcname: __init__
optparse.py(563):         self._short_opts = []
optparse.py(564):         self._long_opts = []
optparse.py(565):         opts = self._check_opt_strings(opts)
 --- modulename: optparse, funcname: _check_opt_strings
optparse.py(583):         opts = filter(None, opts)
optparse.py(584):         if not opts:
optparse.py(586):         return opts
optparse.py(566):         self._set_opt_strings(opts)
 --- modulename: optparse, funcname: _set_opt_strings
optparse.py(589):         for opt in opts:
optparse.py(590):             if len(opt) < 2:
optparse.py(594):             elif len(opt) == 2:
optparse.py(595):                 if not (opt[0] == "-" and opt[1] != "-"):
optparse.py(600):                 self._short_opts.append(opt)
optparse.py(589):         for opt in opts:
optparse.py(590):             if len(opt) < 2:
optparse.py(594):             elif len(opt) == 2:
optparse.py(602):                 if not (opt[0:2] == "--" and opt[2] != "-"):
optparse.py(607):                 self._long_opts.append(opt)
optparse.py(589):         for opt in opts:
optparse.py(569):         self._set_attrs(attrs)
 --- modulename: optparse, funcname: _set_attrs
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(619):         if attrs:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_action
optparse.py(630):         if self.action is None:
optparse.py(631):             self.action = "store"
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_type
optparse.py(636):         if self.type is None:
optparse.py(637):             if self.action in self.ALWAYS_TYPED_ACTIONS:
optparse.py(638):                 if self.choices is not None:
optparse.py(643):                     self.type = "string"
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_choice
optparse.py(666):         if self.type == "choice":
optparse.py(674):         elif self.choices is not None:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_dest
optparse.py(681):         takes_value = (self.action in self.STORE_ACTIONS or
optparse.py(683):         if self.dest is None and takes_value:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_const
optparse.py(694):         if self.action not in self.CONST_ACTIONS and self.const is not None:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_nargs
optparse.py(700):         if self.action in self.TYPED_ACTIONS:
optparse.py(701):             if self.nargs is None:
optparse.py(702):                 self.nargs = 1
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_callback
optparse.py(709):         if self.action == "callback":
optparse.py(724):             if self.callback is not None:
optparse.py(728):             if self.callback_args is not None:
optparse.py(731):             if self.callback_kwargs is not None:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(1020):         self._check_conflict(option)
 --- modulename: optparse, funcname: _check_conflict
optparse.py(981):         conflict_opts = []
optparse.py(982):         for opt in option._short_opts:
optparse.py(983):             if opt in self._short_opt:
optparse.py(982):         for opt in option._short_opts:
optparse.py(985):         for opt in option._long_opts:
optparse.py(986):             if opt in self._long_opt:
optparse.py(985):         for opt in option._long_opts:
optparse.py(989):         if conflict_opts:
optparse.py(1022):         self.option_list.append(option)
optparse.py(1023):         option.container = self
optparse.py(1024):         for opt in option._short_opts:
optparse.py(1025):             self._short_opt[opt] = option
optparse.py(1024):         for opt in option._short_opts:
optparse.py(1026):         for opt in option._long_opts:
optparse.py(1027):             self._long_opt[opt] = option
optparse.py(1026):         for opt in option._long_opts:
optparse.py(1029):         if option.dest is not None:     # option has a dest, we need a default
optparse.py(1030):             if option.default is not NO_DEFAULT:
optparse.py(1031):                 self.defaults[option.dest] = option.default
optparse.py(1035):         return option
pacman.py(489):   parser.add_option('-k', '--numghosts', type='int', dest='numGhosts',
pacman.py(490):                     help=default('The maximum number of ghosts to use'), default=4)
 --- modulename: pacman, funcname: default
pacman.py(445):   return str + ' [Default: %default]'
 --- modulename: optparse, funcname: add_option
optparse.py(1011):         if type(args[0]) in types.StringTypes:
optparse.py(1012):             option = self.option_class(*args, **kwargs)
 --- modulename: optparse, funcname: __init__
optparse.py(563):         self._short_opts = []
optparse.py(564):         self._long_opts = []
optparse.py(565):         opts = self._check_opt_strings(opts)
 --- modulename: optparse, funcname: _check_opt_strings
optparse.py(583):         opts = filter(None, opts)
optparse.py(584):         if not opts:
optparse.py(586):         return opts
optparse.py(566):         self._set_opt_strings(opts)
 --- modulename: optparse, funcname: _set_opt_strings
optparse.py(589):         for opt in opts:
optparse.py(590):             if len(opt) < 2:
optparse.py(594):             elif len(opt) == 2:
optparse.py(595):                 if not (opt[0] == "-" and opt[1] != "-"):
optparse.py(600):                 self._short_opts.append(opt)
optparse.py(589):         for opt in opts:
optparse.py(590):             if len(opt) < 2:
optparse.py(594):             elif len(opt) == 2:
optparse.py(602):                 if not (opt[0:2] == "--" and opt[2] != "-"):
optparse.py(607):                 self._long_opts.append(opt)
optparse.py(589):         for opt in opts:
optparse.py(569):         self._set_attrs(attrs)
 --- modulename: optparse, funcname: _set_attrs
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(619):         if attrs:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_action
optparse.py(630):         if self.action is None:
optparse.py(631):             self.action = "store"
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_type
optparse.py(636):         if self.type is None:
optparse.py(650):             import __builtin__
optparse.py(651):             if ( type(self.type) is types.TypeType or
optparse.py(652):                  (hasattr(self.type, "__name__") and
optparse.py(656):             if self.type == "str":
optparse.py(659):             if self.type not in self.TYPES:
optparse.py(661):             if self.action not in self.TYPED_ACTIONS:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_choice
optparse.py(666):         if self.type == "choice":
optparse.py(674):         elif self.choices is not None:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_dest
optparse.py(681):         takes_value = (self.action in self.STORE_ACTIONS or
optparse.py(683):         if self.dest is None and takes_value:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_const
optparse.py(694):         if self.action not in self.CONST_ACTIONS and self.const is not None:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_nargs
optparse.py(700):         if self.action in self.TYPED_ACTIONS:
optparse.py(701):             if self.nargs is None:
optparse.py(702):                 self.nargs = 1
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_callback
optparse.py(709):         if self.action == "callback":
optparse.py(724):             if self.callback is not None:
optparse.py(728):             if self.callback_args is not None:
optparse.py(731):             if self.callback_kwargs is not None:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(1020):         self._check_conflict(option)
 --- modulename: optparse, funcname: _check_conflict
optparse.py(981):         conflict_opts = []
optparse.py(982):         for opt in option._short_opts:
optparse.py(983):             if opt in self._short_opt:
optparse.py(982):         for opt in option._short_opts:
optparse.py(985):         for opt in option._long_opts:
optparse.py(986):             if opt in self._long_opt:
optparse.py(985):         for opt in option._long_opts:
optparse.py(989):         if conflict_opts:
optparse.py(1022):         self.option_list.append(option)
optparse.py(1023):         option.container = self
optparse.py(1024):         for opt in option._short_opts:
optparse.py(1025):             self._short_opt[opt] = option
optparse.py(1024):         for opt in option._short_opts:
optparse.py(1026):         for opt in option._long_opts:
optparse.py(1027):             self._long_opt[opt] = option
optparse.py(1026):         for opt in option._long_opts:
optparse.py(1029):         if option.dest is not None:     # option has a dest, we need a default
optparse.py(1030):             if option.default is not NO_DEFAULT:
optparse.py(1031):                 self.defaults[option.dest] = option.default
optparse.py(1035):         return option
pacman.py(491):   parser.add_option('-z', '--zoom', type='float', dest='zoom',
pacman.py(492):                     help=default('Zoom the size of the graphics window'), default=1.0)
 --- modulename: pacman, funcname: default
pacman.py(445):   return str + ' [Default: %default]'
 --- modulename: optparse, funcname: add_option
optparse.py(1011):         if type(args[0]) in types.StringTypes:
optparse.py(1012):             option = self.option_class(*args, **kwargs)
 --- modulename: optparse, funcname: __init__
optparse.py(563):         self._short_opts = []
optparse.py(564):         self._long_opts = []
optparse.py(565):         opts = self._check_opt_strings(opts)
 --- modulename: optparse, funcname: _check_opt_strings
optparse.py(583):         opts = filter(None, opts)
optparse.py(584):         if not opts:
optparse.py(586):         return opts
optparse.py(566):         self._set_opt_strings(opts)
 --- modulename: optparse, funcname: _set_opt_strings
optparse.py(589):         for opt in opts:
optparse.py(590):             if len(opt) < 2:
optparse.py(594):             elif len(opt) == 2:
optparse.py(595):                 if not (opt[0] == "-" and opt[1] != "-"):
optparse.py(600):                 self._short_opts.append(opt)
optparse.py(589):         for opt in opts:
optparse.py(590):             if len(opt) < 2:
optparse.py(594):             elif len(opt) == 2:
optparse.py(602):                 if not (opt[0:2] == "--" and opt[2] != "-"):
optparse.py(607):                 self._long_opts.append(opt)
optparse.py(589):         for opt in opts:
optparse.py(569):         self._set_attrs(attrs)
 --- modulename: optparse, funcname: _set_attrs
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(619):         if attrs:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_action
optparse.py(630):         if self.action is None:
optparse.py(631):             self.action = "store"
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_type
optparse.py(636):         if self.type is None:
optparse.py(650):             import __builtin__
optparse.py(651):             if ( type(self.type) is types.TypeType or
optparse.py(652):                  (hasattr(self.type, "__name__") and
optparse.py(656):             if self.type == "str":
optparse.py(659):             if self.type not in self.TYPES:
optparse.py(661):             if self.action not in self.TYPED_ACTIONS:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_choice
optparse.py(666):         if self.type == "choice":
optparse.py(674):         elif self.choices is not None:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_dest
optparse.py(681):         takes_value = (self.action in self.STORE_ACTIONS or
optparse.py(683):         if self.dest is None and takes_value:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_const
optparse.py(694):         if self.action not in self.CONST_ACTIONS and self.const is not None:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_nargs
optparse.py(700):         if self.action in self.TYPED_ACTIONS:
optparse.py(701):             if self.nargs is None:
optparse.py(702):                 self.nargs = 1
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_callback
optparse.py(709):         if self.action == "callback":
optparse.py(724):             if self.callback is not None:
optparse.py(728):             if self.callback_args is not None:
optparse.py(731):             if self.callback_kwargs is not None:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(1020):         self._check_conflict(option)
 --- modulename: optparse, funcname: _check_conflict
optparse.py(981):         conflict_opts = []
optparse.py(982):         for opt in option._short_opts:
optparse.py(983):             if opt in self._short_opt:
optparse.py(982):         for opt in option._short_opts:
optparse.py(985):         for opt in option._long_opts:
optparse.py(986):             if opt in self._long_opt:
optparse.py(985):         for opt in option._long_opts:
optparse.py(989):         if conflict_opts:
optparse.py(1022):         self.option_list.append(option)
optparse.py(1023):         option.container = self
optparse.py(1024):         for opt in option._short_opts:
optparse.py(1025):             self._short_opt[opt] = option
optparse.py(1024):         for opt in option._short_opts:
optparse.py(1026):         for opt in option._long_opts:
optparse.py(1027):             self._long_opt[opt] = option
optparse.py(1026):         for opt in option._long_opts:
optparse.py(1029):         if option.dest is not None:     # option has a dest, we need a default
optparse.py(1030):             if option.default is not NO_DEFAULT:
optparse.py(1031):                 self.defaults[option.dest] = option.default
optparse.py(1035):         return option
pacman.py(493):   parser.add_option('-f', '--fixRandomSeed', action='store_true', dest='fixRandomSeed',
pacman.py(494):                     help='Fixes the random seed to always play the same game', default=False)
 --- modulename: optparse, funcname: add_option
optparse.py(1011):         if type(args[0]) in types.StringTypes:
optparse.py(1012):             option = self.option_class(*args, **kwargs)
 --- modulename: optparse, funcname: __init__
optparse.py(563):         self._short_opts = []
optparse.py(564):         self._long_opts = []
optparse.py(565):         opts = self._check_opt_strings(opts)
 --- modulename: optparse, funcname: _check_opt_strings
optparse.py(583):         opts = filter(None, opts)
optparse.py(584):         if not opts:
optparse.py(586):         return opts
optparse.py(566):         self._set_opt_strings(opts)
 --- modulename: optparse, funcname: _set_opt_strings
optparse.py(589):         for opt in opts:
optparse.py(590):             if len(opt) < 2:
optparse.py(594):             elif len(opt) == 2:
optparse.py(595):                 if not (opt[0] == "-" and opt[1] != "-"):
optparse.py(600):                 self._short_opts.append(opt)
optparse.py(589):         for opt in opts:
optparse.py(590):             if len(opt) < 2:
optparse.py(594):             elif len(opt) == 2:
optparse.py(602):                 if not (opt[0:2] == "--" and opt[2] != "-"):
optparse.py(607):                 self._long_opts.append(opt)
optparse.py(589):         for opt in opts:
optparse.py(569):         self._set_attrs(attrs)
 --- modulename: optparse, funcname: _set_attrs
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(619):         if attrs:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_action
optparse.py(630):         if self.action is None:
optparse.py(632):         elif self.action not in self.ACTIONS:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_type
optparse.py(636):         if self.type is None:
optparse.py(637):             if self.action in self.ALWAYS_TYPED_ACTIONS:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_choice
optparse.py(666):         if self.type == "choice":
optparse.py(674):         elif self.choices is not None:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_dest
optparse.py(681):         takes_value = (self.action in self.STORE_ACTIONS or
optparse.py(683):         if self.dest is None and takes_value:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_const
optparse.py(694):         if self.action not in self.CONST_ACTIONS and self.const is not None:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_nargs
optparse.py(700):         if self.action in self.TYPED_ACTIONS:
optparse.py(703):         elif self.nargs is not None:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_callback
optparse.py(709):         if self.action == "callback":
optparse.py(724):             if self.callback is not None:
optparse.py(728):             if self.callback_args is not None:
optparse.py(731):             if self.callback_kwargs is not None:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(1020):         self._check_conflict(option)
 --- modulename: optparse, funcname: _check_conflict
optparse.py(981):         conflict_opts = []
optparse.py(982):         for opt in option._short_opts:
optparse.py(983):             if opt in self._short_opt:
optparse.py(982):         for opt in option._short_opts:
optparse.py(985):         for opt in option._long_opts:
optparse.py(986):             if opt in self._long_opt:
optparse.py(985):         for opt in option._long_opts:
optparse.py(989):         if conflict_opts:
optparse.py(1022):         self.option_list.append(option)
optparse.py(1023):         option.container = self
optparse.py(1024):         for opt in option._short_opts:
optparse.py(1025):             self._short_opt[opt] = option
optparse.py(1024):         for opt in option._short_opts:
optparse.py(1026):         for opt in option._long_opts:
optparse.py(1027):             self._long_opt[opt] = option
optparse.py(1026):         for opt in option._long_opts:
optparse.py(1029):         if option.dest is not None:     # option has a dest, we need a default
optparse.py(1030):             if option.default is not NO_DEFAULT:
optparse.py(1031):                 self.defaults[option.dest] = option.default
optparse.py(1035):         return option
pacman.py(495):   parser.add_option('-r', '--recordActions', action='store_true', dest='record',
pacman.py(496):                     help='Writes game histories to a file (named by the time they were played)', default=False)
 --- modulename: optparse, funcname: add_option
optparse.py(1011):         if type(args[0]) in types.StringTypes:
optparse.py(1012):             option = self.option_class(*args, **kwargs)
 --- modulename: optparse, funcname: __init__
optparse.py(563):         self._short_opts = []
optparse.py(564):         self._long_opts = []
optparse.py(565):         opts = self._check_opt_strings(opts)
 --- modulename: optparse, funcname: _check_opt_strings
optparse.py(583):         opts = filter(None, opts)
optparse.py(584):         if not opts:
optparse.py(586):         return opts
optparse.py(566):         self._set_opt_strings(opts)
 --- modulename: optparse, funcname: _set_opt_strings
optparse.py(589):         for opt in opts:
optparse.py(590):             if len(opt) < 2:
optparse.py(594):             elif len(opt) == 2:
optparse.py(595):                 if not (opt[0] == "-" and opt[1] != "-"):
optparse.py(600):                 self._short_opts.append(opt)
optparse.py(589):         for opt in opts:
optparse.py(590):             if len(opt) < 2:
optparse.py(594):             elif len(opt) == 2:
optparse.py(602):                 if not (opt[0:2] == "--" and opt[2] != "-"):
optparse.py(607):                 self._long_opts.append(opt)
optparse.py(589):         for opt in opts:
optparse.py(569):         self._set_attrs(attrs)
 --- modulename: optparse, funcname: _set_attrs
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(619):         if attrs:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_action
optparse.py(630):         if self.action is None:
optparse.py(632):         elif self.action not in self.ACTIONS:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_type
optparse.py(636):         if self.type is None:
optparse.py(637):             if self.action in self.ALWAYS_TYPED_ACTIONS:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_choice
optparse.py(666):         if self.type == "choice":
optparse.py(674):         elif self.choices is not None:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_dest
optparse.py(681):         takes_value = (self.action in self.STORE_ACTIONS or
optparse.py(683):         if self.dest is None and takes_value:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_const
optparse.py(694):         if self.action not in self.CONST_ACTIONS and self.const is not None:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_nargs
optparse.py(700):         if self.action in self.TYPED_ACTIONS:
optparse.py(703):         elif self.nargs is not None:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_callback
optparse.py(709):         if self.action == "callback":
optparse.py(724):             if self.callback is not None:
optparse.py(728):             if self.callback_args is not None:
optparse.py(731):             if self.callback_kwargs is not None:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(1020):         self._check_conflict(option)
 --- modulename: optparse, funcname: _check_conflict
optparse.py(981):         conflict_opts = []
optparse.py(982):         for opt in option._short_opts:
optparse.py(983):             if opt in self._short_opt:
optparse.py(982):         for opt in option._short_opts:
optparse.py(985):         for opt in option._long_opts:
optparse.py(986):             if opt in self._long_opt:
optparse.py(985):         for opt in option._long_opts:
optparse.py(989):         if conflict_opts:
optparse.py(1022):         self.option_list.append(option)
optparse.py(1023):         option.container = self
optparse.py(1024):         for opt in option._short_opts:
optparse.py(1025):             self._short_opt[opt] = option
optparse.py(1024):         for opt in option._short_opts:
optparse.py(1026):         for opt in option._long_opts:
optparse.py(1027):             self._long_opt[opt] = option
optparse.py(1026):         for opt in option._long_opts:
optparse.py(1029):         if option.dest is not None:     # option has a dest, we need a default
optparse.py(1030):             if option.default is not NO_DEFAULT:
optparse.py(1031):                 self.defaults[option.dest] = option.default
optparse.py(1035):         return option
pacman.py(497):   parser.add_option('--replay', dest='gameToReplay',
pacman.py(498):                     help='A recorded game file (pickle) to replay', default=None)
 --- modulename: optparse, funcname: add_option
optparse.py(1011):         if type(args[0]) in types.StringTypes:
optparse.py(1012):             option = self.option_class(*args, **kwargs)
 --- modulename: optparse, funcname: __init__
optparse.py(563):         self._short_opts = []
optparse.py(564):         self._long_opts = []
optparse.py(565):         opts = self._check_opt_strings(opts)
 --- modulename: optparse, funcname: _check_opt_strings
optparse.py(583):         opts = filter(None, opts)
optparse.py(584):         if not opts:
optparse.py(586):         return opts
optparse.py(566):         self._set_opt_strings(opts)
 --- modulename: optparse, funcname: _set_opt_strings
optparse.py(589):         for opt in opts:
optparse.py(590):             if len(opt) < 2:
optparse.py(594):             elif len(opt) == 2:
optparse.py(602):                 if not (opt[0:2] == "--" and opt[2] != "-"):
optparse.py(607):                 self._long_opts.append(opt)
optparse.py(589):         for opt in opts:
optparse.py(569):         self._set_attrs(attrs)
 --- modulename: optparse, funcname: _set_attrs
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(619):         if attrs:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_action
optparse.py(630):         if self.action is None:
optparse.py(631):             self.action = "store"
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_type
optparse.py(636):         if self.type is None:
optparse.py(637):             if self.action in self.ALWAYS_TYPED_ACTIONS:
optparse.py(638):                 if self.choices is not None:
optparse.py(643):                     self.type = "string"
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_choice
optparse.py(666):         if self.type == "choice":
optparse.py(674):         elif self.choices is not None:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_dest
optparse.py(681):         takes_value = (self.action in self.STORE_ACTIONS or
optparse.py(683):         if self.dest is None and takes_value:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_const
optparse.py(694):         if self.action not in self.CONST_ACTIONS and self.const is not None:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_nargs
optparse.py(700):         if self.action in self.TYPED_ACTIONS:
optparse.py(701):             if self.nargs is None:
optparse.py(702):                 self.nargs = 1
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_callback
optparse.py(709):         if self.action == "callback":
optparse.py(724):             if self.callback is not None:
optparse.py(728):             if self.callback_args is not None:
optparse.py(731):             if self.callback_kwargs is not None:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(1020):         self._check_conflict(option)
 --- modulename: optparse, funcname: _check_conflict
optparse.py(981):         conflict_opts = []
optparse.py(982):         for opt in option._short_opts:
optparse.py(985):         for opt in option._long_opts:
optparse.py(986):             if opt in self._long_opt:
optparse.py(985):         for opt in option._long_opts:
optparse.py(989):         if conflict_opts:
optparse.py(1022):         self.option_list.append(option)
optparse.py(1023):         option.container = self
optparse.py(1024):         for opt in option._short_opts:
optparse.py(1026):         for opt in option._long_opts:
optparse.py(1027):             self._long_opt[opt] = option
optparse.py(1026):         for opt in option._long_opts:
optparse.py(1029):         if option.dest is not None:     # option has a dest, we need a default
optparse.py(1030):             if option.default is not NO_DEFAULT:
optparse.py(1031):                 self.defaults[option.dest] = option.default
optparse.py(1035):         return option
pacman.py(499):   parser.add_option('-a','--agentArgs',dest='agentArgs',
pacman.py(500):                     help='Comma separated values sent to agent. e.g. "opt1=val1,opt2,opt3=val3"')
 --- modulename: optparse, funcname: add_option
optparse.py(1011):         if type(args[0]) in types.StringTypes:
optparse.py(1012):             option = self.option_class(*args, **kwargs)
 --- modulename: optparse, funcname: __init__
optparse.py(563):         self._short_opts = []
optparse.py(564):         self._long_opts = []
optparse.py(565):         opts = self._check_opt_strings(opts)
 --- modulename: optparse, funcname: _check_opt_strings
optparse.py(583):         opts = filter(None, opts)
optparse.py(584):         if not opts:
optparse.py(586):         return opts
optparse.py(566):         self._set_opt_strings(opts)
 --- modulename: optparse, funcname: _set_opt_strings
optparse.py(589):         for opt in opts:
optparse.py(590):             if len(opt) < 2:
optparse.py(594):             elif len(opt) == 2:
optparse.py(595):                 if not (opt[0] == "-" and opt[1] != "-"):
optparse.py(600):                 self._short_opts.append(opt)
optparse.py(589):         for opt in opts:
optparse.py(590):             if len(opt) < 2:
optparse.py(594):             elif len(opt) == 2:
optparse.py(602):                 if not (opt[0:2] == "--" and opt[2] != "-"):
optparse.py(607):                 self._long_opts.append(opt)
optparse.py(589):         for opt in opts:
optparse.py(569):         self._set_attrs(attrs)
 --- modulename: optparse, funcname: _set_attrs
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(616):                     setattr(self, attr, NO_DEFAULT)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(619):         if attrs:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_action
optparse.py(630):         if self.action is None:
optparse.py(631):             self.action = "store"
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_type
optparse.py(636):         if self.type is None:
optparse.py(637):             if self.action in self.ALWAYS_TYPED_ACTIONS:
optparse.py(638):                 if self.choices is not None:
optparse.py(643):                     self.type = "string"
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_choice
optparse.py(666):         if self.type == "choice":
optparse.py(674):         elif self.choices is not None:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_dest
optparse.py(681):         takes_value = (self.action in self.STORE_ACTIONS or
optparse.py(683):         if self.dest is None and takes_value:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_const
optparse.py(694):         if self.action not in self.CONST_ACTIONS and self.const is not None:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_nargs
optparse.py(700):         if self.action in self.TYPED_ACTIONS:
optparse.py(701):             if self.nargs is None:
optparse.py(702):                 self.nargs = 1
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_callback
optparse.py(709):         if self.action == "callback":
optparse.py(724):             if self.callback is not None:
optparse.py(728):             if self.callback_args is not None:
optparse.py(731):             if self.callback_kwargs is not None:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(1020):         self._check_conflict(option)
 --- modulename: optparse, funcname: _check_conflict
optparse.py(981):         conflict_opts = []
optparse.py(982):         for opt in option._short_opts:
optparse.py(983):             if opt in self._short_opt:
optparse.py(982):         for opt in option._short_opts:
optparse.py(985):         for opt in option._long_opts:
optparse.py(986):             if opt in self._long_opt:
optparse.py(985):         for opt in option._long_opts:
optparse.py(989):         if conflict_opts:
optparse.py(1022):         self.option_list.append(option)
optparse.py(1023):         option.container = self
optparse.py(1024):         for opt in option._short_opts:
optparse.py(1025):             self._short_opt[opt] = option
optparse.py(1024):         for opt in option._short_opts:
optparse.py(1026):         for opt in option._long_opts:
optparse.py(1027):             self._long_opt[opt] = option
optparse.py(1026):         for opt in option._long_opts:
optparse.py(1029):         if option.dest is not None:     # option has a dest, we need a default
optparse.py(1030):             if option.default is not NO_DEFAULT:
optparse.py(1032):             elif option.dest not in self.defaults:
optparse.py(1033):                 self.defaults[option.dest] = None
optparse.py(1035):         return option
pacman.py(501):   parser.add_option('-x', '--numTraining', dest='numTraining', type='int',
pacman.py(502):                     help=default('How many episodes are training (suppresses output)'), default=0)
 --- modulename: pacman, funcname: default
pacman.py(445):   return str + ' [Default: %default]'
 --- modulename: optparse, funcname: add_option
optparse.py(1011):         if type(args[0]) in types.StringTypes:
optparse.py(1012):             option = self.option_class(*args, **kwargs)
 --- modulename: optparse, funcname: __init__
optparse.py(563):         self._short_opts = []
optparse.py(564):         self._long_opts = []
optparse.py(565):         opts = self._check_opt_strings(opts)
 --- modulename: optparse, funcname: _check_opt_strings
optparse.py(583):         opts = filter(None, opts)
optparse.py(584):         if not opts:
optparse.py(586):         return opts
optparse.py(566):         self._set_opt_strings(opts)
 --- modulename: optparse, funcname: _set_opt_strings
optparse.py(589):         for opt in opts:
optparse.py(590):             if len(opt) < 2:
optparse.py(594):             elif len(opt) == 2:
optparse.py(595):                 if not (opt[0] == "-" and opt[1] != "-"):
optparse.py(600):                 self._short_opts.append(opt)
optparse.py(589):         for opt in opts:
optparse.py(590):             if len(opt) < 2:
optparse.py(594):             elif len(opt) == 2:
optparse.py(602):                 if not (opt[0:2] == "--" and opt[2] != "-"):
optparse.py(607):                 self._long_opts.append(opt)
optparse.py(589):         for opt in opts:
optparse.py(569):         self._set_attrs(attrs)
 --- modulename: optparse, funcname: _set_attrs
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(619):         if attrs:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_action
optparse.py(630):         if self.action is None:
optparse.py(631):             self.action = "store"
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_type
optparse.py(636):         if self.type is None:
optparse.py(650):             import __builtin__
optparse.py(651):             if ( type(self.type) is types.TypeType or
optparse.py(652):                  (hasattr(self.type, "__name__") and
optparse.py(656):             if self.type == "str":
optparse.py(659):             if self.type not in self.TYPES:
optparse.py(661):             if self.action not in self.TYPED_ACTIONS:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_choice
optparse.py(666):         if self.type == "choice":
optparse.py(674):         elif self.choices is not None:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_dest
optparse.py(681):         takes_value = (self.action in self.STORE_ACTIONS or
optparse.py(683):         if self.dest is None and takes_value:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_const
optparse.py(694):         if self.action not in self.CONST_ACTIONS and self.const is not None:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_nargs
optparse.py(700):         if self.action in self.TYPED_ACTIONS:
optparse.py(701):             if self.nargs is None:
optparse.py(702):                 self.nargs = 1
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_callback
optparse.py(709):         if self.action == "callback":
optparse.py(724):             if self.callback is not None:
optparse.py(728):             if self.callback_args is not None:
optparse.py(731):             if self.callback_kwargs is not None:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(1020):         self._check_conflict(option)
 --- modulename: optparse, funcname: _check_conflict
optparse.py(981):         conflict_opts = []
optparse.py(982):         for opt in option._short_opts:
optparse.py(983):             if opt in self._short_opt:
optparse.py(982):         for opt in option._short_opts:
optparse.py(985):         for opt in option._long_opts:
optparse.py(986):             if opt in self._long_opt:
optparse.py(985):         for opt in option._long_opts:
optparse.py(989):         if conflict_opts:
optparse.py(1022):         self.option_list.append(option)
optparse.py(1023):         option.container = self
optparse.py(1024):         for opt in option._short_opts:
optparse.py(1025):             self._short_opt[opt] = option
optparse.py(1024):         for opt in option._short_opts:
optparse.py(1026):         for opt in option._long_opts:
optparse.py(1027):             self._long_opt[opt] = option
optparse.py(1026):         for opt in option._long_opts:
optparse.py(1029):         if option.dest is not None:     # option has a dest, we need a default
optparse.py(1030):             if option.default is not NO_DEFAULT:
optparse.py(1031):                 self.defaults[option.dest] = option.default
optparse.py(1035):         return option
pacman.py(503):   parser.add_option('--frameTime', dest='frameTime', type='float',
pacman.py(504):                     help=default('Time to delay between frames; <0 means keyboard'), default=0.1)
 --- modulename: pacman, funcname: default
pacman.py(445):   return str + ' [Default: %default]'
 --- modulename: optparse, funcname: add_option
optparse.py(1011):         if type(args[0]) in types.StringTypes:
optparse.py(1012):             option = self.option_class(*args, **kwargs)
 --- modulename: optparse, funcname: __init__
optparse.py(563):         self._short_opts = []
optparse.py(564):         self._long_opts = []
optparse.py(565):         opts = self._check_opt_strings(opts)
 --- modulename: optparse, funcname: _check_opt_strings
optparse.py(583):         opts = filter(None, opts)
optparse.py(584):         if not opts:
optparse.py(586):         return opts
optparse.py(566):         self._set_opt_strings(opts)
 --- modulename: optparse, funcname: _set_opt_strings
optparse.py(589):         for opt in opts:
optparse.py(590):             if len(opt) < 2:
optparse.py(594):             elif len(opt) == 2:
optparse.py(602):                 if not (opt[0:2] == "--" and opt[2] != "-"):
optparse.py(607):                 self._long_opts.append(opt)
optparse.py(589):         for opt in opts:
optparse.py(569):         self._set_attrs(attrs)
 --- modulename: optparse, funcname: _set_attrs
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(619):         if attrs:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_action
optparse.py(630):         if self.action is None:
optparse.py(631):             self.action = "store"
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_type
optparse.py(636):         if self.type is None:
optparse.py(650):             import __builtin__
optparse.py(651):             if ( type(self.type) is types.TypeType or
optparse.py(652):                  (hasattr(self.type, "__name__") and
optparse.py(656):             if self.type == "str":
optparse.py(659):             if self.type not in self.TYPES:
optparse.py(661):             if self.action not in self.TYPED_ACTIONS:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_choice
optparse.py(666):         if self.type == "choice":
optparse.py(674):         elif self.choices is not None:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_dest
optparse.py(681):         takes_value = (self.action in self.STORE_ACTIONS or
optparse.py(683):         if self.dest is None and takes_value:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_const
optparse.py(694):         if self.action not in self.CONST_ACTIONS and self.const is not None:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_nargs
optparse.py(700):         if self.action in self.TYPED_ACTIONS:
optparse.py(701):             if self.nargs is None:
optparse.py(702):                 self.nargs = 1
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_callback
optparse.py(709):         if self.action == "callback":
optparse.py(724):             if self.callback is not None:
optparse.py(728):             if self.callback_args is not None:
optparse.py(731):             if self.callback_kwargs is not None:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(1020):         self._check_conflict(option)
 --- modulename: optparse, funcname: _check_conflict
optparse.py(981):         conflict_opts = []
optparse.py(982):         for opt in option._short_opts:
optparse.py(985):         for opt in option._long_opts:
optparse.py(986):             if opt in self._long_opt:
optparse.py(985):         for opt in option._long_opts:
optparse.py(989):         if conflict_opts:
optparse.py(1022):         self.option_list.append(option)
optparse.py(1023):         option.container = self
optparse.py(1024):         for opt in option._short_opts:
optparse.py(1026):         for opt in option._long_opts:
optparse.py(1027):             self._long_opt[opt] = option
optparse.py(1026):         for opt in option._long_opts:
optparse.py(1029):         if option.dest is not None:     # option has a dest, we need a default
optparse.py(1030):             if option.default is not NO_DEFAULT:
optparse.py(1031):                 self.defaults[option.dest] = option.default
optparse.py(1035):         return option
pacman.py(505):   parser.add_option('-c', '--catchExceptions', action='store_true', dest='catchExceptions', 
pacman.py(506):                     help='Turns on exception handling and timeouts during games', default=False)
 --- modulename: optparse, funcname: add_option
optparse.py(1011):         if type(args[0]) in types.StringTypes:
optparse.py(1012):             option = self.option_class(*args, **kwargs)
 --- modulename: optparse, funcname: __init__
optparse.py(563):         self._short_opts = []
optparse.py(564):         self._long_opts = []
optparse.py(565):         opts = self._check_opt_strings(opts)
 --- modulename: optparse, funcname: _check_opt_strings
optparse.py(583):         opts = filter(None, opts)
optparse.py(584):         if not opts:
optparse.py(586):         return opts
optparse.py(566):         self._set_opt_strings(opts)
 --- modulename: optparse, funcname: _set_opt_strings
optparse.py(589):         for opt in opts:
optparse.py(590):             if len(opt) < 2:
optparse.py(594):             elif len(opt) == 2:
optparse.py(595):                 if not (opt[0] == "-" and opt[1] != "-"):
optparse.py(600):                 self._short_opts.append(opt)
optparse.py(589):         for opt in opts:
optparse.py(590):             if len(opt) < 2:
optparse.py(594):             elif len(opt) == 2:
optparse.py(602):                 if not (opt[0:2] == "--" and opt[2] != "-"):
optparse.py(607):                 self._long_opts.append(opt)
optparse.py(589):         for opt in opts:
optparse.py(569):         self._set_attrs(attrs)
 --- modulename: optparse, funcname: _set_attrs
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(619):         if attrs:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_action
optparse.py(630):         if self.action is None:
optparse.py(632):         elif self.action not in self.ACTIONS:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_type
optparse.py(636):         if self.type is None:
optparse.py(637):             if self.action in self.ALWAYS_TYPED_ACTIONS:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_choice
optparse.py(666):         if self.type == "choice":
optparse.py(674):         elif self.choices is not None:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_dest
optparse.py(681):         takes_value = (self.action in self.STORE_ACTIONS or
optparse.py(683):         if self.dest is None and takes_value:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_const
optparse.py(694):         if self.action not in self.CONST_ACTIONS and self.const is not None:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_nargs
optparse.py(700):         if self.action in self.TYPED_ACTIONS:
optparse.py(703):         elif self.nargs is not None:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_callback
optparse.py(709):         if self.action == "callback":
optparse.py(724):             if self.callback is not None:
optparse.py(728):             if self.callback_args is not None:
optparse.py(731):             if self.callback_kwargs is not None:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(1020):         self._check_conflict(option)
 --- modulename: optparse, funcname: _check_conflict
optparse.py(981):         conflict_opts = []
optparse.py(982):         for opt in option._short_opts:
optparse.py(983):             if opt in self._short_opt:
optparse.py(982):         for opt in option._short_opts:
optparse.py(985):         for opt in option._long_opts:
optparse.py(986):             if opt in self._long_opt:
optparse.py(985):         for opt in option._long_opts:
optparse.py(989):         if conflict_opts:
optparse.py(1022):         self.option_list.append(option)
optparse.py(1023):         option.container = self
optparse.py(1024):         for opt in option._short_opts:
optparse.py(1025):             self._short_opt[opt] = option
optparse.py(1024):         for opt in option._short_opts:
optparse.py(1026):         for opt in option._long_opts:
optparse.py(1027):             self._long_opt[opt] = option
optparse.py(1026):         for opt in option._long_opts:
optparse.py(1029):         if option.dest is not None:     # option has a dest, we need a default
optparse.py(1030):             if option.default is not NO_DEFAULT:
optparse.py(1031):                 self.defaults[option.dest] = option.default
optparse.py(1035):         return option
pacman.py(507):   parser.add_option('--timeout', dest='timeout', type='int',
pacman.py(508):                     help=default('Maximum length of time an agent can spend computing in a single game'), default=30)
 --- modulename: pacman, funcname: default
pacman.py(445):   return str + ' [Default: %default]'
 --- modulename: optparse, funcname: add_option
optparse.py(1011):         if type(args[0]) in types.StringTypes:
optparse.py(1012):             option = self.option_class(*args, **kwargs)
 --- modulename: optparse, funcname: __init__
optparse.py(563):         self._short_opts = []
optparse.py(564):         self._long_opts = []
optparse.py(565):         opts = self._check_opt_strings(opts)
 --- modulename: optparse, funcname: _check_opt_strings
optparse.py(583):         opts = filter(None, opts)
optparse.py(584):         if not opts:
optparse.py(586):         return opts
optparse.py(566):         self._set_opt_strings(opts)
 --- modulename: optparse, funcname: _set_opt_strings
optparse.py(589):         for opt in opts:
optparse.py(590):             if len(opt) < 2:
optparse.py(594):             elif len(opt) == 2:
optparse.py(602):                 if not (opt[0:2] == "--" and opt[2] != "-"):
optparse.py(607):                 self._long_opts.append(opt)
optparse.py(589):         for opt in opts:
optparse.py(569):         self._set_attrs(attrs)
 --- modulename: optparse, funcname: _set_attrs
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(612):                 setattr(self, attr, attrs[attr])
optparse.py(613):                 del attrs[attr]
optparse.py(610):         for attr in self.ATTRS:
optparse.py(611):             if attr in attrs:
optparse.py(615):                 if attr == 'default':
optparse.py(618):                     setattr(self, attr, None)
optparse.py(610):         for attr in self.ATTRS:
optparse.py(619):         if attrs:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_action
optparse.py(630):         if self.action is None:
optparse.py(631):             self.action = "store"
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_type
optparse.py(636):         if self.type is None:
optparse.py(650):             import __builtin__
optparse.py(651):             if ( type(self.type) is types.TypeType or
optparse.py(652):                  (hasattr(self.type, "__name__") and
optparse.py(656):             if self.type == "str":
optparse.py(659):             if self.type not in self.TYPES:
optparse.py(661):             if self.action not in self.TYPED_ACTIONS:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_choice
optparse.py(666):         if self.type == "choice":
optparse.py(674):         elif self.choices is not None:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_dest
optparse.py(681):         takes_value = (self.action in self.STORE_ACTIONS or
optparse.py(683):         if self.dest is None and takes_value:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_const
optparse.py(694):         if self.action not in self.CONST_ACTIONS and self.const is not None:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_nargs
optparse.py(700):         if self.action in self.TYPED_ACTIONS:
optparse.py(701):             if self.nargs is None:
optparse.py(702):                 self.nargs = 1
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(577):             checker(self)
 --- modulename: optparse, funcname: _check_callback
optparse.py(709):         if self.action == "callback":
optparse.py(724):             if self.callback is not None:
optparse.py(728):             if self.callback_args is not None:
optparse.py(731):             if self.callback_kwargs is not None:
optparse.py(576):         for checker in self.CHECK_METHODS:
optparse.py(1020):         self._check_conflict(option)
 --- modulename: optparse, funcname: _check_conflict
optparse.py(981):         conflict_opts = []
optparse.py(982):         for opt in option._short_opts:
optparse.py(985):         for opt in option._long_opts:
optparse.py(986):             if opt in self._long_opt:
optparse.py(985):         for opt in option._long_opts:
optparse.py(989):         if conflict_opts:
optparse.py(1022):         self.option_list.append(option)
optparse.py(1023):         option.container = self
optparse.py(1024):         for opt in option._short_opts:
optparse.py(1026):         for opt in option._long_opts:
optparse.py(1027):             self._long_opt[opt] = option
optparse.py(1026):         for opt in option._long_opts:
optparse.py(1029):         if option.dest is not None:     # option has a dest, we need a default
optparse.py(1030):             if option.default is not NO_DEFAULT:
optparse.py(1031):                 self.defaults[option.dest] = option.default
optparse.py(1035):         return option
pacman.py(510):   options, otherjunk = parser.parse_args(argv)
 --- modulename: optparse, funcname: parse_args
optparse.py(1381):         rargs = self._get_args(args)
 --- modulename: optparse, funcname: _get_args
optparse.py(1362):         if args is None:
optparse.py(1365):             return args[:]              # don't modify caller's list
optparse.py(1382):         if values is None:
optparse.py(1383):             values = self.get_default_values()
 --- modulename: optparse, funcname: get_default_values
optparse.py(1319):         if not self.process_default_values:
optparse.py(1323):         defaults = self.defaults.copy()
optparse.py(1324):         for option in self._get_all_options():
 --- modulename: optparse, funcname: _get_all_options
optparse.py(1313):         options = self.option_list[:]
optparse.py(1314):         for group in self.option_groups:
optparse.py(1316):         return options
optparse.py(1325):             default = defaults.get(option.dest)
optparse.py(1326):             if isbasestring(default):
 --- modulename: optparse, funcname: isbasestring
optparse.py(833):         return isinstance(x, basestring)
optparse.py(1324):         for option in self._get_all_options():
optparse.py(1325):             default = defaults.get(option.dest)
optparse.py(1326):             if isbasestring(default):
 --- modulename: optparse, funcname: isbasestring
optparse.py(833):         return isinstance(x, basestring)
optparse.py(1324):         for option in self._get_all_options():
optparse.py(1325):             default = defaults.get(option.dest)
optparse.py(1326):             if isbasestring(default):
 --- modulename: optparse, funcname: isbasestring
optparse.py(833):         return isinstance(x, basestring)
optparse.py(1327):                 opt_str = option.get_opt_string()
 --- modulename: optparse, funcname: get_opt_string
optparse.py(756):         if self._long_opts:
optparse.py(757):             return self._long_opts[0]
optparse.py(1328):                 defaults[option.dest] = option.check_value(opt_str, default)
 --- modulename: optparse, funcname: check_value
optparse.py(765):         checker = self.TYPE_CHECKER.get(self.type)
optparse.py(766):         if checker is None:
optparse.py(767):             return value
optparse.py(1324):         for option in self._get_all_options():
optparse.py(1325):             default = defaults.get(option.dest)
optparse.py(1326):             if isbasestring(default):
 --- modulename: optparse, funcname: isbasestring
optparse.py(833):         return isinstance(x, basestring)
optparse.py(1327):                 opt_str = option.get_opt_string()
 --- modulename: optparse, funcname: get_opt_string
optparse.py(756):         if self._long_opts:
optparse.py(757):             return self._long_opts[0]
optparse.py(1328):                 defaults[option.dest] = option.check_value(opt_str, default)
 --- modulename: optparse, funcname: check_value
optparse.py(765):         checker = self.TYPE_CHECKER.get(self.type)
optparse.py(766):         if checker is None:
optparse.py(767):             return value
optparse.py(1324):         for option in self._get_all_options():
optparse.py(1325):             default = defaults.get(option.dest)
optparse.py(1326):             if isbasestring(default):
 --- modulename: optparse, funcname: isbasestring
optparse.py(833):         return isinstance(x, basestring)
optparse.py(1324):         for option in self._get_all_options():
optparse.py(1325):             default = defaults.get(option.dest)
optparse.py(1326):             if isbasestring(default):
 --- modulename: optparse, funcname: isbasestring
optparse.py(833):         return isinstance(x, basestring)
optparse.py(1324):         for option in self._get_all_options():
optparse.py(1325):             default = defaults.get(option.dest)
optparse.py(1326):             if isbasestring(default):
 --- modulename: optparse, funcname: isbasestring
optparse.py(833):         return isinstance(x, basestring)
optparse.py(1327):                 opt_str = option.get_opt_string()
 --- modulename: optparse, funcname: get_opt_string
optparse.py(756):         if self._long_opts:
optparse.py(757):             return self._long_opts[0]
optparse.py(1328):                 defaults[option.dest] = option.check_value(opt_str, default)
 --- modulename: optparse, funcname: check_value
optparse.py(765):         checker = self.TYPE_CHECKER.get(self.type)
optparse.py(766):         if checker is None:
optparse.py(767):             return value
optparse.py(1324):         for option in self._get_all_options():
optparse.py(1325):             default = defaults.get(option.dest)
optparse.py(1326):             if isbasestring(default):
 --- modulename: optparse, funcname: isbasestring
optparse.py(833):         return isinstance(x, basestring)
optparse.py(1324):         for option in self._get_all_options():
optparse.py(1325):             default = defaults.get(option.dest)
optparse.py(1326):             if isbasestring(default):
 --- modulename: optparse, funcname: isbasestring
optparse.py(833):         return isinstance(x, basestring)
optparse.py(1324):         for option in self._get_all_options():
optparse.py(1325):             default = defaults.get(option.dest)
optparse.py(1326):             if isbasestring(default):
 --- modulename: optparse, funcname: isbasestring
optparse.py(833):         return isinstance(x, basestring)
optparse.py(1324):         for option in self._get_all_options():
optparse.py(1325):             default = defaults.get(option.dest)
optparse.py(1326):             if isbasestring(default):
 --- modulename: optparse, funcname: isbasestring
optparse.py(833):         return isinstance(x, basestring)
optparse.py(1324):         for option in self._get_all_options():
optparse.py(1325):             default = defaults.get(option.dest)
optparse.py(1326):             if isbasestring(default):
 --- modulename: optparse, funcname: isbasestring
optparse.py(833):         return isinstance(x, basestring)
optparse.py(1324):         for option in self._get_all_options():
optparse.py(1325):             default = defaults.get(option.dest)
optparse.py(1326):             if isbasestring(default):
 --- modulename: optparse, funcname: isbasestring
optparse.py(833):         return isinstance(x, basestring)
optparse.py(1324):         for option in self._get_all_options():
optparse.py(1325):             default = defaults.get(option.dest)
optparse.py(1326):             if isbasestring(default):
 --- modulename: optparse, funcname: isbasestring
optparse.py(833):         return isinstance(x, basestring)
optparse.py(1324):         for option in self._get_all_options():
optparse.py(1325):             default = defaults.get(option.dest)
optparse.py(1326):             if isbasestring(default):
 --- modulename: optparse, funcname: isbasestring
optparse.py(833):         return isinstance(x, basestring)
optparse.py(1324):         for option in self._get_all_options():
optparse.py(1325):             default = defaults.get(option.dest)
optparse.py(1326):             if isbasestring(default):
 --- modulename: optparse, funcname: isbasestring
optparse.py(833):         return isinstance(x, basestring)
optparse.py(1324):         for option in self._get_all_options():
optparse.py(1325):             default = defaults.get(option.dest)
optparse.py(1326):             if isbasestring(default):
 --- modulename: optparse, funcname: isbasestring
optparse.py(833):         return isinstance(x, basestring)
optparse.py(1324):         for option in self._get_all_options():
optparse.py(1330):         return Values(defaults)
 --- modulename: optparse, funcname: __init__
optparse.py(838):         if defaults:
optparse.py(839):             for (attr, val) in defaults.items():
optparse.py(840):                 setattr(self, attr, val)
optparse.py(839):             for (attr, val) in defaults.items():
optparse.py(840):                 setattr(self, attr, val)
optparse.py(839):             for (attr, val) in defaults.items():
optparse.py(840):                 setattr(self, attr, val)
optparse.py(839):             for (attr, val) in defaults.items():
optparse.py(840):                 setattr(self, attr, val)
optparse.py(839):             for (attr, val) in defaults.items():
optparse.py(840):                 setattr(self, attr, val)
optparse.py(839):             for (attr, val) in defaults.items():
optparse.py(840):                 setattr(self, attr, val)
optparse.py(839):             for (attr, val) in defaults.items():
optparse.py(840):                 setattr(self, attr, val)
optparse.py(839):             for (attr, val) in defaults.items():
optparse.py(840):                 setattr(self, attr, val)
optparse.py(839):             for (attr, val) in defaults.items():
optparse.py(840):                 setattr(self, attr, val)
optparse.py(839):             for (attr, val) in defaults.items():
optparse.py(840):                 setattr(self, attr, val)
optparse.py(839):             for (attr, val) in defaults.items():
optparse.py(840):                 setattr(self, attr, val)
optparse.py(839):             for (attr, val) in defaults.items():
optparse.py(840):                 setattr(self, attr, val)
optparse.py(839):             for (attr, val) in defaults.items():
optparse.py(840):                 setattr(self, attr, val)
optparse.py(839):             for (attr, val) in defaults.items():
optparse.py(840):                 setattr(self, attr, val)
optparse.py(839):             for (attr, val) in defaults.items():
optparse.py(840):                 setattr(self, attr, val)
optparse.py(839):             for (attr, val) in defaults.items():
optparse.py(840):                 setattr(self, attr, val)
optparse.py(839):             for (attr, val) in defaults.items():
optparse.py(1394):         self.rargs = rargs
optparse.py(1395):         self.largs = largs = []
optparse.py(1396):         self.values = values
optparse.py(1398):         try:
optparse.py(1399):             stop = self._process_args(largs, rargs, values)
 --- modulename: optparse, funcname: _process_args
optparse.py(1429):         while rargs:
optparse.py(1430):             arg = rargs[0]
optparse.py(1434):             if arg == "--":
optparse.py(1437):             elif arg[0:2] == "--":
optparse.py(1439):                 self._process_long_opt(rargs, values)
 --- modulename: optparse, funcname: _process_long_opt
optparse.py(1480):         arg = rargs.pop(0)
optparse.py(1484):         if "=" in arg:
optparse.py(1489):             opt = arg
optparse.py(1490):             had_explicit_value = False
optparse.py(1492):         opt = self._match_long_opt(opt)
 --- modulename: optparse, funcname: _match_long_opt
optparse.py(1477):         return _match_abbrev(opt, self._long_opt)
 --- modulename: optparse, funcname: _match_abbrev
optparse.py(1682):     if s in wordmap:
optparse.py(1686):         possibilities = [word for word in wordmap.keys()
optparse.py(1687):                          if word.startswith(s)]
optparse.py(1686):         possibilities = [word for word in wordmap.keys()
optparse.py(1687):                          if word.startswith(s)]
optparse.py(1686):         possibilities = [word for word in wordmap.keys()
optparse.py(1687):                          if word.startswith(s)]
optparse.py(1686):         possibilities = [word for word in wordmap.keys()
optparse.py(1687):                          if word.startswith(s)]
optparse.py(1686):         possibilities = [word for word in wordmap.keys()
optparse.py(1687):                          if word.startswith(s)]
optparse.py(1686):         possibilities = [word for word in wordmap.keys()
optparse.py(1687):                          if word.startswith(s)]
optparse.py(1686):         possibilities = [word for word in wordmap.keys()
optparse.py(1687):                          if word.startswith(s)]
optparse.py(1686):         possibilities = [word for word in wordmap.keys()
optparse.py(1687):                          if word.startswith(s)]
optparse.py(1686):         possibilities = [word for word in wordmap.keys()
optparse.py(1687):                          if word.startswith(s)]
optparse.py(1686):         possibilities = [word for word in wordmap.keys()
optparse.py(1687):                          if word.startswith(s)]
optparse.py(1686):         possibilities = [word for word in wordmap.keys()
optparse.py(1687):                          if word.startswith(s)]
optparse.py(1686):         possibilities = [word for word in wordmap.keys()
optparse.py(1687):                          if word.startswith(s)]
optparse.py(1686):         possibilities = [word for word in wordmap.keys()
optparse.py(1687):                          if word.startswith(s)]
optparse.py(1686):         possibilities = [word for word in wordmap.keys()
optparse.py(1687):                          if word.startswith(s)]
optparse.py(1686):         possibilities = [word for word in wordmap.keys()
optparse.py(1687):                          if word.startswith(s)]
optparse.py(1686):         possibilities = [word for word in wordmap.keys()
optparse.py(1687):                          if word.startswith(s)]
optparse.py(1686):         possibilities = [word for word in wordmap.keys()
optparse.py(1687):                          if word.startswith(s)]
optparse.py(1686):         possibilities = [word for word in wordmap.keys()
optparse.py(1689):         if len(possibilities) == 1:
optparse.py(1690):             return possibilities[0]
optparse.py(1493):         option = self._long_opt[opt]
optparse.py(1494):         if option.takes_value():
 --- modulename: optparse, funcname: takes_value
optparse.py(753):         return self.type is not None
optparse.py(1495):             nargs = option.nargs
optparse.py(1496):             if len(rargs) < nargs:
optparse.py(1502):             elif nargs == 1:
optparse.py(1503):                 value = rargs.pop(0)
optparse.py(1514):         option.process(opt, value, values, self)
 --- modulename: optparse, funcname: process
optparse.py(782):         value = self.convert_value(opt, value)
 --- modulename: optparse, funcname: convert_value
optparse.py(772):         if value is not None:
optparse.py(773):             if self.nargs == 1:
optparse.py(774):                 return self.check_value(opt, value)
 --- modulename: optparse, funcname: check_value
optparse.py(765):         checker = self.TYPE_CHECKER.get(self.type)
optparse.py(766):         if checker is None:
optparse.py(767):             return value
optparse.py(787):         return self.take_action(
optparse.py(788):             self.action, self.dest, opt, value, values, parser)
 --- modulename: optparse, funcname: take_action
optparse.py(791):         if action == "store":
optparse.py(792):             setattr(values, dest, value)
optparse.py(818):         return 1
optparse.py(1429):         while rargs:
optparse.py(1430):             arg = rargs[0]
optparse.py(1434):             if arg == "--":
optparse.py(1437):             elif arg[0:2] == "--":
optparse.py(1439):                 self._process_long_opt(rargs, values)
 --- modulename: optparse, funcname: _process_long_opt
optparse.py(1480):         arg = rargs.pop(0)
optparse.py(1484):         if "=" in arg:
optparse.py(1489):             opt = arg
optparse.py(1490):             had_explicit_value = False
optparse.py(1492):         opt = self._match_long_opt(opt)
 --- modulename: optparse, funcname: _match_long_opt
optparse.py(1477):         return _match_abbrev(opt, self._long_opt)
 --- modulename: optparse, funcname: _match_abbrev
optparse.py(1682):     if s in wordmap:
optparse.py(1686):         possibilities = [word for word in wordmap.keys()
optparse.py(1687):                          if word.startswith(s)]
optparse.py(1686):         possibilities = [word for word in wordmap.keys()
optparse.py(1687):                          if word.startswith(s)]
optparse.py(1686):         possibilities = [word for word in wordmap.keys()
optparse.py(1687):                          if word.startswith(s)]
optparse.py(1686):         possibilities = [word for word in wordmap.keys()
optparse.py(1687):                          if word.startswith(s)]
optparse.py(1686):         possibilities = [word for word in wordmap.keys()
optparse.py(1687):                          if word.startswith(s)]
optparse.py(1686):         possibilities = [word for word in wordmap.keys()
optparse.py(1687):                          if word.startswith(s)]
optparse.py(1686):         possibilities = [word for word in wordmap.keys()
optparse.py(1687):                          if word.startswith(s)]
optparse.py(1686):         possibilities = [word for word in wordmap.keys()
optparse.py(1687):                          if word.startswith(s)]
optparse.py(1686):         possibilities = [word for word in wordmap.keys()
optparse.py(1687):                          if word.startswith(s)]
optparse.py(1686):         possibilities = [word for word in wordmap.keys()
optparse.py(1687):                          if word.startswith(s)]
optparse.py(1686):         possibilities = [word for word in wordmap.keys()
optparse.py(1687):                          if word.startswith(s)]
optparse.py(1686):         possibilities = [word for word in wordmap.keys()
optparse.py(1687):                          if word.startswith(s)]
optparse.py(1686):         possibilities = [word for word in wordmap.keys()
optparse.py(1687):                          if word.startswith(s)]
optparse.py(1686):         possibilities = [word for word in wordmap.keys()
optparse.py(1687):                          if word.startswith(s)]
optparse.py(1686):         possibilities = [word for word in wordmap.keys()
optparse.py(1687):                          if word.startswith(s)]
optparse.py(1686):         possibilities = [word for word in wordmap.keys()
optparse.py(1687):                          if word.startswith(s)]
optparse.py(1686):         possibilities = [word for word in wordmap.keys()
optparse.py(1687):                          if word.startswith(s)]
optparse.py(1686):         possibilities = [word for word in wordmap.keys()
optparse.py(1689):         if len(possibilities) == 1:
optparse.py(1690):             return possibilities[0]
optparse.py(1493):         option = self._long_opt[opt]
optparse.py(1494):         if option.takes_value():
 --- modulename: optparse, funcname: takes_value
optparse.py(753):         return self.type is not None
optparse.py(1495):             nargs = option.nargs
optparse.py(1496):             if len(rargs) < nargs:
optparse.py(1502):             elif nargs == 1:
optparse.py(1503):                 value = rargs.pop(0)
optparse.py(1514):         option.process(opt, value, values, self)
 --- modulename: optparse, funcname: process
optparse.py(782):         value = self.convert_value(opt, value)
 --- modulename: optparse, funcname: convert_value
optparse.py(772):         if value is not None:
optparse.py(773):             if self.nargs == 1:
optparse.py(774):                 return self.check_value(opt, value)
 --- modulename: optparse, funcname: check_value
optparse.py(765):         checker = self.TYPE_CHECKER.get(self.type)
optparse.py(766):         if checker is None:
optparse.py(767):             return value
optparse.py(787):         return self.take_action(
optparse.py(788):             self.action, self.dest, opt, value, values, parser)
 --- modulename: optparse, funcname: take_action
optparse.py(791):         if action == "store":
optparse.py(792):             setattr(values, dest, value)
optparse.py(818):         return 1
optparse.py(1429):         while rargs:
optparse.py(1403):         args = largs + rargs
optparse.py(1404):         return self.check_values(values, args)
 --- modulename: optparse, funcname: check_values
optparse.py(1417):         return (values, args)
pacman.py(511):   if len(otherjunk) != 0:
pacman.py(513):   args = dict()
pacman.py(516):   if options.fixRandomSeed: random.seed('cs188')
pacman.py(519):   args['layout'] = layout.getLayout( options.layout )
 --- modulename: layout, funcname: getLayout
layout.py(125):   if name.endswith('.lay'):
layout.py(129):     layout = tryToLoad('layouts/' + name + '.lay')
 --- modulename: layout, funcname: tryToLoad
layout.py(139):   if(not os.path.exists(fullname)): return None
 --- modulename: genericpath, funcname: exists
genericpath.py(17):     try:
genericpath.py(18):         os.stat(path)
genericpath.py(21):     return True
layout.py(140):   f = open(fullname)
layout.py(141):   try: return Layout([line.strip() for line in f])
layout.py(141):   try: return Layout([line.strip() for line in f])
layout.py(141):   try: return Layout([line.strip() for line in f])
layout.py(141):   try: return Layout([line.strip() for line in f])
layout.py(141):   try: return Layout([line.strip() for line in f])
layout.py(141):   try: return Layout([line.strip() for line in f])
layout.py(141):   try: return Layout([line.strip() for line in f])
layout.py(141):   try: return Layout([line.strip() for line in f])
 --- modulename: layout, funcname: __init__
layout.py(22):     self.width = len(layoutText[0])
layout.py(23):     self.height= len(layoutText)
layout.py(24):     self.walls = Grid(self.width, self.height, False)
 --- modulename: game, funcname: __init__
game.py(159):     if initialValue not in [False, True]: raise Exception('Grids can only contain booleans')
game.py(160):     self.CELLS_PER_INT = 30
game.py(162):     self.width = width
game.py(163):     self.height = height
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(165):     if bitRepresentation:
layout.py(25):     self.food = Grid(self.width, self.height, False)
 --- modulename: game, funcname: __init__
game.py(159):     if initialValue not in [False, True]: raise Exception('Grids can only contain booleans')
game.py(160):     self.CELLS_PER_INT = 30
game.py(162):     self.width = width
game.py(163):     self.height = height
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(165):     if bitRepresentation:
layout.py(26):     self.capsules = []
layout.py(27):     self.agentPositions = []
layout.py(28):     self.numGhosts = 0
layout.py(29):     self.processLayoutText(layoutText)
 --- modulename: layout, funcname: processLayoutText
layout.py(101):     maxY = self.height - 1
layout.py(102):     for y in range(self.height):       
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(102):     for y in range(self.height):       
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(113):       self.food[x][y] = True 
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(114):     elif layoutChar == 'o':    
layout.py(116):     elif layoutChar == 'P':    
layout.py(118):     elif layoutChar in ['G']:    
layout.py(121):     elif layoutChar in  ['1', '2', '3', '4']:
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(102):     for y in range(self.height):       
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(114):     elif layoutChar == 'o':    
layout.py(116):     elif layoutChar == 'P':    
layout.py(118):     elif layoutChar in ['G']:    
layout.py(121):     elif layoutChar in  ['1', '2', '3', '4']:
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(114):     elif layoutChar == 'o':    
layout.py(116):     elif layoutChar == 'P':    
layout.py(118):     elif layoutChar in ['G']:    
layout.py(121):     elif layoutChar in  ['1', '2', '3', '4']:
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(114):     elif layoutChar == 'o':    
layout.py(116):     elif layoutChar == 'P':    
layout.py(118):     elif layoutChar in ['G']:    
layout.py(121):     elif layoutChar in  ['1', '2', '3', '4']:
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(102):     for y in range(self.height):       
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(114):     elif layoutChar == 'o':    
layout.py(116):     elif layoutChar == 'P':    
layout.py(118):     elif layoutChar in ['G']:    
layout.py(121):     elif layoutChar in  ['1', '2', '3', '4']:
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(114):     elif layoutChar == 'o':    
layout.py(116):     elif layoutChar == 'P':    
layout.py(118):     elif layoutChar in ['G']:    
layout.py(121):     elif layoutChar in  ['1', '2', '3', '4']:
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(114):     elif layoutChar == 'o':    
layout.py(116):     elif layoutChar == 'P':    
layout.py(118):     elif layoutChar in ['G']:    
layout.py(121):     elif layoutChar in  ['1', '2', '3', '4']:
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(114):     elif layoutChar == 'o':    
layout.py(116):     elif layoutChar == 'P':    
layout.py(118):     elif layoutChar in ['G']:    
layout.py(121):     elif layoutChar in  ['1', '2', '3', '4']:
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(102):     for y in range(self.height):       
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(114):     elif layoutChar == 'o':    
layout.py(116):     elif layoutChar == 'P':    
layout.py(118):     elif layoutChar in ['G']:    
layout.py(121):     elif layoutChar in  ['1', '2', '3', '4']:
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(114):     elif layoutChar == 'o':    
layout.py(116):     elif layoutChar == 'P':    
layout.py(118):     elif layoutChar in ['G']:    
layout.py(121):     elif layoutChar in  ['1', '2', '3', '4']:
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(102):     for y in range(self.height):       
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(114):     elif layoutChar == 'o':    
layout.py(116):     elif layoutChar == 'P':    
layout.py(118):     elif layoutChar in ['G']:    
layout.py(121):     elif layoutChar in  ['1', '2', '3', '4']:
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(114):     elif layoutChar == 'o':    
layout.py(116):     elif layoutChar == 'P':    
layout.py(118):     elif layoutChar in ['G']:    
layout.py(121):     elif layoutChar in  ['1', '2', '3', '4']:
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(114):     elif layoutChar == 'o':    
layout.py(116):     elif layoutChar == 'P':    
layout.py(118):     elif layoutChar in ['G']:    
layout.py(121):     elif layoutChar in  ['1', '2', '3', '4']:
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(114):     elif layoutChar == 'o':    
layout.py(116):     elif layoutChar == 'P':    
layout.py(118):     elif layoutChar in ['G']:    
layout.py(121):     elif layoutChar in  ['1', '2', '3', '4']:
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(114):     elif layoutChar == 'o':    
layout.py(116):     elif layoutChar == 'P':    
layout.py(117):       self.agentPositions.append( (0, (x, y) ) )
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(102):     for y in range(self.height):       
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(102):     for y in range(self.height):       
layout.py(106):     self.agentPositions.sort()
layout.py(107):     self.agentPositions = [ ( i == 0, pos) for i, pos in self.agentPositions]
layout.py(107):     self.agentPositions = [ ( i == 0, pos) for i, pos in self.agentPositions]
layout.py(30):     self.layoutText = layoutText
layout.py(142):   finally: f.close()
layout.py(130):     if layout == None: layout = tryToLoad(name + '.lay')
layout.py(131):   if layout == None and back >= 0:
layout.py(136):   return layout
pacman.py(520):   if args['layout'] == None: raise Exception("The layout " + options.layout + " cannot be found")
pacman.py(523):   noKeyboard = options.gameToReplay == None and (options.textGraphics or options.quietGraphics)
pacman.py(524):   pacmanType = loadAgent(options.pacman, noKeyboard)
 --- modulename: pacman, funcname: loadAgent
pacman.py(572):   pythonPathStr = os.path.expandvars("$PYTHONPATH")
 --- modulename: posixpath, funcname: expandvars
posixpath.py(293):     if '$' not in path:
posixpath.py(295):     if not _varprog:
posixpath.py(296):         import re
posixpath.py(297):         _varprog = re.compile(r'\$(\w+|\{[^}]*\})')
 --- modulename: re, funcname: compile
re.py(190):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
re.py(228):     cachekey = (type(key[0]),) + key
re.py(229):     p = _cache.get(cachekey)
re.py(230):     if p is not None:
re.py(232):     pattern, flags = key
re.py(233):     if isinstance(pattern, _pattern_type):
re.py(237):     if not sre_compile.isstring(pattern):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(476):     for tp in STRING_TYPES:
sre_compile.py(477):         if isinstance(obj, tp):
sre_compile.py(478):             return 1
re.py(239):     try:
re.py(240):         p = sre_compile.compile(pattern, flags)
 --- modulename: sre_compile, funcname: compile
sre_compile.py(499):     if isstring(p):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(476):     for tp in STRING_TYPES:
sre_compile.py(477):         if isinstance(obj, tp):
sre_compile.py(478):             return 1
sre_compile.py(500):         pattern = p
sre_compile.py(501):         p = sre_parse.parse(p, flags)
 --- modulename: sre_parse, funcname: parse
sre_parse.py(679):     source = Tokenizer(str)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(180):         self.string = string
sre_parse.py(181):         self.index = 0
sre_parse.py(182):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(189):             try:
sre_parse.py(190):                 c = self.string[self.index + 1]
sre_parse.py(193):             char = char + c
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(681):     if pattern is None:
sre_parse.py(682):         pattern = Pattern()
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(69):         self.flags = 0
sre_parse.py(70):         self.open = []
sre_parse.py(71):         self.groups = 1
sre_parse.py(72):         self.groupdict = {}
sre_parse.py(683):     pattern.flags = flags
sre_parse.py(684):     pattern.str = str
sre_parse.py(686):     p = _parse_sub(source, pattern, 0)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(305):     items = []
sre_parse.py(306):     itemsappend = items.append
sre_parse.py(307):     sourcematch = source.match
sre_parse.py(308):     while 1:
sre_parse.py(309):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(382):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(92):         self.pattern = pattern
sre_parse.py(93):         if data is None:
sre_parse.py(94):             data = []
sre_parse.py(95):         self.data = data
sre_parse.py(96):         self.width = None
sre_parse.py(385):     subpatternappend = subpattern.append
sre_parse.py(386):     sourceget = source.get
sre_parse.py(387):     sourcematch = source.match
sre_parse.py(388):     _len = len
sre_parse.py(389):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(390):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(391):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(392):     REPEATCODES = _REPEATCODES
sre_parse.py(394):     while 1:
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(402):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(413):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(416):         elif this == "[":
sre_parse.py(473):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(526):         elif this == ".":
sre_parse.py(529):         elif this == "(":
sre_parse.py(661):         elif this == "^":
sre_parse.py(664):         elif this == "$":
sre_parse.py(667):         elif this and this[0] == "\\":
sre_parse.py(668):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(260):     code = CATEGORIES.get(escape)
sre_parse.py(261):     if code:
sre_parse.py(263):     code = ESCAPES.get(escape)
sre_parse.py(264):     if code:
sre_parse.py(266):     try:
sre_parse.py(267):         c = escape[1:2]
sre_parse.py(268):         if c == "x":
sre_parse.py(275):         elif c == "0":
sre_parse.py(280):         elif c in DIGITS:
sre_parse.py(296):         if len(escape) == 2:
sre_parse.py(297):             return LITERAL, ord(escape[1])
sre_parse.py(669):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(140):         self.data.append(code)
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(189):             try:
sre_parse.py(190):                 c = self.string[self.index + 1]
sre_parse.py(193):             char = char + c
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(402):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(413):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(416):         elif this == "[":
sre_parse.py(473):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(526):         elif this == ".":
sre_parse.py(529):         elif this == "(":
sre_parse.py(530):             group = 1
sre_parse.py(531):             name = None
sre_parse.py(532):             condgroup = None
sre_parse.py(533):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(636):             if group:
sre_parse.py(638):                 if group == 2:
sre_parse.py(642):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
sre_parse.py(74):         gid = self.groups
sre_parse.py(75):         self.groups = gid + 1
sre_parse.py(76):         if name is not None:
sre_parse.py(82):         self.open.append(gid)
sre_parse.py(83):         return gid
sre_parse.py(643):                 if condgroup:
sre_parse.py(646):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(305):     items = []
sre_parse.py(306):     itemsappend = items.append
sre_parse.py(307):     sourcematch = source.match
sre_parse.py(308):     while 1:
sre_parse.py(309):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(382):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(92):         self.pattern = pattern
sre_parse.py(93):         if data is None:
sre_parse.py(94):             data = []
sre_parse.py(95):         self.data = data
sre_parse.py(96):         self.width = None
sre_parse.py(385):     subpatternappend = subpattern.append
sre_parse.py(386):     sourceget = source.get
sre_parse.py(387):     sourcematch = source.match
sre_parse.py(388):     _len = len
sre_parse.py(389):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(390):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(391):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(392):     REPEATCODES = _REPEATCODES
sre_parse.py(394):     while 1:
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(402):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(413):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(416):         elif this == "[":
sre_parse.py(473):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(526):         elif this == ".":
sre_parse.py(529):         elif this == "(":
sre_parse.py(661):         elif this == "^":
sre_parse.py(664):         elif this == "$":
sre_parse.py(667):         elif this and this[0] == "\\":
sre_parse.py(668):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(260):     code = CATEGORIES.get(escape)
sre_parse.py(261):     if code:
sre_parse.py(262):         return code
sre_parse.py(669):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(140):         self.data.append(code)
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(402):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(413):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(416):         elif this == "[":
sre_parse.py(473):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(475):             if this == "?":
sre_parse.py(477):             elif this == "*":
sre_parse.py(480):             elif this == "+":
sre_parse.py(481):                 min, max = 1, MAXREPEAT
sre_parse.py(513):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
sre_parse.py(514):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(133):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(92):         self.pattern = pattern
sre_parse.py(93):         if data is None:
sre_parse.py(95):         self.data = data
sre_parse.py(96):         self.width = None
sre_parse.py(517):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_parse.py(519):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_parse.py(521):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(524):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(136):         self.data[index] = code
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(397):             break # end of subpattern
sre_parse.py(674):     return subpattern
sre_parse.py(310):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(198):             if skip:
sre_parse.py(199):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(189):             try:
sre_parse.py(190):                 c = self.string[self.index + 1]
sre_parse.py(193):             char = char + c
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(200):             return 1
sre_parse.py(311):             continue
sre_parse.py(309):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(382):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(92):         self.pattern = pattern
sre_parse.py(93):         if data is None:
sre_parse.py(94):             data = []
sre_parse.py(95):         self.data = data
sre_parse.py(96):         self.width = None
sre_parse.py(385):     subpatternappend = subpattern.append
sre_parse.py(386):     sourceget = source.get
sre_parse.py(387):     sourcematch = source.match
sre_parse.py(388):     _len = len
sre_parse.py(389):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(390):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(391):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(392):     REPEATCODES = _REPEATCODES
sre_parse.py(394):     while 1:
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(402):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(413):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(416):         elif this == "[":
sre_parse.py(473):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(526):         elif this == ".":
sre_parse.py(529):         elif this == "(":
sre_parse.py(661):         elif this == "^":
sre_parse.py(664):         elif this == "$":
sre_parse.py(667):         elif this and this[0] == "\\":
sre_parse.py(668):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(260):     code = CATEGORIES.get(escape)
sre_parse.py(261):     if code:
sre_parse.py(263):     code = ESCAPES.get(escape)
sre_parse.py(264):     if code:
sre_parse.py(266):     try:
sre_parse.py(267):         c = escape[1:2]
sre_parse.py(268):         if c == "x":
sre_parse.py(275):         elif c == "0":
sre_parse.py(280):         elif c in DIGITS:
sre_parse.py(296):         if len(escape) == 2:
sre_parse.py(297):             return LITERAL, ord(escape[1])
sre_parse.py(669):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(140):         self.data.append(code)
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(402):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(413):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(416):         elif this == "[":
sre_parse.py(418):             set = []
sre_parse.py(419):             setappend = set.append
sre_parse.py(422):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(198):             if skip:
sre_parse.py(199):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(200):             return 1
sre_parse.py(423):                 setappend((NEGATE, None))
sre_parse.py(425):             start = set[:]
sre_parse.py(426):             while 1:
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(429):                     break
sre_parse.py(465):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(467):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
sre_parse.py(468):                 subpatternappend((NOT_LITERAL, set[1][1])) # optimization
 --- modulename: sre_parse, funcname: append
sre_parse.py(140):         self.data.append(code)
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(189):             try:
sre_parse.py(190):                 c = self.string[self.index + 1]
sre_parse.py(193):             char = char + c
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(402):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(413):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(416):         elif this == "[":
sre_parse.py(473):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(475):             if this == "?":
sre_parse.py(477):             elif this == "*":
sre_parse.py(478):                 min, max = 0, MAXREPEAT
sre_parse.py(513):             if subpattern:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
sre_parse.py(514):                 item = subpattern[-1:]
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(133):             return SubPattern(self.pattern, self.data[index])
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(92):         self.pattern = pattern
sre_parse.py(93):         if data is None:
sre_parse.py(95):         self.data = data
sre_parse.py(96):         self.width = None
sre_parse.py(517):             if not item or (_len(item) == 1 and item[0][0] == AT):
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_parse.py(519):             if item[0][0] in REPEATCODES:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_parse.py(521):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(524):                 subpattern[-1] = (MAX_REPEAT, (min, max, item))
 --- modulename: sre_parse, funcname: __setitem__
sre_parse.py(136):         self.data[index] = code
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(402):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(413):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(416):         elif this == "[":
sre_parse.py(473):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(526):         elif this == ".":
sre_parse.py(529):         elif this == "(":
sre_parse.py(661):         elif this == "^":
sre_parse.py(664):         elif this == "$":
sre_parse.py(667):         elif this and this[0] == "\\":
sre_parse.py(668):             code = _escape(source, this, state)
 --- modulename: sre_parse, funcname: _escape
sre_parse.py(260):     code = CATEGORIES.get(escape)
sre_parse.py(261):     if code:
sre_parse.py(263):     code = ESCAPES.get(escape)
sre_parse.py(264):     if code:
sre_parse.py(266):     try:
sre_parse.py(267):         c = escape[1:2]
sre_parse.py(268):         if c == "x":
sre_parse.py(275):         elif c == "0":
sre_parse.py(280):         elif c in DIGITS:
sre_parse.py(296):         if len(escape) == 2:
sre_parse.py(297):             return LITERAL, ord(escape[1])
sre_parse.py(669):             subpatternappend(code)
 --- modulename: sre_parse, funcname: append
sre_parse.py(140):         self.data.append(code)
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(397):             break # end of subpattern
sre_parse.py(674):     return subpattern
sre_parse.py(310):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(312):         if not nested:
sre_parse.py(314):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(198):             if skip:
sre_parse.py(200):             return 1
sre_parse.py(315):             break
sre_parse.py(319):     if len(items) == 1:
sre_parse.py(322):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(92):         self.pattern = pattern
sre_parse.py(93):         if data is None:
sre_parse.py(94):             data = []
sre_parse.py(95):         self.data = data
sre_parse.py(96):         self.width = None
sre_parse.py(323):     subpatternappend = subpattern.append
sre_parse.py(326):     while 1:
sre_parse.py(327):         prefix = None
sre_parse.py(328):         for item in items:
sre_parse.py(329):             if not item:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
sre_parse.py(331):             if prefix is None:
sre_parse.py(332):                 prefix = item[0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_parse.py(328):         for item in items:
sre_parse.py(329):             if not item:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
sre_parse.py(331):             if prefix is None:
sre_parse.py(333):             elif item[0] != prefix:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_parse.py(334):                 break
sre_parse.py(342):         break
sre_parse.py(345):     for item in items:
sre_parse.py(346):         if len(item) != 1 or item[0][0] != LITERAL:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_parse.py(347):             break
sre_parse.py(358):     subpattern.append((BRANCH, (None, items)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(140):         self.data.append(code)
sre_parse.py(359):     return subpattern
sre_parse.py(647):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(198):             if skip:
sre_parse.py(199):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(185):             self.next = None
sre_parse.py(186):             return
sre_parse.py(200):             return 1
sre_parse.py(649):                 if group is not None:
sre_parse.py(650):                     state.closegroup(group)
 --- modulename: sre_parse, funcname: closegroup
sre_parse.py(85):         self.open.remove(gid)
sre_parse.py(651):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(140):         self.data.append(code)
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(185):             self.next = None
sre_parse.py(186):             return
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(400):             break # end of pattern
sre_parse.py(674):     return subpattern
sre_parse.py(310):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(312):         if not nested:
sre_parse.py(313):             break
sre_parse.py(319):     if len(items) == 1:
sre_parse.py(320):         return items[0]
sre_parse.py(688):     tail = source.get()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(185):             self.next = None
sre_parse.py(186):             return
sre_parse.py(205):         return this
sre_parse.py(689):     if tail == ")":
sre_parse.py(691):     elif tail:
sre_parse.py(694):     if flags & SRE_FLAG_DEBUG:
sre_parse.py(697):     if not (flags & SRE_FLAG_VERBOSE) and p.pattern.flags & SRE_FLAG_VERBOSE:
sre_parse.py(702):     return p
sre_compile.py(505):     code = _code(p, flags)
 --- modulename: sre_compile, funcname: _code
sre_compile.py(483):     flags = p.pattern.flags | flags
sre_compile.py(484):     code = []
sre_compile.py(487):     _compile_info(code, p, flags)
 --- modulename: sre_compile, funcname: _compile_info
sre_compile.py(366):     lo, hi = pattern.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(143):         if self.width:
sre_parse.py(145):         lo = hi = 0L
sre_parse.py(146):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(147):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(149):             if op is BRANCH:
sre_parse.py(158):             elif op is CALL:
sre_parse.py(162):             elif op is SUBPATTERN:
sre_parse.py(166):             elif op in REPEATCODES:
sre_parse.py(170):             elif op in UNITCODES:
sre_parse.py(171):                 lo = lo + 1
sre_parse.py(172):                 hi = hi + 1
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(149):             if op is BRANCH:
sre_parse.py(158):             elif op is CALL:
sre_parse.py(162):             elif op is SUBPATTERN:
sre_parse.py(163):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(143):         if self.width:
sre_parse.py(145):         lo = hi = 0L
sre_parse.py(146):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(147):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(149):             if op is BRANCH:
sre_parse.py(150):                 i = sys.maxint
sre_parse.py(151):                 j = 0
sre_parse.py(152):                 for av in av[1]:
sre_parse.py(153):                     l, h = av.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(143):         if self.width:
sre_parse.py(145):         lo = hi = 0L
sre_parse.py(146):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(147):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(149):             if op is BRANCH:
sre_parse.py(158):             elif op is CALL:
sre_parse.py(162):             elif op is SUBPATTERN:
sre_parse.py(166):             elif op in REPEATCODES:
sre_parse.py(167):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(143):         if self.width:
sre_parse.py(145):         lo = hi = 0L
sre_parse.py(146):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(147):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(149):             if op is BRANCH:
sre_parse.py(158):             elif op is CALL:
sre_parse.py(162):             elif op is SUBPATTERN:
sre_parse.py(166):             elif op in REPEATCODES:
sre_parse.py(170):             elif op in UNITCODES:
sre_parse.py(171):                 lo = lo + 1
sre_parse.py(172):                 hi = hi + 1
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(175):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
sre_parse.py(176):         return self.width
sre_parse.py(168):                 lo = lo + long(i) * av[0]
sre_parse.py(169):                 hi = hi + long(j) * av[1]
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(175):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
sre_parse.py(176):         return self.width
sre_parse.py(154):                     i = min(i, l)
sre_parse.py(155):                     j = max(j, h)
sre_parse.py(152):                 for av in av[1]:
sre_parse.py(153):                     l, h = av.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(143):         if self.width:
sre_parse.py(145):         lo = hi = 0L
sre_parse.py(146):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(147):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(149):             if op is BRANCH:
sre_parse.py(158):             elif op is CALL:
sre_parse.py(162):             elif op is SUBPATTERN:
sre_parse.py(166):             elif op in REPEATCODES:
sre_parse.py(170):             elif op in UNITCODES:
sre_parse.py(171):                 lo = lo + 1
sre_parse.py(172):                 hi = hi + 1
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(149):             if op is BRANCH:
sre_parse.py(158):             elif op is CALL:
sre_parse.py(162):             elif op is SUBPATTERN:
sre_parse.py(166):             elif op in REPEATCODES:
sre_parse.py(167):                 i, j = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(143):         if self.width:
sre_parse.py(145):         lo = hi = 0L
sre_parse.py(146):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(147):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(149):             if op is BRANCH:
sre_parse.py(158):             elif op is CALL:
sre_parse.py(162):             elif op is SUBPATTERN:
sre_parse.py(166):             elif op in REPEATCODES:
sre_parse.py(170):             elif op in UNITCODES:
sre_parse.py(171):                 lo = lo + 1
sre_parse.py(172):                 hi = hi + 1
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(175):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
sre_parse.py(176):         return self.width
sre_parse.py(168):                 lo = lo + long(i) * av[0]
sre_parse.py(169):                 hi = hi + long(j) * av[1]
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(149):             if op is BRANCH:
sre_parse.py(158):             elif op is CALL:
sre_parse.py(162):             elif op is SUBPATTERN:
sre_parse.py(166):             elif op in REPEATCODES:
sre_parse.py(170):             elif op in UNITCODES:
sre_parse.py(171):                 lo = lo + 1
sre_parse.py(172):                 hi = hi + 1
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(175):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
sre_parse.py(176):         return self.width
sre_parse.py(154):                     i = min(i, l)
sre_parse.py(155):                     j = max(j, h)
sre_parse.py(152):                 for av in av[1]:
sre_parse.py(156):                 lo = lo + i
sre_parse.py(157):                 hi = hi + j
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(175):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
sre_parse.py(176):         return self.width
sre_parse.py(164):                 lo = lo + i
sre_parse.py(165):                 hi = hi + j
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(175):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
sre_parse.py(176):         return self.width
sre_compile.py(367):     if lo == 0:
sre_compile.py(370):     prefix = []
sre_compile.py(371):     prefixappend = prefix.append
sre_compile.py(372):     prefix_skip = 0
sre_compile.py(373):     charset = [] # not used
sre_compile.py(374):     charsetappend = charset.append
sre_compile.py(375):     if not (flags & SRE_FLAG_IGNORECASE):
sre_compile.py(377):         for op, av in pattern.data:
sre_compile.py(378):             if op is LITERAL:
sre_compile.py(379):                 if len(prefix) == prefix_skip:
sre_compile.py(380):                     prefix_skip = prefix_skip + 1
sre_compile.py(381):                 prefixappend(av)
sre_compile.py(377):         for op, av in pattern.data:
sre_compile.py(378):             if op is LITERAL:
sre_compile.py(382):             elif op is SUBPATTERN and len(av[1]) == 1:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
sre_compile.py(383):                 op, av = av[1][0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(384):                 if op is LITERAL:
sre_compile.py(387):                     break
sre_compile.py(391):         if not prefix and pattern.data:
sre_compile.py(430):     emit = code.append
sre_compile.py(431):     emit(OPCODES[INFO])
sre_compile.py(432):     skip = len(code); emit(0)
sre_compile.py(434):     mask = 0
sre_compile.py(435):     if prefix:
sre_compile.py(436):         mask = SRE_INFO_PREFIX
sre_compile.py(437):         if len(prefix) == prefix_skip == len(pattern.data):
sre_compile.py(441):     emit(mask)
sre_compile.py(443):     if lo < MAXCODE:
sre_compile.py(444):         emit(lo)
sre_compile.py(448):     if hi < MAXCODE:
sre_compile.py(451):         emit(0)
sre_compile.py(453):     if prefix:
sre_compile.py(454):         emit(len(prefix)) # length
sre_compile.py(455):         emit(prefix_skip) # skip
sre_compile.py(456):         code.extend(prefix)
sre_compile.py(458):         table = [-1] + ([0]*len(prefix))
sre_compile.py(459):         for i in xrange(len(prefix)):
sre_compile.py(460):             table[i+1] = table[i]+1
sre_compile.py(461):             while table[i+1] > 0 and prefix[i] != prefix[table[i+1]-1]:
sre_compile.py(459):         for i in xrange(len(prefix)):
sre_compile.py(463):         code.extend(table[1:]) # don't store first entry
sre_compile.py(466):     code[skip] = len(code) - skip
sre_compile.py(490):     _compile(code, p.data, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(35):     emit = code.append
sre_compile.py(36):     _len = len
sre_compile.py(37):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(38):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(39):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(40):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(41):     for op, av in pattern:
sre_compile.py(42):         if op in LITERAL_CODES:
sre_compile.py(43):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(47):                 emit(OPCODES[op])
sre_compile.py(48):                 emit(av)
sre_compile.py(41):     for op, av in pattern:
sre_compile.py(42):         if op in LITERAL_CODES:
sre_compile.py(49):         elif op is IN:
sre_compile.py(60):         elif op is ANY:
sre_compile.py(65):         elif op in REPEATING_CODES:
sre_compile.py(97):         elif op is SUBPATTERN:
sre_compile.py(98):             if av[0]:
sre_compile.py(99):                 emit(OPCODES[MARK])
sre_compile.py(100):                 emit((av[0]-1)*2)
sre_compile.py(102):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(35):     emit = code.append
sre_compile.py(36):     _len = len
sre_compile.py(37):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(38):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(39):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(40):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(42):         if op in LITERAL_CODES:
sre_compile.py(49):         elif op is IN:
sre_compile.py(60):         elif op is ANY:
sre_compile.py(65):         elif op in REPEATING_CODES:
sre_compile.py(97):         elif op is SUBPATTERN:
sre_compile.py(106):         elif op in SUCCESS_CODES:
sre_compile.py(108):         elif op in ASSERT_CODES:
sre_compile.py(121):         elif op is CALL:
sre_compile.py(127):         elif op is AT:
sre_compile.py(136):         elif op is BRANCH:
sre_compile.py(137):             emit(OPCODES[op])
sre_compile.py(138):             tail = []
sre_compile.py(139):             tailappend = tail.append
sre_compile.py(140):             for av in av[1]:
sre_compile.py(141):                 skip = _len(code); emit(0)
sre_compile.py(143):                 _compile(code, av, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(35):     emit = code.append
sre_compile.py(36):     _len = len
sre_compile.py(37):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(38):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(39):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(40):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(42):         if op in LITERAL_CODES:
sre_compile.py(49):         elif op is IN:
sre_compile.py(60):         elif op is ANY:
sre_compile.py(65):         elif op in REPEATING_CODES:
sre_compile.py(66):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(75):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(357):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(143):         if self.width:
sre_parse.py(144):             return self.width
sre_compile.py(358):     if lo == 0 and hi == MAXREPEAT:
sre_compile.py(360):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(76):                 if op is MAX_REPEAT:
sre_compile.py(77):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(80):                 skip = _len(code); emit(0)
sre_compile.py(81):                 emit(av[0])
sre_compile.py(82):                 emit(av[1])
sre_compile.py(83):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(35):     emit = code.append
sre_compile.py(36):     _len = len
sre_compile.py(37):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(38):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(39):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(40):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(42):         if op in LITERAL_CODES:
sre_compile.py(49):         elif op is IN:
sre_compile.py(50):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(55):                 emit(OPCODES[op])
sre_compile.py(56):                 fixup = _identityfunction
sre_compile.py(57):             skip = _len(code); emit(0)
sre_compile.py(58):             _compile_charset(av, flags, code, fixup)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(181):     emit = code.append
sre_compile.py(182):     if fixup is None:
sre_compile.py(184):     for op, av in _optimize_charset(charset, fixup):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(210):     out = []
sre_compile.py(211):     outappend = out.append
sre_compile.py(212):     charmap = [0]*256
sre_compile.py(213):     try:
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(219):             elif op is RANGE:
sre_compile.py(222):             elif op is CATEGORY:
sre_compile.py(224):                 return charset # cannot compress
sre_compile.py(185):         emit(OPCODES[op])
sre_compile.py(186):         if op is NEGATE:
sre_compile.py(188):         elif op is LITERAL:
sre_compile.py(190):         elif op is RANGE:
sre_compile.py(193):         elif op is CHARSET:
sre_compile.py(195):         elif op is BIGCHARSET:
sre_compile.py(197):         elif op is CATEGORY:
sre_compile.py(198):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(200):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(203):                 emit(CHCODES[av])
sre_compile.py(184):     for op, av in _optimize_charset(charset, fixup):
sre_compile.py(206):     emit(OPCODES[FAILURE])
sre_compile.py(59):             code[skip] = _len(code) - skip
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(84):                 emit(OPCODES[SUCCESS])
sre_compile.py(85):                 code[skip] = _len(code) - skip
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(144):                 emit(OPCODES[JUMP])
sre_compile.py(145):                 tailappend(_len(code)); emit(0)
sre_compile.py(146):                 code[skip] = _len(code) - skip
sre_compile.py(140):             for av in av[1]:
sre_compile.py(141):                 skip = _len(code); emit(0)
sre_compile.py(143):                 _compile(code, av, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(35):     emit = code.append
sre_compile.py(36):     _len = len
sre_compile.py(37):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(38):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(39):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(40):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(42):         if op in LITERAL_CODES:
sre_compile.py(43):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(47):                 emit(OPCODES[op])
sre_compile.py(48):                 emit(av)
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(42):         if op in LITERAL_CODES:
sre_compile.py(49):         elif op is IN:
sre_compile.py(60):         elif op is ANY:
sre_compile.py(65):         elif op in REPEATING_CODES:
sre_compile.py(66):             if flags & SRE_FLAG_TEMPLATE:
sre_compile.py(75):             elif _simple(av) and op is not REPEAT:
 --- modulename: sre_compile, funcname: _simple
sre_compile.py(357):     lo, hi = av[2].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(143):         if self.width:
sre_parse.py(144):             return self.width
sre_compile.py(358):     if lo == 0 and hi == MAXREPEAT:
sre_compile.py(360):     return lo == hi == 1 and av[2][0][0] != SUBPATTERN
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(76):                 if op is MAX_REPEAT:
sre_compile.py(77):                     emit(OPCODES[REPEAT_ONE])
sre_compile.py(80):                 skip = _len(code); emit(0)
sre_compile.py(81):                 emit(av[0])
sre_compile.py(82):                 emit(av[1])
sre_compile.py(83):                 _compile(code, av[2], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(35):     emit = code.append
sre_compile.py(36):     _len = len
sre_compile.py(37):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(38):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(39):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(40):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(42):         if op in LITERAL_CODES:
sre_compile.py(43):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(47):                 emit(OPCODES[op])
sre_compile.py(48):                 emit(av)
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(84):                 emit(OPCODES[SUCCESS])
sre_compile.py(85):                 code[skip] = _len(code) - skip
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(42):         if op in LITERAL_CODES:
sre_compile.py(43):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(47):                 emit(OPCODES[op])
sre_compile.py(48):                 emit(av)
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(144):                 emit(OPCODES[JUMP])
sre_compile.py(145):                 tailappend(_len(code)); emit(0)
sre_compile.py(146):                 code[skip] = _len(code) - skip
sre_compile.py(140):             for av in av[1]:
sre_compile.py(147):             emit(0) # end of branch
sre_compile.py(148):             for tail in tail:
sre_compile.py(149):                 code[tail] = _len(code) - tail
sre_compile.py(148):             for tail in tail:
sre_compile.py(149):                 code[tail] = _len(code) - tail
sre_compile.py(148):             for tail in tail:
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(103):             if av[0]:
sre_compile.py(104):                 emit(OPCODES[MARK])
sre_compile.py(105):                 emit((av[0]-1)*2+1)
sre_compile.py(41):     for op, av in pattern:
sre_compile.py(492):     code.append(OPCODES[SUCCESS])
sre_compile.py(494):     return code
sre_compile.py(510):     if p.pattern.groups > 100:
sre_compile.py(516):     groupindex = p.pattern.groupdict
sre_compile.py(517):     indexgroup = [None] * p.pattern.groups
sre_compile.py(518):     for k, i in groupindex.items():
sre_compile.py(521):     return _sre.compile(
sre_compile.py(522):         pattern, flags | p.pattern.flags, code,
sre_compile.py(523):         p.pattern.groups-1,
sre_compile.py(524):         groupindex, indexgroup
re.py(243):     if len(_cache) >= _MAXCACHE:
re.py(245):     _cache[cachekey] = p
re.py(246):     return p
posixpath.py(298):     i = 0
posixpath.py(299):     while True:
posixpath.py(300):         m = _varprog.search(path, i)
posixpath.py(301):         if not m:
posixpath.py(303):         i, j = m.span(0)
posixpath.py(304):         name = m.group(1)
posixpath.py(305):         if name.startswith('{') and name.endswith('}'):
posixpath.py(307):         if name in os.environ:
 --- modulename: UserDict, funcname: __contains__
UserDict.py(71):         return key in self.data
posixpath.py(313):             i = j
posixpath.py(299):     while True:
posixpath.py(300):         m = _varprog.search(path, i)
posixpath.py(301):         if not m:
posixpath.py(302):             break
posixpath.py(314):     return path
pacman.py(573):   if pythonPathStr.find(';') == -1:
pacman.py(574):     pythonPathDirs = pythonPathStr.split(':')
pacman.py(577):   pythonPathDirs.append('.')
pacman.py(579):   for moduleDir in pythonPathDirs:
pacman.py(580):     if not os.path.isdir(moduleDir): continue
 --- modulename: genericpath, funcname: isdir
genericpath.py(40):     try:
genericpath.py(41):         st = os.stat(s)
genericpath.py(42):     except os.error:
genericpath.py(43):         return False
pacman.py(579):   for moduleDir in pythonPathDirs:
pacman.py(580):     if not os.path.isdir(moduleDir): continue
 --- modulename: genericpath, funcname: isdir
genericpath.py(40):     try:
genericpath.py(41):         st = os.stat(s)
genericpath.py(44):     return stat.S_ISDIR(st.st_mode)
 --- modulename: stat, funcname: S_ISDIR
stat.py(41):     return S_IFMT(mode) == S_IFDIR
 --- modulename: stat, funcname: S_IFMT
stat.py(25):     return mode & 0170000
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(582):     for modulename in moduleNames:
pacman.py(583):       try:
pacman.py(584):         module = __import__(modulename[:-3])
 --- modulename: ghostAgents, funcname: <module>
ghostAgents.py(9): from game import Agent
ghostAgents.py(10): from game import Actions
ghostAgents.py(11): from game import Directions
ghostAgents.py(12): import random
ghostAgents.py(13): from util import manhattanDistance
ghostAgents.py(14): import util
ghostAgents.py(16): class GhostAgent( Agent ):
 --- modulename: ghostAgents, funcname: GhostAgent
ghostAgents.py(16): class GhostAgent( Agent ):
ghostAgents.py(17):   def __init__( self, index ):
ghostAgents.py(20):   def getAction( self, state ):
ghostAgents.py(27):   def getDistribution(self, state):
ghostAgents.py(31): class RandomGhost( GhostAgent ):
 --- modulename: ghostAgents, funcname: RandomGhost
ghostAgents.py(31): class RandomGhost( GhostAgent ):
ghostAgents.py(32):   "A ghost that chooses a legal action uniformly at random."
ghostAgents.py(33):   def getDistribution( self, state ):
ghostAgents.py(39): class DirectionalGhost( GhostAgent ):
 --- modulename: ghostAgents, funcname: DirectionalGhost
ghostAgents.py(39): class DirectionalGhost( GhostAgent ):
ghostAgents.py(40):   "A ghost that prefers to rush Pacman, or flee when scared."
ghostAgents.py(41):   def __init__( self, index, prob_attack=0.8, prob_scaredFlee=0.8 ):
ghostAgents.py(46):   def getDistribution( self, state ):
pacman.py(587):       if pacman in dir(module):
pacman.py(582):     for modulename in moduleNames:
pacman.py(583):       try:
pacman.py(584):         module = __import__(modulename[:-3])
 --- modulename: keyboardAgents, funcname: <module>
keyboardAgents.py(9): from game import Agent
keyboardAgents.py(10): from game import Directions
keyboardAgents.py(11): import random
keyboardAgents.py(13): class KeyboardAgent(Agent):
 --- modulename: keyboardAgents, funcname: KeyboardAgent
keyboardAgents.py(13): class KeyboardAgent(Agent):
keyboardAgents.py(16):   """
keyboardAgents.py(18):   WEST_KEY  = 'a' 
keyboardAgents.py(19):   EAST_KEY  = 'd' 
keyboardAgents.py(20):   NORTH_KEY = 'w' 
keyboardAgents.py(21):   SOUTH_KEY = 's'
keyboardAgents.py(22):   STOP_KEY = 'q'
keyboardAgents.py(24):   def __init__( self, index = 0 ):
keyboardAgents.py(30):   def getAction( self, state):
keyboardAgents.py(53):   def getMove(self, legal):
keyboardAgents.py(61): class KeyboardAgent2(KeyboardAgent):
 --- modulename: keyboardAgents, funcname: KeyboardAgent2
keyboardAgents.py(61): class KeyboardAgent2(KeyboardAgent):
keyboardAgents.py(64):   """
keyboardAgents.py(66):   WEST_KEY  = 'j' 
keyboardAgents.py(67):   EAST_KEY  = "l" 
keyboardAgents.py(68):   NORTH_KEY = 'i' 
keyboardAgents.py(69):   SOUTH_KEY = 'k'
keyboardAgents.py(70):   STOP_KEY = 'u'
keyboardAgents.py(72):   def getMove(self, legal):
pacman.py(587):       if pacman in dir(module):
pacman.py(582):     for modulename in moduleNames:
pacman.py(583):       try:
pacman.py(584):         module = __import__(modulename[:-3])
 --- modulename: pacmanAgents, funcname: <module>
pacmanAgents.py(9): from pacman import Directions
 --- modulename: pacman, funcname: <module>
pacman.py(35): """
pacman.py(36): from game import GameStateData
pacman.py(37): from game import Game
pacman.py(38): from game import Directions
pacman.py(39): from game import Actions
pacman.py(40): from util import nearestPoint
pacman.py(41): from util import manhattanDistance
pacman.py(42): import util, layout
pacman.py(43): import sys, types, time, random, os
pacman.py(49): class GameState:
 --- modulename: pacman, funcname: GameState
pacman.py(49): class GameState:
pacman.py(62):   """
pacman.py(68):   def getLegalActions( self, agentIndex=0 ):
pacman.py(79):   def generateSuccessor( self, agentIndex, action):
pacman.py(110):   def getLegalPacmanActions( self ):
pacman.py(113):   def generatePacmanSuccessor( self, action ):
pacman.py(119):   def getPacmanState( self ):
pacman.py(128):   def getPacmanPosition( self ):
pacman.py(131):   def getGhostStates( self ):
pacman.py(134):   def getGhostState( self, agentIndex ):
pacman.py(139):   def getGhostPosition( self, agentIndex ):
pacman.py(144):   def getGhostPositions(self):
pacman.py(147):   def getNumAgents( self ):
pacman.py(150):   def getScore( self ):
pacman.py(153):   def getCapsules(self):
pacman.py(159):   def getNumFood( self ):
pacman.py(162):   def getFood(self):
pacman.py(174):   def getWalls(self):
pacman.py(186):   def hasFood(self, x, y):
pacman.py(189):   def hasWall(self, x, y):
pacman.py(192):   def isLose( self ):
pacman.py(195):   def isWin( self ):
pacman.py(203):   def __init__( self, prevState = None ):
pacman.py(212):   def deepCopy( self ):
pacman.py(217):   def __eq__( self, other ):
pacman.py(223):   def __hash__( self ):
pacman.py(229):   def __str__( self ):
pacman.py(233):   def initialize( self, layout, numGhostAgents=1000 ):
pacman.py(245): SCARED_TIME = 40    # Moves ghosts are scared
pacman.py(246): COLLISION_TOLERANCE = 0.7 # How close ghosts must be to Pacman to kill
pacman.py(247): TIME_PENALTY = 1 # Number of points lost each round
pacman.py(249): class ClassicGameRules:
 --- modulename: pacman, funcname: ClassicGameRules
pacman.py(249): class ClassicGameRules:
pacman.py(253):   """
pacman.py(254):   def __init__(self, timeout=30):
pacman.py(257):   def newGame( self, layout, pacmanAgent, ghostAgents, display, quiet = False, catchExceptions=False):
pacman.py(267):   def process(self, state, game):
pacman.py(274):   def win( self, state, game ):
pacman.py(278):   def lose( self, state, game ):
pacman.py(282):   def getProgress(self, game):
pacman.py(285):   def agentCrash(self, game, agentIndex):
pacman.py(291):   def getMaxTotalTime(self, agentIndex):
pacman.py(294):   def getMaxStartupTime(self, agentIndex):
pacman.py(297):   def getMoveWarningTime(self, agentIndex):
pacman.py(300):   def getMoveTimeout(self, agentIndex):
pacman.py(303):   def getMaxTimeWarnings(self, agentIndex):
pacman.py(306): class PacmanRules:
 --- modulename: pacman, funcname: PacmanRules
pacman.py(306): class PacmanRules:
pacman.py(310):   """
pacman.py(311):   PACMAN_SPEED=1
pacman.py(313):   def getLegalActions( state ):
pacman.py(318):   getLegalActions = staticmethod( getLegalActions )
pacman.py(320):   def applyAction( state, action ):
pacman.py(340):   applyAction = staticmethod( applyAction )
pacman.py(342):   def consume( position, state ):
pacman.py(362):   consume = staticmethod( consume )
pacman.py(364): class GhostRules:
 --- modulename: pacman, funcname: GhostRules
pacman.py(364): class GhostRules:
pacman.py(367):   """
pacman.py(368):   GHOST_SPEED=1.0
pacman.py(369):   def getLegalActions( state, ghostIndex ):
pacman.py(382):   getLegalActions = staticmethod( getLegalActions )
pacman.py(384):   def applyAction( state, action, ghostIndex):
pacman.py(395):   applyAction = staticmethod( applyAction )
pacman.py(397):   def decrementTimer( ghostState):
pacman.py(402):   decrementTimer = staticmethod( decrementTimer )
pacman.py(404):   def checkDeath( state, agentIndex):
pacman.py(417):   checkDeath = staticmethod( checkDeath )
pacman.py(419):   def collide( state, ghostState, agentIndex):
pacman.py(430):   collide = staticmethod( collide )
pacman.py(432):   def canKill( pacmanPosition, ghostPosition ):
pacman.py(434):   canKill = staticmethod( canKill )
pacman.py(436):   def placeGhost(state, ghostState):
pacman.py(438):   placeGhost = staticmethod( placeGhost )
pacman.py(444): def default(str):
pacman.py(447): def parseAgentArgs(str):
pacman.py(459): def readCommand( argv ):
pacman.py(570): def loadAgent(pacman, nographics):
pacman.py(593): def replayGame( layout, actions, display ):
pacman.py(611): def runGames( layout, pacman, ghosts, display, numGames, record, numTraining = 0, catchExceptions=False, timeout=30 ):
pacman.py(651): if __name__ == '__main__':
pacmanAgents.py(10): from game import Agent
pacmanAgents.py(11): import random
pacmanAgents.py(12): import game
pacmanAgents.py(13): import util
pacmanAgents.py(15): class LeftTurnAgent(game.Agent):
 --- modulename: pacmanAgents, funcname: LeftTurnAgent
pacmanAgents.py(15): class LeftTurnAgent(game.Agent):
pacmanAgents.py(16):   "An agent that turns left at every opportunity"
pacmanAgents.py(18):   def getAction(self, state):
pacmanAgents.py(29): class GreedyAgent(Agent):
 --- modulename: pacmanAgents, funcname: GreedyAgent
pacmanAgents.py(29): class GreedyAgent(Agent):
pacmanAgents.py(30):   def __init__(self, evalFn="scoreEvaluation"):
pacmanAgents.py(34):   def getAction(self, state):
pacmanAgents.py(45): def scoreEvaluation(state):
pacman.py(587):       if pacman in dir(module):
pacman.py(582):     for modulename in moduleNames:
pacman.py(583):       try:
pacman.py(584):         module = __import__(modulename[:-3])
 --- modulename: searchAgents, funcname: <module>
searchAgents.py(30): """
searchAgents.py(31): from game import Directions
searchAgents.py(32): from game import Agent
searchAgents.py(33): from game import Actions
searchAgents.py(34): import util
searchAgents.py(35): import time
searchAgents.py(36): import search
 --- modulename: search, funcname: <module>
search.py(12): """
search.py(14): import util
search.py(16): class SearchProblem:
 --- modulename: search, funcname: SearchProblem
search.py(16): class SearchProblem:
search.py(22):   """
search.py(24):   def getStartState(self):
search.py(30):   def isGoalState(self, state):
search.py(38):   def getSuccessors(self, state):
search.py(50):   def getCostOfActions(self, actions):
search.py(60): def tinyMazeSearch(problem):
search.py(70): def depthFirstSearch(problem):
search.py(87): def breadthFirstSearch(problem):
search.py(92): def uniformCostSearch(problem):
search.py(97): def nullHeuristic(state, problem=None):
search.py(104): def aStarSearch(problem, heuristic=nullHeuristic):
search.py(111): bfs = breadthFirstSearch
search.py(112): dfs = depthFirstSearch
search.py(113): astar = aStarSearch
search.py(114): ucs = uniformCostSearch
searchAgents.py(37): import searchAgents
searchAgents.py(39): class GoWestAgent(Agent):
 --- modulename: searchAgents, funcname: GoWestAgent
searchAgents.py(39): class GoWestAgent(Agent):
searchAgents.py(40):   "An agent that goes West until it can't."
searchAgents.py(42):   def getAction(self, state):
searchAgents.py(54): class SearchAgent(Agent):
 --- modulename: searchAgents, funcname: SearchAgent
searchAgents.py(54): class SearchAgent(Agent):
searchAgents.py(67):   """
searchAgents.py(69):   def __init__(self, fn='depthFirstSearch', prob='PositionSearchProblem', heuristic='nullHeuristic'):
searchAgents.py(96):   def registerInitialState(self, state):
searchAgents.py(112):   def getAction(self, state):
searchAgents.py(127): class PositionSearchProblem(search.SearchProblem):
 --- modulename: searchAgents, funcname: PositionSearchProblem
searchAgents.py(127): class PositionSearchProblem(search.SearchProblem):
searchAgents.py(136):   """
searchAgents.py(138):   def __init__(self, gameState, costFn = lambda x: 1, goal=(1,1), start=None, warn=True):
searchAgents.py(157):   def getStartState(self):
searchAgents.py(160):   def isGoalState(self, state):
searchAgents.py(173):   def getSuccessors(self, state):
searchAgents.py(203):   def getCostOfActions(self, actions):
searchAgents.py(219): class StayEastSearchAgent(SearchAgent):
 --- modulename: searchAgents, funcname: StayEastSearchAgent
searchAgents.py(219): class StayEastSearchAgent(SearchAgent):
searchAgents.py(225):   """
searchAgents.py(226):   def __init__(self):
searchAgents.py(231): class StayWestSearchAgent(SearchAgent):
 --- modulename: searchAgents, funcname: StayWestSearchAgent
searchAgents.py(231): class StayWestSearchAgent(SearchAgent):
searchAgents.py(237):   """
searchAgents.py(238):   def __init__(self):
searchAgents.py(243): def manhattanHeuristic(position, problem, info={}):
searchAgents.py(249): def euclideanHeuristic(position, problem, info={}):
searchAgents.py(259): class CornersProblem(search.SearchProblem):
 --- modulename: searchAgents, funcname: CornersProblem
searchAgents.py(259): class CornersProblem(search.SearchProblem):
searchAgents.py(264):   """
searchAgents.py(266):   def __init__(self, startingGameState):
searchAgents.py(281):   def getStartState(self):
searchAgents.py(286):   def isGoalState(self, state):
searchAgents.py(291):   def getSuccessors(self, state):
searchAgents.py(317):   def getCostOfActions(self, actions):
searchAgents.py(331): def cornersHeuristic(state, problem):
searchAgents.py(351): class AStarCornersAgent(SearchAgent):
 --- modulename: searchAgents, funcname: AStarCornersAgent
searchAgents.py(351): class AStarCornersAgent(SearchAgent):
searchAgents.py(352):   "A SearchAgent for FoodSearchProblem using A* and your foodHeuristic"
searchAgents.py(353):   def __init__(self):
searchAgents.py(357): class FoodSearchProblem:
 --- modulename: searchAgents, funcname: FoodSearchProblem
searchAgents.py(357): class FoodSearchProblem:
searchAgents.py(365):   """
searchAgents.py(366):   def __init__(self, startingGameState):
searchAgents.py(373):   def getStartState(self):
searchAgents.py(376):   def isGoalState(self, state):
searchAgents.py(379):   def getSuccessors(self, state):
searchAgents.py(393):   def getCostOfActions(self, actions):
searchAgents.py(407): class AStarFoodSearchAgent(SearchAgent):
 --- modulename: searchAgents, funcname: AStarFoodSearchAgent
searchAgents.py(407): class AStarFoodSearchAgent(SearchAgent):
searchAgents.py(408):   "A SearchAgent for FoodSearchProblem using A* and your foodHeuristic"
searchAgents.py(409):   def __init__(self):
searchAgents.py(413): def foodHeuristic(state, problem):
searchAgents.py(442): class ClosestDotSearchAgent(SearchAgent):
 --- modulename: searchAgents, funcname: ClosestDotSearchAgent
searchAgents.py(442): class ClosestDotSearchAgent(SearchAgent):
searchAgents.py(443):   "Search for all food using a sequence of searches"
searchAgents.py(444):   def registerInitialState(self, state):
searchAgents.py(459):   def findPathToClosestDot(self, gameState):
searchAgents.py(470): class AnyFoodSearchProblem(PositionSearchProblem):
 --- modulename: searchAgents, funcname: AnyFoodSearchProblem
searchAgents.py(470): class AnyFoodSearchProblem(PositionSearchProblem):
searchAgents.py(483):   """
searchAgents.py(485):   def __init__(self, gameState):
searchAgents.py(496):   def isGoalState(self, state):
searchAgents.py(510): class ApproximateSearchAgent(Agent):
 --- modulename: searchAgents, funcname: ApproximateSearchAgent
searchAgents.py(510): class ApproximateSearchAgent(Agent):
searchAgents.py(511):   "Implement your contest entry here.  Change anything but the class name."
searchAgents.py(513):   def registerInitialState(self, state):
searchAgents.py(517):   def getAction(self, state):
searchAgents.py(526): def mazeDistance(point1, point2, gameState):
pacman.py(587):       if pacman in dir(module):
pacman.py(588):         if nographics and modulename == 'keyboardAgents.py':
pacman.py(590):         return getattr(module, pacman)
pacman.py(525):   agentOpts = parseAgentArgs(options.agentArgs)
 --- modulename: pacman, funcname: parseAgentArgs
pacman.py(448):   if str == None: return {}
pacman.py(526):   if options.numTraining > 0:
pacman.py(529):   pacman = pacmanType(**agentOpts) # Instantiate Pacman with agentArgs
 --- modulename: searchAgents, funcname: __init__
searchAgents.py(73):     if fn not in dir(search): 
searchAgents.py(75):     func = getattr(search, fn)
searchAgents.py(76):     if 'heuristic' not in func.func_code.co_varnames:
searchAgents.py(77):       print('[SearchAgent] using function ' + fn) 
[SearchAgent] using function depthFirstSearch
searchAgents.py(78):       self.searchFunction = func
searchAgents.py(91):     if prob not in dir(searchAgents) or not prob.endswith('Problem'): 
searchAgents.py(93):     self.searchType = getattr(searchAgents, prob)
searchAgents.py(94):     print('[SearchAgent] using problem type ' + prob) 
[SearchAgent] using problem type PositionSearchProblem
pacman.py(530):   args['pacman'] = pacman
pacman.py(533):   if 'numTrain' in agentOpts:
pacman.py(538):   ghostType = loadAgent(options.ghost, noKeyboard)
 --- modulename: pacman, funcname: loadAgent
pacman.py(572):   pythonPathStr = os.path.expandvars("$PYTHONPATH")
 --- modulename: posixpath, funcname: expandvars
posixpath.py(293):     if '$' not in path:
posixpath.py(295):     if not _varprog:
posixpath.py(298):     i = 0
posixpath.py(299):     while True:
posixpath.py(300):         m = _varprog.search(path, i)
posixpath.py(301):         if not m:
posixpath.py(303):         i, j = m.span(0)
posixpath.py(304):         name = m.group(1)
posixpath.py(305):         if name.startswith('{') and name.endswith('}'):
posixpath.py(307):         if name in os.environ:
 --- modulename: UserDict, funcname: __contains__
UserDict.py(71):         return key in self.data
posixpath.py(313):             i = j
posixpath.py(299):     while True:
posixpath.py(300):         m = _varprog.search(path, i)
posixpath.py(301):         if not m:
posixpath.py(302):             break
posixpath.py(314):     return path
pacman.py(573):   if pythonPathStr.find(';') == -1:
pacman.py(574):     pythonPathDirs = pythonPathStr.split(':')
pacman.py(577):   pythonPathDirs.append('.')
pacman.py(579):   for moduleDir in pythonPathDirs:
pacman.py(580):     if not os.path.isdir(moduleDir): continue
 --- modulename: genericpath, funcname: isdir
genericpath.py(40):     try:
genericpath.py(41):         st = os.stat(s)
genericpath.py(42):     except os.error:
genericpath.py(43):         return False
pacman.py(579):   for moduleDir in pythonPathDirs:
pacman.py(580):     if not os.path.isdir(moduleDir): continue
 --- modulename: genericpath, funcname: isdir
genericpath.py(40):     try:
genericpath.py(41):         st = os.stat(s)
genericpath.py(44):     return stat.S_ISDIR(st.st_mode)
 --- modulename: stat, funcname: S_ISDIR
stat.py(41):     return S_IFMT(mode) == S_IFDIR
 --- modulename: stat, funcname: S_IFMT
stat.py(25):     return mode & 0170000
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(581):     moduleNames = [f for f in os.listdir(moduleDir) if f.endswith('gents.py')]
pacman.py(582):     for modulename in moduleNames:
pacman.py(583):       try:
pacman.py(584):         module = __import__(modulename[:-3])
pacman.py(587):       if pacman in dir(module):
pacman.py(588):         if nographics and modulename == 'keyboardAgents.py':
pacman.py(590):         return getattr(module, pacman)
pacman.py(539):   args['ghosts'] = [ghostType( i+1 ) for i in range( options.numGhosts )]
 --- modulename: ghostAgents, funcname: __init__
ghostAgents.py(18):     self.index = index
pacman.py(539):   args['ghosts'] = [ghostType( i+1 ) for i in range( options.numGhosts )]
 --- modulename: ghostAgents, funcname: __init__
ghostAgents.py(18):     self.index = index
pacman.py(539):   args['ghosts'] = [ghostType( i+1 ) for i in range( options.numGhosts )]
 --- modulename: ghostAgents, funcname: __init__
ghostAgents.py(18):     self.index = index
pacman.py(539):   args['ghosts'] = [ghostType( i+1 ) for i in range( options.numGhosts )]
 --- modulename: ghostAgents, funcname: __init__
ghostAgents.py(18):     self.index = index
pacman.py(539):   args['ghosts'] = [ghostType( i+1 ) for i in range( options.numGhosts )]
pacman.py(542):   if options.quietGraphics:
pacman.py(545):   elif options.textGraphics:
pacman.py(550):     import graphicsDisplay
 --- modulename: graphicsDisplay, funcname: <module>
graphicsDisplay.py(9): from graphicsUtils import *
 --- modulename: graphicsUtils, funcname: <module>
graphicsUtils.py(9): import sys
graphicsUtils.py(10): import math
graphicsUtils.py(11): import random
graphicsUtils.py(12): import string
graphicsUtils.py(13): import time
graphicsUtils.py(14): import types
graphicsUtils.py(15): import Tkinter
 --- modulename: Tkinter, funcname: <module>
Tkinter.py(31): """
Tkinter.py(33): __version__ = "$Revision: 81008 $"
Tkinter.py(35): import sys
Tkinter.py(36): if sys.platform == "win32":
Tkinter.py(39): import _tkinter # If this fails your Python may not be configured for Tk
Tkinter.py(40): tkinter = _tkinter # b/w compat for export
Tkinter.py(41): TclError = _tkinter.TclError
Tkinter.py(42): from types import *
Tkinter.py(43): from Tkconstants import *
 --- modulename: Tkconstants, funcname: <module>
Tkconstants.py(4): NO=FALSE=OFF=0
Tkconstants.py(5): YES=TRUE=ON=1
Tkconstants.py(8): N='n'
Tkconstants.py(9): S='s'
Tkconstants.py(10): W='w'
Tkconstants.py(11): E='e'
Tkconstants.py(12): NW='nw'
Tkconstants.py(13): SW='sw'
Tkconstants.py(14): NE='ne'
Tkconstants.py(15): SE='se'
Tkconstants.py(16): NS='ns'
Tkconstants.py(17): EW='ew'
Tkconstants.py(18): NSEW='nsew'
Tkconstants.py(19): CENTER='center'
Tkconstants.py(22): NONE='none'
Tkconstants.py(23): X='x'
Tkconstants.py(24): Y='y'
Tkconstants.py(25): BOTH='both'
Tkconstants.py(28): LEFT='left'
Tkconstants.py(29): TOP='top'
Tkconstants.py(30): RIGHT='right'
Tkconstants.py(31): BOTTOM='bottom'
Tkconstants.py(34): RAISED='raised'
Tkconstants.py(35): SUNKEN='sunken'
Tkconstants.py(36): FLAT='flat'
Tkconstants.py(37): RIDGE='ridge'
Tkconstants.py(38): GROOVE='groove'
Tkconstants.py(39): SOLID = 'solid'
Tkconstants.py(42): HORIZONTAL='horizontal'
Tkconstants.py(43): VERTICAL='vertical'
Tkconstants.py(46): NUMERIC='numeric'
Tkconstants.py(49): CHAR='char'
Tkconstants.py(50): WORD='word'
Tkconstants.py(53): BASELINE='baseline'
Tkconstants.py(56): INSIDE='inside'
Tkconstants.py(57): OUTSIDE='outside'
Tkconstants.py(60): SEL='sel'
Tkconstants.py(61): SEL_FIRST='sel.first'
Tkconstants.py(62): SEL_LAST='sel.last'
Tkconstants.py(63): END='end'
Tkconstants.py(64): INSERT='insert'
Tkconstants.py(65): CURRENT='current'
Tkconstants.py(66): ANCHOR='anchor'
Tkconstants.py(67): ALL='all' # e.g. Canvas.delete(ALL)
Tkconstants.py(70): NORMAL='normal'
Tkconstants.py(71): DISABLED='disabled'
Tkconstants.py(72): ACTIVE='active'
Tkconstants.py(74): HIDDEN='hidden'
Tkconstants.py(77): CASCADE='cascade'
Tkconstants.py(78): CHECKBUTTON='checkbutton'
Tkconstants.py(79): COMMAND='command'
Tkconstants.py(80): RADIOBUTTON='radiobutton'
Tkconstants.py(81): SEPARATOR='separator'
Tkconstants.py(84): SINGLE='single'
Tkconstants.py(85): BROWSE='browse'
Tkconstants.py(86): MULTIPLE='multiple'
Tkconstants.py(87): EXTENDED='extended'
Tkconstants.py(91): DOTBOX='dotbox'
Tkconstants.py(92): UNDERLINE='underline'
Tkconstants.py(95): PIESLICE='pieslice'
Tkconstants.py(96): CHORD='chord'
Tkconstants.py(97): ARC='arc'
Tkconstants.py(98): FIRST='first'
Tkconstants.py(99): LAST='last'
Tkconstants.py(100): BUTT='butt'
Tkconstants.py(101): PROJECTING='projecting'
Tkconstants.py(102): ROUND='round'
Tkconstants.py(103): BEVEL='bevel'
Tkconstants.py(104): MITER='miter'
Tkconstants.py(107): MOVETO='moveto'
Tkconstants.py(108): SCROLL='scroll'
Tkconstants.py(109): UNITS='units'
Tkconstants.py(110): PAGES='pages'
Tkinter.py(44): import re
Tkinter.py(46): wantobjects = 1
Tkinter.py(48): TkVersion = float(_tkinter.TK_VERSION)
Tkinter.py(49): TclVersion = float(_tkinter.TCL_VERSION)
Tkinter.py(51): READABLE = _tkinter.READABLE
Tkinter.py(52): WRITABLE = _tkinter.WRITABLE
Tkinter.py(53): EXCEPTION = _tkinter.EXCEPTION
Tkinter.py(56): try: _tkinter.createfilehandler
Tkinter.py(58): try: _tkinter.deletefilehandler
Tkinter.py(62): _magic_re = re.compile(r'([\\{}])')
 --- modulename: re, funcname: compile
re.py(190):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
re.py(228):     cachekey = (type(key[0]),) + key
re.py(229):     p = _cache.get(cachekey)
re.py(230):     if p is not None:
re.py(232):     pattern, flags = key
re.py(233):     if isinstance(pattern, _pattern_type):
re.py(237):     if not sre_compile.isstring(pattern):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(476):     for tp in STRING_TYPES:
sre_compile.py(477):         if isinstance(obj, tp):
sre_compile.py(478):             return 1
re.py(239):     try:
re.py(240):         p = sre_compile.compile(pattern, flags)
 --- modulename: sre_compile, funcname: compile
sre_compile.py(499):     if isstring(p):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(476):     for tp in STRING_TYPES:
sre_compile.py(477):         if isinstance(obj, tp):
sre_compile.py(478):             return 1
sre_compile.py(500):         pattern = p
sre_compile.py(501):         p = sre_parse.parse(p, flags)
 --- modulename: sre_parse, funcname: parse
sre_parse.py(679):     source = Tokenizer(str)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(180):         self.string = string
sre_parse.py(181):         self.index = 0
sre_parse.py(182):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(681):     if pattern is None:
sre_parse.py(682):         pattern = Pattern()
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(69):         self.flags = 0
sre_parse.py(70):         self.open = []
sre_parse.py(71):         self.groups = 1
sre_parse.py(72):         self.groupdict = {}
sre_parse.py(683):     pattern.flags = flags
sre_parse.py(684):     pattern.str = str
sre_parse.py(686):     p = _parse_sub(source, pattern, 0)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(305):     items = []
sre_parse.py(306):     itemsappend = items.append
sre_parse.py(307):     sourcematch = source.match
sre_parse.py(308):     while 1:
sre_parse.py(309):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(382):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(92):         self.pattern = pattern
sre_parse.py(93):         if data is None:
sre_parse.py(94):             data = []
sre_parse.py(95):         self.data = data
sre_parse.py(96):         self.width = None
sre_parse.py(385):     subpatternappend = subpattern.append
sre_parse.py(386):     sourceget = source.get
sre_parse.py(387):     sourcematch = source.match
sre_parse.py(388):     _len = len
sre_parse.py(389):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(390):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(391):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(392):     REPEATCODES = _REPEATCODES
sre_parse.py(394):     while 1:
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(402):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(413):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(416):         elif this == "[":
sre_parse.py(473):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(526):         elif this == ".":
sre_parse.py(529):         elif this == "(":
sre_parse.py(530):             group = 1
sre_parse.py(531):             name = None
sre_parse.py(532):             condgroup = None
sre_parse.py(533):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(636):             if group:
sre_parse.py(638):                 if group == 2:
sre_parse.py(642):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
sre_parse.py(74):         gid = self.groups
sre_parse.py(75):         self.groups = gid + 1
sre_parse.py(76):         if name is not None:
sre_parse.py(82):         self.open.append(gid)
sre_parse.py(83):         return gid
sre_parse.py(643):                 if condgroup:
sre_parse.py(646):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(305):     items = []
sre_parse.py(306):     itemsappend = items.append
sre_parse.py(307):     sourcematch = source.match
sre_parse.py(308):     while 1:
sre_parse.py(309):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(382):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(92):         self.pattern = pattern
sre_parse.py(93):         if data is None:
sre_parse.py(94):             data = []
sre_parse.py(95):         self.data = data
sre_parse.py(96):         self.width = None
sre_parse.py(385):     subpatternappend = subpattern.append
sre_parse.py(386):     sourceget = source.get
sre_parse.py(387):     sourcematch = source.match
sre_parse.py(388):     _len = len
sre_parse.py(389):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(390):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(391):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(392):     REPEATCODES = _REPEATCODES
sre_parse.py(394):     while 1:
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(189):             try:
sre_parse.py(190):                 c = self.string[self.index + 1]
sre_parse.py(193):             char = char + c
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(402):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(413):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(416):         elif this == "[":
sre_parse.py(418):             set = []
sre_parse.py(419):             setappend = set.append
sre_parse.py(422):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(425):             start = set[:]
sre_parse.py(426):             while 1:
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(431):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(228):     code = ESCAPES.get(escape)
sre_parse.py(229):     if code:
sre_parse.py(230):         return code
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(432):                 elif this:
sre_parse.py(433):                     code1 = LITERAL, ord(this)
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(429):                     break
sre_parse.py(465):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(467):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
sre_parse.py(471):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(140):         self.data.append(code)
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(397):             break # end of subpattern
sre_parse.py(674):     return subpattern
sre_parse.py(310):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(312):         if not nested:
sre_parse.py(314):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(198):             if skip:
sre_parse.py(200):             return 1
sre_parse.py(315):             break
sre_parse.py(319):     if len(items) == 1:
sre_parse.py(320):         return items[0]
sre_parse.py(647):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(198):             if skip:
sre_parse.py(199):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(185):             self.next = None
sre_parse.py(186):             return
sre_parse.py(200):             return 1
sre_parse.py(649):                 if group is not None:
sre_parse.py(650):                     state.closegroup(group)
 --- modulename: sre_parse, funcname: closegroup
sre_parse.py(85):         self.open.remove(gid)
sre_parse.py(651):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(140):         self.data.append(code)
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(185):             self.next = None
sre_parse.py(186):             return
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(400):             break # end of pattern
sre_parse.py(674):     return subpattern
sre_parse.py(310):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(312):         if not nested:
sre_parse.py(313):             break
sre_parse.py(319):     if len(items) == 1:
sre_parse.py(320):         return items[0]
sre_parse.py(688):     tail = source.get()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(185):             self.next = None
sre_parse.py(186):             return
sre_parse.py(205):         return this
sre_parse.py(689):     if tail == ")":
sre_parse.py(691):     elif tail:
sre_parse.py(694):     if flags & SRE_FLAG_DEBUG:
sre_parse.py(697):     if not (flags & SRE_FLAG_VERBOSE) and p.pattern.flags & SRE_FLAG_VERBOSE:
sre_parse.py(702):     return p
sre_compile.py(505):     code = _code(p, flags)
 --- modulename: sre_compile, funcname: _code
sre_compile.py(483):     flags = p.pattern.flags | flags
sre_compile.py(484):     code = []
sre_compile.py(487):     _compile_info(code, p, flags)
 --- modulename: sre_compile, funcname: _compile_info
sre_compile.py(366):     lo, hi = pattern.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(143):         if self.width:
sre_parse.py(145):         lo = hi = 0L
sre_parse.py(146):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(147):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(149):             if op is BRANCH:
sre_parse.py(158):             elif op is CALL:
sre_parse.py(162):             elif op is SUBPATTERN:
sre_parse.py(163):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(143):         if self.width:
sre_parse.py(145):         lo = hi = 0L
sre_parse.py(146):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(147):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(149):             if op is BRANCH:
sre_parse.py(158):             elif op is CALL:
sre_parse.py(162):             elif op is SUBPATTERN:
sre_parse.py(166):             elif op in REPEATCODES:
sre_parse.py(170):             elif op in UNITCODES:
sre_parse.py(171):                 lo = lo + 1
sre_parse.py(172):                 hi = hi + 1
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(175):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
sre_parse.py(176):         return self.width
sre_parse.py(164):                 lo = lo + i
sre_parse.py(165):                 hi = hi + j
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(175):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
sre_parse.py(176):         return self.width
sre_compile.py(367):     if lo == 0:
sre_compile.py(370):     prefix = []
sre_compile.py(371):     prefixappend = prefix.append
sre_compile.py(372):     prefix_skip = 0
sre_compile.py(373):     charset = [] # not used
sre_compile.py(374):     charsetappend = charset.append
sre_compile.py(375):     if not (flags & SRE_FLAG_IGNORECASE):
sre_compile.py(377):         for op, av in pattern.data:
sre_compile.py(378):             if op is LITERAL:
sre_compile.py(382):             elif op is SUBPATTERN and len(av[1]) == 1:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
sre_compile.py(383):                 op, av = av[1][0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(384):                 if op is LITERAL:
sre_compile.py(387):                     break
sre_compile.py(391):         if not prefix and pattern.data:
sre_compile.py(392):             op, av = pattern.data[0]
sre_compile.py(393):             if op is SUBPATTERN and av[1]:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
sre_compile.py(394):                 op, av = av[1][0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(395):                 if op is LITERAL:
sre_compile.py(397):                 elif op is BRANCH:
sre_compile.py(430):     emit = code.append
sre_compile.py(431):     emit(OPCODES[INFO])
sre_compile.py(432):     skip = len(code); emit(0)
sre_compile.py(434):     mask = 0
sre_compile.py(435):     if prefix:
sre_compile.py(439):     elif charset:
sre_compile.py(441):     emit(mask)
sre_compile.py(443):     if lo < MAXCODE:
sre_compile.py(444):         emit(lo)
sre_compile.py(448):     if hi < MAXCODE:
sre_compile.py(449):         emit(hi)
sre_compile.py(453):     if prefix:
sre_compile.py(464):     elif charset:
sre_compile.py(466):     code[skip] = len(code) - skip
sre_compile.py(490):     _compile(code, p.data, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(35):     emit = code.append
sre_compile.py(36):     _len = len
sre_compile.py(37):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(38):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(39):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(40):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(41):     for op, av in pattern:
sre_compile.py(42):         if op in LITERAL_CODES:
sre_compile.py(49):         elif op is IN:
sre_compile.py(60):         elif op is ANY:
sre_compile.py(65):         elif op in REPEATING_CODES:
sre_compile.py(97):         elif op is SUBPATTERN:
sre_compile.py(98):             if av[0]:
sre_compile.py(99):                 emit(OPCODES[MARK])
sre_compile.py(100):                 emit((av[0]-1)*2)
sre_compile.py(102):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(35):     emit = code.append
sre_compile.py(36):     _len = len
sre_compile.py(37):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(38):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(39):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(40):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(42):         if op in LITERAL_CODES:
sre_compile.py(49):         elif op is IN:
sre_compile.py(50):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(55):                 emit(OPCODES[op])
sre_compile.py(56):                 fixup = _identityfunction
sre_compile.py(57):             skip = _len(code); emit(0)
sre_compile.py(58):             _compile_charset(av, flags, code, fixup)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(181):     emit = code.append
sre_compile.py(182):     if fixup is None:
sre_compile.py(184):     for op, av in _optimize_charset(charset, fixup):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(210):     out = []
sre_compile.py(211):     outappend = out.append
sre_compile.py(212):     charmap = [0]*256
sre_compile.py(213):     try:
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(218):                 charmap[fixup(av)] = 1
 --- modulename: sre_compile, funcname: _identityfunction
sre_compile.py(26):     return x
sre_compile.py(214):         for op, av in charset:
sre_compile.py(229):     i = p = n = 0
sre_compile.py(230):     runs = []
sre_compile.py(231):     runsappend = runs.append
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(235):                 p = i
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(238):             runsappend((p, n))
sre_compile.py(239):             n = 0
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(235):                 p = i
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(238):             runsappend((p, n))
sre_compile.py(239):             n = 0
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(234):             if n == 0:
sre_compile.py(235):                 p = i
sre_compile.py(236):             n = n + 1
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(238):             runsappend((p, n))
sre_compile.py(239):             n = 0
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(233):         if c:
sre_compile.py(237):         elif n:
sre_compile.py(240):         i = i + 1
sre_compile.py(232):     for c in charmap:
sre_compile.py(241):     if n:
sre_compile.py(243):     if len(runs) <= 2:
sre_compile.py(254):         data = _mk_bitmap(charmap)
 --- modulename: sre_compile, funcname: _mk_bitmap
sre_compile.py(260):     data = []
sre_compile.py(261):     dataappend = data.append
sre_compile.py(262):     if _sre.CODESIZE == 2:
sre_compile.py(265):         start = (1L, 0L)
sre_compile.py(266):     m, v = start
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(272):             dataappend(v)
sre_compile.py(273):             m, v = start
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(272):             dataappend(v)
sre_compile.py(273):             m, v = start
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(269):             v = v + m
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(272):             dataappend(v)
sre_compile.py(273):             m, v = start
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(269):             v = v + m
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(269):             v = v + m
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(272):             dataappend(v)
sre_compile.py(273):             m, v = start
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(272):             dataappend(v)
sre_compile.py(273):             m, v = start
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(272):             dataappend(v)
sre_compile.py(273):             m, v = start
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(272):             dataappend(v)
sre_compile.py(273):             m, v = start
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(267):     for c in bits:
sre_compile.py(268):         if c:
sre_compile.py(270):         m = m + m
sre_compile.py(271):         if m > MAXCODE:
sre_compile.py(272):             dataappend(v)
sre_compile.py(273):             m, v = start
sre_compile.py(267):     for c in bits:
sre_compile.py(274):     return data
sre_compile.py(255):         outappend((CHARSET, data))
sre_compile.py(256):         return out
sre_compile.py(185):         emit(OPCODES[op])
sre_compile.py(186):         if op is NEGATE:
sre_compile.py(188):         elif op is LITERAL:
sre_compile.py(190):         elif op is RANGE:
sre_compile.py(193):         elif op is CHARSET:
sre_compile.py(194):             code.extend(av)
sre_compile.py(184):     for op, av in _optimize_charset(charset, fixup):
sre_compile.py(206):     emit(OPCODES[FAILURE])
sre_compile.py(59):             code[skip] = _len(code) - skip
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(103):             if av[0]:
sre_compile.py(104):                 emit(OPCODES[MARK])
sre_compile.py(105):                 emit((av[0]-1)*2+1)
sre_compile.py(41):     for op, av in pattern:
sre_compile.py(492):     code.append(OPCODES[SUCCESS])
sre_compile.py(494):     return code
sre_compile.py(510):     if p.pattern.groups > 100:
sre_compile.py(516):     groupindex = p.pattern.groupdict
sre_compile.py(517):     indexgroup = [None] * p.pattern.groups
sre_compile.py(518):     for k, i in groupindex.items():
sre_compile.py(521):     return _sre.compile(
sre_compile.py(522):         pattern, flags | p.pattern.flags, code,
sre_compile.py(523):         p.pattern.groups-1,
sre_compile.py(524):         groupindex, indexgroup
re.py(243):     if len(_cache) >= _MAXCACHE:
re.py(245):     _cache[cachekey] = p
re.py(246):     return p
Tkinter.py(63): _space_re = re.compile(r'([\s])')
 --- modulename: re, funcname: compile
re.py(190):     return _compile(pattern, flags)
 --- modulename: re, funcname: _compile
re.py(228):     cachekey = (type(key[0]),) + key
re.py(229):     p = _cache.get(cachekey)
re.py(230):     if p is not None:
re.py(232):     pattern, flags = key
re.py(233):     if isinstance(pattern, _pattern_type):
re.py(237):     if not sre_compile.isstring(pattern):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(476):     for tp in STRING_TYPES:
sre_compile.py(477):         if isinstance(obj, tp):
sre_compile.py(478):             return 1
re.py(239):     try:
re.py(240):         p = sre_compile.compile(pattern, flags)
 --- modulename: sre_compile, funcname: compile
sre_compile.py(499):     if isstring(p):
 --- modulename: sre_compile, funcname: isstring
sre_compile.py(476):     for tp in STRING_TYPES:
sre_compile.py(477):         if isinstance(obj, tp):
sre_compile.py(478):             return 1
sre_compile.py(500):         pattern = p
sre_compile.py(501):         p = sre_parse.parse(p, flags)
 --- modulename: sre_parse, funcname: parse
sre_parse.py(679):     source = Tokenizer(str)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(180):         self.string = string
sre_parse.py(181):         self.index = 0
sre_parse.py(182):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(681):     if pattern is None:
sre_parse.py(682):         pattern = Pattern()
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(69):         self.flags = 0
sre_parse.py(70):         self.open = []
sre_parse.py(71):         self.groups = 1
sre_parse.py(72):         self.groupdict = {}
sre_parse.py(683):     pattern.flags = flags
sre_parse.py(684):     pattern.str = str
sre_parse.py(686):     p = _parse_sub(source, pattern, 0)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(305):     items = []
sre_parse.py(306):     itemsappend = items.append
sre_parse.py(307):     sourcematch = source.match
sre_parse.py(308):     while 1:
sre_parse.py(309):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(382):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(92):         self.pattern = pattern
sre_parse.py(93):         if data is None:
sre_parse.py(94):             data = []
sre_parse.py(95):         self.data = data
sre_parse.py(96):         self.width = None
sre_parse.py(385):     subpatternappend = subpattern.append
sre_parse.py(386):     sourceget = source.get
sre_parse.py(387):     sourcematch = source.match
sre_parse.py(388):     _len = len
sre_parse.py(389):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(390):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(391):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(392):     REPEATCODES = _REPEATCODES
sre_parse.py(394):     while 1:
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(402):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(413):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(416):         elif this == "[":
sre_parse.py(473):         elif this and this[0] in REPEAT_CHARS:
sre_parse.py(526):         elif this == ".":
sre_parse.py(529):         elif this == "(":
sre_parse.py(530):             group = 1
sre_parse.py(531):             name = None
sre_parse.py(532):             condgroup = None
sre_parse.py(533):             if sourcematch("?"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(636):             if group:
sre_parse.py(638):                 if group == 2:
sre_parse.py(642):                     group = state.opengroup(name)
 --- modulename: sre_parse, funcname: opengroup
sre_parse.py(74):         gid = self.groups
sre_parse.py(75):         self.groups = gid + 1
sre_parse.py(76):         if name is not None:
sre_parse.py(82):         self.open.append(gid)
sre_parse.py(83):         return gid
sre_parse.py(643):                 if condgroup:
sre_parse.py(646):                     p = _parse_sub(source, state)
 --- modulename: sre_parse, funcname: _parse_sub
sre_parse.py(305):     items = []
sre_parse.py(306):     itemsappend = items.append
sre_parse.py(307):     sourcematch = source.match
sre_parse.py(308):     while 1:
sre_parse.py(309):         itemsappend(_parse(source, state))
 --- modulename: sre_parse, funcname: _parse
sre_parse.py(382):     subpattern = SubPattern(state)
 --- modulename: sre_parse, funcname: __init__
sre_parse.py(92):         self.pattern = pattern
sre_parse.py(93):         if data is None:
sre_parse.py(94):             data = []
sre_parse.py(95):         self.data = data
sre_parse.py(96):         self.width = None
sre_parse.py(385):     subpatternappend = subpattern.append
sre_parse.py(386):     sourceget = source.get
sre_parse.py(387):     sourcematch = source.match
sre_parse.py(388):     _len = len
sre_parse.py(389):     PATTERNENDERS = _PATTERNENDERS
sre_parse.py(390):     ASSERTCHARS = _ASSERTCHARS
sre_parse.py(391):     LOOKBEHINDASSERTCHARS = _LOOKBEHINDASSERTCHARS
sre_parse.py(392):     REPEATCODES = _REPEATCODES
sre_parse.py(394):     while 1:
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(189):             try:
sre_parse.py(190):                 c = self.string[self.index + 1]
sre_parse.py(193):             char = char + c
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(402):         if state.flags & SRE_FLAG_VERBOSE:
sre_parse.py(413):         if this and this[0] not in SPECIAL_CHARS:
sre_parse.py(416):         elif this == "[":
sre_parse.py(418):             set = []
sre_parse.py(419):             setappend = set.append
sre_parse.py(422):             if sourcematch("^"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(425):             start = set[:]
sre_parse.py(426):             while 1:
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(430):                 elif this and this[0] == "\\":
sre_parse.py(431):                     code1 = _class_escape(source, this)
 --- modulename: sre_parse, funcname: _class_escape
sre_parse.py(228):     code = ESCAPES.get(escape)
sre_parse.py(229):     if code:
sre_parse.py(231):     code = CATEGORIES.get(escape)
sre_parse.py(232):     if code and code[0] == IN:
sre_parse.py(233):         return code
sre_parse.py(436):                 if sourcematch("-"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(460):                     if code1[0] is IN:
sre_parse.py(461):                         code1 = code1[1][0]
sre_parse.py(462):                     setappend(code1)
sre_parse.py(427):                 this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(187):         char = self.string[self.index]
sre_parse.py(188):         if char[0] == "\\":
sre_parse.py(194):         self.index = self.index + len(char)
sre_parse.py(195):         self.next = char
sre_parse.py(205):         return this
sre_parse.py(428):                 if this == "]" and set != start:
sre_parse.py(429):                     break
sre_parse.py(465):             if _len(set)==1 and set[0][0] is LITERAL:
sre_parse.py(467):             elif _len(set)==2 and set[0][0] is NEGATE and set[1][0] is LITERAL:
sre_parse.py(471):                 subpatternappend((IN, set))
 --- modulename: sre_parse, funcname: append
sre_parse.py(140):         self.data.append(code)
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(397):             break # end of subpattern
sre_parse.py(674):     return subpattern
sre_parse.py(310):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(312):         if not nested:
sre_parse.py(314):         if not source.next or sourcematch(")", 0):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(198):             if skip:
sre_parse.py(200):             return 1
sre_parse.py(315):             break
sre_parse.py(319):     if len(items) == 1:
sre_parse.py(320):         return items[0]
sre_parse.py(647):                 if not sourcematch(")"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(198):             if skip:
sre_parse.py(199):                 self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(185):             self.next = None
sre_parse.py(186):             return
sre_parse.py(200):             return 1
sre_parse.py(649):                 if group is not None:
sre_parse.py(650):                     state.closegroup(group)
 --- modulename: sre_parse, funcname: closegroup
sre_parse.py(85):         self.open.remove(gid)
sre_parse.py(651):                 subpatternappend((SUBPATTERN, (group, p)))
 --- modulename: sre_parse, funcname: append
sre_parse.py(140):         self.data.append(code)
sre_parse.py(396):         if source.next in PATTERNENDERS:
sre_parse.py(398):         this = sourceget()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(185):             self.next = None
sre_parse.py(186):             return
sre_parse.py(205):         return this
sre_parse.py(399):         if this is None:
sre_parse.py(400):             break # end of pattern
sre_parse.py(674):     return subpattern
sre_parse.py(310):         if sourcematch("|"):
 --- modulename: sre_parse, funcname: match
sre_parse.py(197):         if char == self.next:
sre_parse.py(201):         return 0
sre_parse.py(312):         if not nested:
sre_parse.py(313):             break
sre_parse.py(319):     if len(items) == 1:
sre_parse.py(320):         return items[0]
sre_parse.py(688):     tail = source.get()
 --- modulename: sre_parse, funcname: get
sre_parse.py(203):         this = self.next
sre_parse.py(204):         self.__next()
 --- modulename: sre_parse, funcname: __next
sre_parse.py(184):         if self.index >= len(self.string):
sre_parse.py(185):             self.next = None
sre_parse.py(186):             return
sre_parse.py(205):         return this
sre_parse.py(689):     if tail == ")":
sre_parse.py(691):     elif tail:
sre_parse.py(694):     if flags & SRE_FLAG_DEBUG:
sre_parse.py(697):     if not (flags & SRE_FLAG_VERBOSE) and p.pattern.flags & SRE_FLAG_VERBOSE:
sre_parse.py(702):     return p
sre_compile.py(505):     code = _code(p, flags)
 --- modulename: sre_compile, funcname: _code
sre_compile.py(483):     flags = p.pattern.flags | flags
sre_compile.py(484):     code = []
sre_compile.py(487):     _compile_info(code, p, flags)
 --- modulename: sre_compile, funcname: _compile_info
sre_compile.py(366):     lo, hi = pattern.getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(143):         if self.width:
sre_parse.py(145):         lo = hi = 0L
sre_parse.py(146):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(147):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(149):             if op is BRANCH:
sre_parse.py(158):             elif op is CALL:
sre_parse.py(162):             elif op is SUBPATTERN:
sre_parse.py(163):                 i, j = av[1].getwidth()
 --- modulename: sre_parse, funcname: getwidth
sre_parse.py(143):         if self.width:
sre_parse.py(145):         lo = hi = 0L
sre_parse.py(146):         UNITCODES = (ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY)
sre_parse.py(147):         REPEATCODES = (MIN_REPEAT, MAX_REPEAT)
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(149):             if op is BRANCH:
sre_parse.py(158):             elif op is CALL:
sre_parse.py(162):             elif op is SUBPATTERN:
sre_parse.py(166):             elif op in REPEATCODES:
sre_parse.py(170):             elif op in UNITCODES:
sre_parse.py(171):                 lo = lo + 1
sre_parse.py(172):                 hi = hi + 1
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(175):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
sre_parse.py(176):         return self.width
sre_parse.py(164):                 lo = lo + i
sre_parse.py(165):                 hi = hi + j
sre_parse.py(148):         for op, av in self.data:
sre_parse.py(175):         self.width = int(min(lo, sys.maxint)), int(min(hi, sys.maxint))
sre_parse.py(176):         return self.width
sre_compile.py(367):     if lo == 0:
sre_compile.py(370):     prefix = []
sre_compile.py(371):     prefixappend = prefix.append
sre_compile.py(372):     prefix_skip = 0
sre_compile.py(373):     charset = [] # not used
sre_compile.py(374):     charsetappend = charset.append
sre_compile.py(375):     if not (flags & SRE_FLAG_IGNORECASE):
sre_compile.py(377):         for op, av in pattern.data:
sre_compile.py(378):             if op is LITERAL:
sre_compile.py(382):             elif op is SUBPATTERN and len(av[1]) == 1:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
sre_compile.py(383):                 op, av = av[1][0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(384):                 if op is LITERAL:
sre_compile.py(387):                     break
sre_compile.py(391):         if not prefix and pattern.data:
sre_compile.py(392):             op, av = pattern.data[0]
sre_compile.py(393):             if op is SUBPATTERN and av[1]:
 --- modulename: sre_parse, funcname: __len__
sre_parse.py(128):         return len(self.data)
sre_compile.py(394):                 op, av = av[1][0]
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(395):                 if op is LITERAL:
sre_compile.py(397):                 elif op is BRANCH:
sre_compile.py(430):     emit = code.append
sre_compile.py(431):     emit(OPCODES[INFO])
sre_compile.py(432):     skip = len(code); emit(0)
sre_compile.py(434):     mask = 0
sre_compile.py(435):     if prefix:
sre_compile.py(439):     elif charset:
sre_compile.py(441):     emit(mask)
sre_compile.py(443):     if lo < MAXCODE:
sre_compile.py(444):         emit(lo)
sre_compile.py(448):     if hi < MAXCODE:
sre_compile.py(449):         emit(hi)
sre_compile.py(453):     if prefix:
sre_compile.py(464):     elif charset:
sre_compile.py(466):     code[skip] = len(code) - skip
sre_compile.py(490):     _compile(code, p.data, flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(35):     emit = code.append
sre_compile.py(36):     _len = len
sre_compile.py(37):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(38):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(39):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(40):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(41):     for op, av in pattern:
sre_compile.py(42):         if op in LITERAL_CODES:
sre_compile.py(49):         elif op is IN:
sre_compile.py(60):         elif op is ANY:
sre_compile.py(65):         elif op in REPEATING_CODES:
sre_compile.py(97):         elif op is SUBPATTERN:
sre_compile.py(98):             if av[0]:
sre_compile.py(99):                 emit(OPCODES[MARK])
sre_compile.py(100):                 emit((av[0]-1)*2)
sre_compile.py(102):             _compile(code, av[1], flags)
 --- modulename: sre_compile, funcname: _compile
sre_compile.py(35):     emit = code.append
sre_compile.py(36):     _len = len
sre_compile.py(37):     LITERAL_CODES = _LITERAL_CODES
sre_compile.py(38):     REPEATING_CODES = _REPEATING_CODES
sre_compile.py(39):     SUCCESS_CODES = _SUCCESS_CODES
sre_compile.py(40):     ASSERT_CODES = _ASSERT_CODES
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(42):         if op in LITERAL_CODES:
sre_compile.py(49):         elif op is IN:
sre_compile.py(50):             if flags & SRE_FLAG_IGNORECASE:
sre_compile.py(55):                 emit(OPCODES[op])
sre_compile.py(56):                 fixup = _identityfunction
sre_compile.py(57):             skip = _len(code); emit(0)
sre_compile.py(58):             _compile_charset(av, flags, code, fixup)
 --- modulename: sre_compile, funcname: _compile_charset
sre_compile.py(181):     emit = code.append
sre_compile.py(182):     if fixup is None:
sre_compile.py(184):     for op, av in _optimize_charset(charset, fixup):
 --- modulename: sre_compile, funcname: _optimize_charset
sre_compile.py(210):     out = []
sre_compile.py(211):     outappend = out.append
sre_compile.py(212):     charmap = [0]*256
sre_compile.py(213):     try:
sre_compile.py(214):         for op, av in charset:
sre_compile.py(215):             if op is NEGATE:
sre_compile.py(217):             elif op is LITERAL:
sre_compile.py(219):             elif op is RANGE:
sre_compile.py(222):             elif op is CATEGORY:
sre_compile.py(224):                 return charset # cannot compress
sre_compile.py(185):         emit(OPCODES[op])
sre_compile.py(186):         if op is NEGATE:
sre_compile.py(188):         elif op is LITERAL:
sre_compile.py(190):         elif op is RANGE:
sre_compile.py(193):         elif op is CHARSET:
sre_compile.py(195):         elif op is BIGCHARSET:
sre_compile.py(197):         elif op is CATEGORY:
sre_compile.py(198):             if flags & SRE_FLAG_LOCALE:
sre_compile.py(200):             elif flags & SRE_FLAG_UNICODE:
sre_compile.py(203):                 emit(CHCODES[av])
sre_compile.py(184):     for op, av in _optimize_charset(charset, fixup):
sre_compile.py(206):     emit(OPCODES[FAILURE])
sre_compile.py(59):             code[skip] = _len(code) - skip
sre_compile.py(41):     for op, av in pattern:
 --- modulename: sre_parse, funcname: __getitem__
sre_parse.py(132):         if isinstance(index, slice):
sre_parse.py(134):         return self.data[index]
sre_compile.py(103):             if av[0]:
sre_compile.py(104):                 emit(OPCODES[MARK])
sre_compile.py(105):                 emit((av[0]-1)*2+1)
sre_compile.py(41):     for op, av in pattern:
sre_compile.py(492):     code.append(OPCODES[SUCCESS])
sre_compile.py(494):     return code
sre_compile.py(510):     if p.pattern.groups > 100:
sre_compile.py(516):     groupindex = p.pattern.groupdict
sre_compile.py(517):     indexgroup = [None] * p.pattern.groups
sre_compile.py(518):     for k, i in groupindex.items():
sre_compile.py(521):     return _sre.compile(
sre_compile.py(522):         pattern, flags | p.pattern.flags, code,
sre_compile.py(523):         p.pattern.groups-1,
sre_compile.py(524):         groupindex, indexgroup
re.py(243):     if len(_cache) >= _MAXCACHE:
re.py(245):     _cache[cachekey] = p
re.py(246):     return p
Tkinter.py(65): def _join(value):
Tkinter.py(69): def _stringify(value):
Tkinter.py(93): def _flatten(tuple):
Tkinter.py(103): try: _flatten = _tkinter._flatten
Tkinter.py(106): def _cnfmerge(cnfs):
Tkinter.py(123): try: _cnfmerge = _tkinter._cnfmerge
Tkinter.py(124): except AttributeError: pass
Tkinter.py(126): class Event:
 --- modulename: Tkinter, funcname: Event
Tkinter.py(126): class Event:
Tkinter.py(167):     """
Tkinter.py(168):     pass
Tkinter.py(170): _support_default_root = 1
Tkinter.py(171): _default_root = None
Tkinter.py(173): def NoDefaultRoot():
Tkinter.py(185): def _tkerror(err):
Tkinter.py(189): def _exit(code=0):
Tkinter.py(197): _varnum = 0
Tkinter.py(198): class Variable:
 --- modulename: Tkinter, funcname: Variable
Tkinter.py(198): class Variable:
Tkinter.py(202):     that constrain the type of the value returned from get()."""
Tkinter.py(203):     _default = ""
Tkinter.py(204):     def __init__(self, master=None, value=None, name=None):
Tkinter.py(228):     def __del__(self):
Tkinter.py(231):     def __str__(self):
Tkinter.py(234):     def set(self, value):
Tkinter.py(237):     def get(self):
Tkinter.py(240):     def trace_variable(self, mode, callback):
Tkinter.py(252):     trace = trace_variable
Tkinter.py(253):     def trace_vdelete(self, mode, cbname):
Tkinter.py(261):     def trace_vinfo(self):
Tkinter.py(265):     def __eq__(self, other):
Tkinter.py(274): class StringVar(Variable):
 --- modulename: Tkinter, funcname: StringVar
Tkinter.py(274): class StringVar(Variable):
Tkinter.py(275):     """Value holder for strings variables."""
Tkinter.py(276):     _default = ""
Tkinter.py(277):     def __init__(self, master=None, value=None, name=None):
Tkinter.py(289):     def get(self):
Tkinter.py(296): class IntVar(Variable):
 --- modulename: Tkinter, funcname: IntVar
Tkinter.py(296): class IntVar(Variable):
Tkinter.py(297):     """Value holder for integer variables."""
Tkinter.py(298):     _default = 0
Tkinter.py(299):     def __init__(self, master=None, value=None, name=None):
Tkinter.py(311):     def set(self, value):
Tkinter.py(317):     def get(self):
Tkinter.py(321): class DoubleVar(Variable):
 --- modulename: Tkinter, funcname: DoubleVar
Tkinter.py(321): class DoubleVar(Variable):
Tkinter.py(322):     """Value holder for float variables."""
Tkinter.py(323):     _default = 0.0
Tkinter.py(324):     def __init__(self, master=None, value=None, name=None):
Tkinter.py(336):     def get(self):
Tkinter.py(340): class BooleanVar(Variable):
 --- modulename: Tkinter, funcname: BooleanVar
Tkinter.py(340): class BooleanVar(Variable):
Tkinter.py(341):     """Value holder for boolean variables."""
Tkinter.py(342):     _default = False
Tkinter.py(343):     def __init__(self, master=None, value=None, name=None):
Tkinter.py(355):     def get(self):
Tkinter.py(359): def mainloop(n=0):
Tkinter.py(363): getint = int
Tkinter.py(365): getdouble = float
Tkinter.py(367): def getboolean(s):
Tkinter.py(372): class Misc:
 --- modulename: Tkinter, funcname: Misc
Tkinter.py(372): class Misc:
Tkinter.py(375):     Base class which defines methods common for interior widgets."""
Tkinter.py(378):     _tclCommands = None
Tkinter.py(379):     def destroy(self):
Tkinter.py(389):     def deletecommand(self, name):
Tkinter.py(399):     def tk_strictMotif(self, boolean=None):
Tkinter.py(408):     def tk_bisque(self):
Tkinter.py(411):     def tk_setPalette(self, *args, **kw):
Tkinter.py(424):     def tk_menuBar(self, *args):
Tkinter.py(427):     def wait_variable(self, name='PY_VAR'):
Tkinter.py(433):     waitvar = wait_variable # XXX b/w compat
Tkinter.py(434):     def wait_window(self, window=None):
Tkinter.py(441):     def wait_visibility(self, window=None):
Tkinter.py(449):     def setvar(self, name='PY_VAR', value='1'):
Tkinter.py(452):     def getvar(self, name='PY_VAR'):
Tkinter.py(455):     getint = int
Tkinter.py(456):     getdouble = float
Tkinter.py(457):     def getboolean(self, s):
Tkinter.py(460):     def focus_set(self):
Tkinter.py(467):     focus = focus_set # XXX b/w compat?
Tkinter.py(468):     def focus_force(self):
Tkinter.py(473):     def focus_get(self):
Tkinter.py(483):     def focus_displayof(self):
Tkinter.py(491):     def focus_lastfor(self):
Tkinter.py(497):     def tk_focusFollowsMouse(self):
Tkinter.py(501):     def tk_focusNext(self):
Tkinter.py(513):     def tk_focusPrev(self):
Tkinter.py(518):     def after(self, ms, func=None, *args):
Tkinter.py(539):     def after_idle(self, func, *args):
Tkinter.py(546):     def after_cancel(self, id):
Tkinter.py(560):     def bell(self, displayof=0):
Tkinter.py(565):     def clipboard_get(self, **kw):
Tkinter.py(588):     def clipboard_clear(self, **kw):
Tkinter.py(595):     def clipboard_append(self, string, **kw):
Tkinter.py(605):     def grab_current(self):
Tkinter.py(611):     def grab_release(self):
Tkinter.py(614):     def grab_set(self):
Tkinter.py(620):     def grab_set_global(self):
Tkinter.py(627):     def grab_status(self):
Tkinter.py(633):     def option_add(self, pattern, value, priority = None):
Tkinter.py(640):     def option_clear(self):
Tkinter.py(645):     def option_get(self, name, className):
Tkinter.py(651):     def option_readfile(self, fileName, priority = None):
Tkinter.py(657):     def selection_clear(self, **kw):
Tkinter.py(661):     def selection_get(self, **kw):
Tkinter.py(678):     def selection_handle(self, command, **kw):
Tkinter.py(693):     def selection_own(self, **kw):
Tkinter.py(700):     def selection_own_get(self, **kw):
Tkinter.py(711):     def send(self, interp, cmd, *args):
Tkinter.py(714):     def lower(self, belowThis=None):
Tkinter.py(717):     def tkraise(self, aboveThis=None):
Tkinter.py(720):     lift = tkraise
Tkinter.py(721):     def colormodel(self, value=None):
Tkinter.py(724):     def winfo_atom(self, name, displayof=0):
Tkinter.py(728):     def winfo_atomname(self, id, displayof=0):
Tkinter.py(733):     def winfo_cells(self):
Tkinter.py(737):     def winfo_children(self):
Tkinter.py(750):     def winfo_class(self):
Tkinter.py(753):     def winfo_colormapfull(self):
Tkinter.py(757):     def winfo_containing(self, rootX, rootY, displayof=0):
Tkinter.py(764):     def winfo_depth(self):
Tkinter.py(767):     def winfo_exists(self):
Tkinter.py(771):     def winfo_fpixels(self, number):
Tkinter.py(776):     def winfo_geometry(self):
Tkinter.py(779):     def winfo_height(self):
Tkinter.py(783):     def winfo_id(self):
Tkinter.py(787):     def winfo_interps(self, displayof=0):
Tkinter.py(791):     def winfo_ismapped(self):
Tkinter.py(795):     def winfo_manager(self):
Tkinter.py(798):     def winfo_name(self):
Tkinter.py(801):     def winfo_parent(self):
Tkinter.py(804):     def winfo_pathname(self, id, displayof=0):
Tkinter.py(809):     def winfo_pixels(self, number):
Tkinter.py(813):     def winfo_pointerx(self):
Tkinter.py(817):     def winfo_pointerxy(self):
Tkinter.py(821):     def winfo_pointery(self):
Tkinter.py(825):     def winfo_reqheight(self):
Tkinter.py(829):     def winfo_reqwidth(self):
Tkinter.py(833):     def winfo_rgb(self, color):
Tkinter.py(838):     def winfo_rootx(self):
Tkinter.py(843):     def winfo_rooty(self):
Tkinter.py(848):     def winfo_screen(self):
Tkinter.py(851):     def winfo_screencells(self):
Tkinter.py(856):     def winfo_screendepth(self):
Tkinter.py(861):     def winfo_screenheight(self):
Tkinter.py(866):     def winfo_screenmmheight(self):
Tkinter.py(871):     def winfo_screenmmwidth(self):
Tkinter.py(876):     def winfo_screenvisual(self):
Tkinter.py(881):     def winfo_screenwidth(self):
Tkinter.py(886):     def winfo_server(self):
Tkinter.py(890):     def winfo_toplevel(self):
Tkinter.py(894):     def winfo_viewable(self):
Tkinter.py(898):     def winfo_visual(self):
Tkinter.py(903):     def winfo_visualid(self):
Tkinter.py(906):     def winfo_visualsavailable(self, includeids=0):
Tkinter.py(918):     def __winfo_parseitem(self, t):
Tkinter.py(921):     def __winfo_getint(self, x):
Tkinter.py(924):     def winfo_vrootheight(self):
Tkinter.py(930):     def winfo_vrootwidth(self):
Tkinter.py(936):     def winfo_vrootx(self):
Tkinter.py(941):     def winfo_vrooty(self):
Tkinter.py(946):     def winfo_width(self):
Tkinter.py(950):     def winfo_x(self):
Tkinter.py(955):     def winfo_y(self):
Tkinter.py(960):     def update(self):
Tkinter.py(963):     def update_idletasks(self):
Tkinter.py(968):     def bindtags(self, tagList=None):
Tkinter.py(980):     def _bind(self, what, sequence, func, add, needcleanup=1):
Tkinter.py(997):     def bind(self, sequence=None, func=None, add=None):
Tkinter.py(1037):     def unbind(self, sequence, funcid=None):
Tkinter.py(1043):     def bind_all(self, sequence=None, func=None, add=None):
Tkinter.py(1049):     def unbind_all(self, sequence):
Tkinter.py(1052):     def bind_class(self, className, sequence=None, func=None, add=None):
Tkinter.py(1062):     def unbind_class(self, className, sequence):
Tkinter.py(1066):     def mainloop(self, n=0):
Tkinter.py(1069):     def quit(self):
Tkinter.py(1072):     def _getints(self, string):
Tkinter.py(1076):     def _getdoubles(self, string):
Tkinter.py(1080):     def _getboolean(self, string):
Tkinter.py(1084):     def _displayof(self, displayof):
Tkinter.py(1091):     @property
Tkinter.py(1100):     def _options(self, cnf, kw = None):
Tkinter.py(1126):     def nametowidget(self, name):
Tkinter.py(1142):     _nametowidget = nametowidget
Tkinter.py(1143):     def _register(self, func, subst=None, needcleanup=1):
Tkinter.py(1164):     register = _register
Tkinter.py(1165):     def _root(self):
Tkinter.py(1172):              '%A', '%E', '%K', '%N', '%W', '%T', '%X', '%Y', '%D')
Tkinter.py(1173):     _subst_format_str = " ".join(_subst_format)
Tkinter.py(1174):     def _substitute(self, *args):
Tkinter.py(1231):     def _report_exception(self):
Tkinter.py(1237):     def _configure(self, cmd, cnf, kw):
Tkinter.py(1255):     def configure(self, cnf=None, **kw):
Tkinter.py(1263):     config = configure
Tkinter.py(1264):     def cget(self, key):
Tkinter.py(1267):     __getitem__ = cget
Tkinter.py(1268):     def __setitem__(self, key, value):
Tkinter.py(1270):     def __contains__(self, key):
Tkinter.py(1272):     def keys(self):
Tkinter.py(1276):     def __str__(self):
Tkinter.py(1280):     _noarg_ = ['_noarg_']
Tkinter.py(1281):     def pack_propagate(self, flag=_noarg_):
Tkinter.py(1293):     propagate = pack_propagate
Tkinter.py(1294):     def pack_slaves(self):
Tkinter.py(1300):     slaves = pack_slaves
Tkinter.py(1302):     def place_slaves(self):
Tkinter.py(1310):     def grid_bbox(self, column=None, row=None, col2=None, row2=None):
Tkinter.py(1329):     bbox = grid_bbox
Tkinter.py(1330):     def _grid_configure(self, command, index, cnf, kw):
Tkinter.py(1364):     def grid_columnconfigure(self, index, cnf={}, **kw):
Tkinter.py(1371):     columnconfigure = grid_columnconfigure
Tkinter.py(1372):     def grid_location(self, x, y):
Tkinter.py(1379):     def grid_propagate(self, flag=_noarg_):
Tkinter.py(1391):     def grid_rowconfigure(self, index, cnf={}, **kw):
Tkinter.py(1398):     rowconfigure = grid_rowconfigure
Tkinter.py(1399):     def grid_size(self):
Tkinter.py(1403):     size = grid_size
Tkinter.py(1404):     def grid_slaves(self, row=None, column=None):
Tkinter.py(1419):     def event_add(self, virtual, *sequences):
Tkinter.py(1426):     def event_delete(self, virtual, *sequences):
Tkinter.py(1431):     def event_generate(self, sequence, **kw):
Tkinter.py(1440):     def event_info(self, virtual=None):
Tkinter.py(1448):     def image_names(self):
Tkinter.py(1452):     def image_types(self):
Tkinter.py(1457): class CallWrapper:
 --- modulename: Tkinter, funcname: CallWrapper
Tkinter.py(1457): class CallWrapper:
Tkinter.py(1459):     defined Tcl function is called e.g. after an event occurred."""
Tkinter.py(1460):     def __init__(self, func, subst, widget):
Tkinter.py(1465):     def __call__(self, *args):
Tkinter.py(1477): class XView:
 --- modulename: Tkinter, funcname: XView
Tkinter.py(1477): class XView:
Tkinter.py(1479):     of a widget's window."""
Tkinter.py(1481):     def xview(self, *args):
Tkinter.py(1487):     def xview_moveto(self, fraction):
Tkinter.py(1492):     def xview_scroll(self, number, what):
Tkinter.py(1498): class YView:
 --- modulename: Tkinter, funcname: YView
Tkinter.py(1498): class YView:
Tkinter.py(1500):     of a widget's window."""
Tkinter.py(1502):     def yview(self, *args):
Tkinter.py(1508):     def yview_moveto(self, fraction):
Tkinter.py(1513):     def yview_scroll(self, number, what):
Tkinter.py(1519): class Wm:
 --- modulename: Tkinter, funcname: Wm
Tkinter.py(1519): class Wm:
Tkinter.py(1520):     """Provides functions for the communication with the window manager."""
Tkinter.py(1523):               minNumer=None, minDenom=None,
Tkinter.py(1524):               maxNumer=None, maxDenom=None):
Tkinter.py(1532):     aspect = wm_aspect
Tkinter.py(1534):     def wm_attributes(self, *args):
Tkinter.py(1554):     attributes=wm_attributes
Tkinter.py(1556):     def wm_client(self, name=None):
Tkinter.py(1560):     client = wm_client
Tkinter.py(1561):     def wm_colormapwindows(self, *wlist):
Tkinter.py(1569):     colormapwindows = wm_colormapwindows
Tkinter.py(1570):     def wm_command(self, value=None):
Tkinter.py(1575):     command = wm_command
Tkinter.py(1576):     def wm_deiconify(self):
Tkinter.py(1580):     deiconify = wm_deiconify
Tkinter.py(1581):     def wm_focusmodel(self, model=None):
Tkinter.py(1586):     focusmodel = wm_focusmodel
Tkinter.py(1587):     def wm_frame(self):
Tkinter.py(1590):     frame = wm_frame
Tkinter.py(1591):     def wm_geometry(self, newGeometry=None):
Tkinter.py(1595):     geometry = wm_geometry
Tkinter.py(1597):          baseWidth=None, baseHeight=None,
Tkinter.py(1598):          widthInc=None, heightInc=None):
Tkinter.py(1606):     grid = wm_grid
Tkinter.py(1607):     def wm_group(self, pathName=None):
Tkinter.py(1611):     group = wm_group
Tkinter.py(1612):     def wm_iconbitmap(self, bitmap=None, default=None):
Tkinter.py(1625):     iconbitmap = wm_iconbitmap
Tkinter.py(1626):     def wm_iconify(self):
Tkinter.py(1629):     iconify = wm_iconify
Tkinter.py(1630):     def wm_iconmask(self, bitmap=None):
Tkinter.py(1634):     iconmask = wm_iconmask
Tkinter.py(1635):     def wm_iconname(self, newName=None):
Tkinter.py(1639):     iconname = wm_iconname
Tkinter.py(1640):     def wm_iconposition(self, x=None, y=None):
Tkinter.py(1645):     iconposition = wm_iconposition
Tkinter.py(1646):     def wm_iconwindow(self, pathName=None):
Tkinter.py(1650):     iconwindow = wm_iconwindow
Tkinter.py(1651):     def wm_maxsize(self, width=None, height=None):
Tkinter.py(1657):     maxsize = wm_maxsize
Tkinter.py(1658):     def wm_minsize(self, width=None, height=None):
Tkinter.py(1664):     minsize = wm_minsize
Tkinter.py(1665):     def wm_overrideredirect(self, boolean=None):
Tkinter.py(1671):     overrideredirect = wm_overrideredirect
Tkinter.py(1672):     def wm_positionfrom(self, who=None):
Tkinter.py(1677):     positionfrom = wm_positionfrom
Tkinter.py(1678):     def wm_protocol(self, name=None, func=None):
Tkinter.py(1688):     protocol = wm_protocol
Tkinter.py(1689):     def wm_resizable(self, width=None, height=None):
Tkinter.py(1693):     resizable = wm_resizable
Tkinter.py(1694):     def wm_sizefrom(self, who=None):
Tkinter.py(1699):     sizefrom = wm_sizefrom
Tkinter.py(1700):     def wm_state(self, newstate=None):
Tkinter.py(1704):     state = wm_state
Tkinter.py(1705):     def wm_title(self, string=None):
Tkinter.py(1708):     title = wm_title
Tkinter.py(1709):     def wm_transient(self, master=None):
Tkinter.py(1713):     transient = wm_transient
Tkinter.py(1714):     def wm_withdraw(self):
Tkinter.py(1718):     withdraw = wm_withdraw
Tkinter.py(1721): class Tk(Misc, Wm):
 --- modulename: Tkinter, funcname: Tk
Tkinter.py(1721): class Tk(Misc, Wm):
Tkinter.py(1723):     of an application. It has an associated Tcl interpreter."""
Tkinter.py(1724):     _w = '.'
Tkinter.py(1725):     def __init__(self, screenName=None, baseName=None, className='Tk',
Tkinter.py(1726):                  useTk=1, sync=0, use=None):
Tkinter.py(1751):     def loadtk(self):
Tkinter.py(1755):     def _loadtk(self):
Tkinter.py(1786):     def destroy(self):
Tkinter.py(1795):     def readprofile(self, baseName, className):
Tkinter.py(1816):     def report_callback_exception(self, exc, val, tb):
Tkinter.py(1824):     def __getattr__(self, attr):
Tkinter.py(1843): def Tcl(screenName=None, baseName=None, className='Tk', useTk=0):
Tkinter.py(1846): class Pack:
 --- modulename: Tkinter, funcname: Pack
Tkinter.py(1846): class Pack:
Tkinter.py(1849):     Base class to use the methods pack_* in every widget."""
Tkinter.py(1850):     def pack_configure(self, cnf={}, **kw):
Tkinter.py(1869):     pack = configure = config = pack_configure
Tkinter.py(1870):     def pack_forget(self):
Tkinter.py(1873):     forget = pack_forget
Tkinter.py(1874):     def pack_info(self):
Tkinter.py(1887):     info = pack_info
Tkinter.py(1888):     propagate = pack_propagate = Misc.pack_propagate
Tkinter.py(1889):     slaves = pack_slaves = Misc.pack_slaves
Tkinter.py(1891): class Place:
 --- modulename: Tkinter, funcname: Place
Tkinter.py(1891): class Place:
Tkinter.py(1894):     Base class to use the methods place_* in every widget."""
Tkinter.py(1895):     def place_configure(self, cnf={}, **kw):
Tkinter.py(1920):     place = configure = config = place_configure
Tkinter.py(1921):     def place_forget(self):
Tkinter.py(1924):     forget = place_forget
Tkinter.py(1925):     def place_info(self):
Tkinter.py(1938):     info = place_info
Tkinter.py(1939):     slaves = place_slaves = Misc.place_slaves
Tkinter.py(1941): class Grid:
 --- modulename: Tkinter, funcname: Grid
Tkinter.py(1941): class Grid:
Tkinter.py(1944):     Base class to use the methods grid_* in every widget."""
Tkinter.py(1946):     def grid_configure(self, cnf={}, **kw):
Tkinter.py(1964):     grid = configure = config = grid_configure
Tkinter.py(1965):     bbox = grid_bbox = Misc.grid_bbox
Tkinter.py(1966):     columnconfigure = grid_columnconfigure = Misc.grid_columnconfigure
Tkinter.py(1967):     def grid_forget(self):
Tkinter.py(1970):     forget = grid_forget
Tkinter.py(1971):     def grid_remove(self):
Tkinter.py(1974):     def grid_info(self):
Tkinter.py(1987):     info = grid_info
Tkinter.py(1988):     location = grid_location = Misc.grid_location
Tkinter.py(1989):     propagate = grid_propagate = Misc.grid_propagate
Tkinter.py(1990):     rowconfigure = grid_rowconfigure = Misc.grid_rowconfigure
Tkinter.py(1991):     size = grid_size = Misc.grid_size
Tkinter.py(1992):     slaves = grid_slaves = Misc.grid_slaves
Tkinter.py(1994): class BaseWidget(Misc):
 --- modulename: Tkinter, funcname: BaseWidget
Tkinter.py(1994): class BaseWidget(Misc):
Tkinter.py(1995):     """Internal class."""
Tkinter.py(1996):     def _setup(self, master, cnf):
Tkinter.py(2021):     def __init__(self, master, widgetName, cnf={}, kw={}, extra=()):
Tkinter.py(2039):     def destroy(self):
Tkinter.py(2046):     def _do(self, name, args=()):
Tkinter.py(2050): class Widget(BaseWidget, Pack, Place, Grid):
 --- modulename: Tkinter, funcname: Widget
Tkinter.py(2050): class Widget(BaseWidget, Pack, Place, Grid):
Tkinter.py(2054):     Pack, Place or Grid."""
Tkinter.py(2055):     pass
Tkinter.py(2057): class Toplevel(BaseWidget, Wm):
 --- modulename: Tkinter, funcname: Toplevel
Tkinter.py(2057): class Toplevel(BaseWidget, Wm):
Tkinter.py(2058):     """Toplevel widget, e.g. for dialogs."""
Tkinter.py(2059):     def __init__(self, master=None, cnf={}, **kw):
Tkinter.py(2085): class Button(Widget):
 --- modulename: Tkinter, funcname: Button
Tkinter.py(2085): class Button(Widget):
Tkinter.py(2086):     """Button widget."""
Tkinter.py(2087):     def __init__(self, master=None, cnf={}, **kw):
Tkinter.py(2108):     def tkButtonEnter(self, *dummy):
Tkinter.py(2111):     def tkButtonLeave(self, *dummy):
Tkinter.py(2114):     def tkButtonDown(self, *dummy):
Tkinter.py(2117):     def tkButtonUp(self, *dummy):
Tkinter.py(2120):     def tkButtonInvoke(self, *dummy):
Tkinter.py(2123):     def flash(self):
Tkinter.py(2135):     def invoke(self):
Tkinter.py(2147): def AtEnd():
Tkinter.py(2149): def AtInsert(*args):
Tkinter.py(2154): def AtSelFirst():
Tkinter.py(2156): def AtSelLast():
Tkinter.py(2158): def At(x, y=None):
Tkinter.py(2164): class Canvas(Widget, XView, YView):
 --- modulename: Tkinter, funcname: Canvas
Tkinter.py(2164): class Canvas(Widget, XView, YView):
Tkinter.py(2165):     """Canvas widget to display graphical elements like lines or text."""
Tkinter.py(2166):     def __init__(self, master=None, cnf={}, **kw):
Tkinter.py(2177):     def addtag(self, *args):
Tkinter.py(2180):     def addtag_above(self, newtag, tagOrId):
Tkinter.py(2183):     def addtag_all(self, newtag):
Tkinter.py(2186):     def addtag_below(self, newtag, tagOrId):
Tkinter.py(2189):     def addtag_closest(self, newtag, x, y, halo=None, start=None):
Tkinter.py(2195):     def addtag_enclosed(self, newtag, x1, y1, x2, y2):
Tkinter.py(2199):     def addtag_overlapping(self, newtag, x1, y1, x2, y2):
Tkinter.py(2203):     def addtag_withtag(self, newtag, tagOrId):
Tkinter.py(2206):     def bbox(self, *args):
Tkinter.py(2211):     def tag_unbind(self, tagOrId, sequence, funcid=None):
Tkinter.py(2217):     def tag_bind(self, tagOrId, sequence=None, func=None, add=None):
Tkinter.py(2225):     def canvasx(self, screenx, gridspacing=None):
Tkinter.py(2230):     def canvasy(self, screeny, gridspacing=None):
Tkinter.py(2235):     def coords(self, *args):
Tkinter.py(2241):     def _create(self, itemType, args, kw): # Args: (val, val, ..., cnf={})
Tkinter.py(2252):     def create_arc(self, *args, **kw):
Tkinter.py(2255):     def create_bitmap(self, *args, **kw):
Tkinter.py(2258):     def create_image(self, *args, **kw):
Tkinter.py(2261):     def create_line(self, *args, **kw):
Tkinter.py(2264):     def create_oval(self, *args, **kw):
Tkinter.py(2267):     def create_polygon(self, *args, **kw):
Tkinter.py(2270):     def create_rectangle(self, *args, **kw):
Tkinter.py(2273):     def create_text(self, *args, **kw):
Tkinter.py(2276):     def create_window(self, *args, **kw):
Tkinter.py(2279):     def dchars(self, *args):
Tkinter.py(2283):     def delete(self, *args):
Tkinter.py(2286):     def dtag(self, *args):
Tkinter.py(2290):     def find(self, *args):
Tkinter.py(2294):     def find_above(self, tagOrId):
Tkinter.py(2297):     def find_all(self):
Tkinter.py(2300):     def find_below(self, tagOrId):
Tkinter.py(2303):     def find_closest(self, x, y, halo=None, start=None):
Tkinter.py(2309):     def find_enclosed(self, x1, y1, x2, y2):
Tkinter.py(2313):     def find_overlapping(self, x1, y1, x2, y2):
Tkinter.py(2317):     def find_withtag(self, tagOrId):
Tkinter.py(2320):     def focus(self, *args):
Tkinter.py(2323):     def gettags(self, *args):
Tkinter.py(2327):     def icursor(self, *args):
Tkinter.py(2331):     def index(self, *args):
Tkinter.py(2334):     def insert(self, *args):
Tkinter.py(2338):     def itemcget(self, tagOrId, option):
Tkinter.py(2342):     def itemconfigure(self, tagOrId, cnf=None, **kw):
Tkinter.py(2350):     itemconfig = itemconfigure
Tkinter.py(2355):     def tag_lower(self, *args):
Tkinter.py(2359):     lower = tag_lower
Tkinter.py(2360):     def move(self, *args):
Tkinter.py(2363):     def postscript(self, cnf={}, **kw):
Tkinter.py(2370):     def tag_raise(self, *args):
Tkinter.py(2374):     lift = tkraise = tag_raise
Tkinter.py(2375):     def scale(self, *args):
Tkinter.py(2378):     def scan_mark(self, x, y):
Tkinter.py(2381):     def scan_dragto(self, x, y, gain=10):
Tkinter.py(2386):     def select_adjust(self, tagOrId, index):
Tkinter.py(2389):     def select_clear(self):
Tkinter.py(2392):     def select_from(self, tagOrId, index):
Tkinter.py(2395):     def select_item(self):
Tkinter.py(2398):     def select_to(self, tagOrId, index):
Tkinter.py(2401):     def type(self, tagOrId):
Tkinter.py(2405): class Checkbutton(Widget):
 --- modulename: Tkinter, funcname: Checkbutton
Tkinter.py(2405): class Checkbutton(Widget):
Tkinter.py(2406):     """Checkbutton widget which is either in on- or off-state."""
Tkinter.py(2407):     def __init__(self, master=None, cnf={}, **kw):
Tkinter.py(2418):     def deselect(self):
Tkinter.py(2421):     def flash(self):
Tkinter.py(2424):     def invoke(self):
Tkinter.py(2427):     def select(self):
Tkinter.py(2430):     def toggle(self):
Tkinter.py(2434): class Entry(Widget, XView):
 --- modulename: Tkinter, funcname: Entry
Tkinter.py(2434): class Entry(Widget, XView):
Tkinter.py(2435):     """Entry widget which allows to display simple text."""
Tkinter.py(2436):     def __init__(self, master=None, cnf={}, **kw):
Tkinter.py(2448):     def delete(self, first, last=None):
Tkinter.py(2451):     def get(self):
Tkinter.py(2454):     def icursor(self, index):
Tkinter.py(2457):     def index(self, index):
Tkinter.py(2461):     def insert(self, index, string):
Tkinter.py(2464):     def scan_mark(self, x):
Tkinter.py(2467):     def scan_dragto(self, x):
Tkinter.py(2472):     def selection_adjust(self, index):
Tkinter.py(2475):     select_adjust = selection_adjust
Tkinter.py(2476):     def selection_clear(self):
Tkinter.py(2479):     select_clear = selection_clear
Tkinter.py(2480):     def selection_from(self, index):
Tkinter.py(2483):     select_from = selection_from
Tkinter.py(2484):     def selection_present(self):
Tkinter.py(2489):     select_present = selection_present
Tkinter.py(2490):     def selection_range(self, start, end):
Tkinter.py(2493):     select_range = selection_range
Tkinter.py(2494):     def selection_to(self, index):
Tkinter.py(2497):     select_to = selection_to
Tkinter.py(2499): class Frame(Widget):
 --- modulename: Tkinter, funcname: Frame
Tkinter.py(2499): class Frame(Widget):
Tkinter.py(2500):     """Frame widget which may contain other widgets and can have a 3D border."""
Tkinter.py(2501):     def __init__(self, master=None, cnf={}, **kw):
Tkinter.py(2517): class Label(Widget):
 --- modulename: Tkinter, funcname: Label
Tkinter.py(2517): class Label(Widget):
Tkinter.py(2518):     """Label widget which can display text and bitmaps."""
Tkinter.py(2519):     def __init__(self, master=None, cnf={}, **kw):
Tkinter.py(2539): class Listbox(Widget, XView, YView):
 --- modulename: Tkinter, funcname: Listbox
Tkinter.py(2539): class Listbox(Widget, XView, YView):
Tkinter.py(2540):     """Listbox widget which can display a list of strings."""
Tkinter.py(2541):     def __init__(self, master=None, cnf={}, **kw):
Tkinter.py(2550):     def activate(self, index):
Tkinter.py(2553):     def bbox(self, *args):
Tkinter.py(2558):     def curselection(self):
Tkinter.py(2563):     def delete(self, first, last=None):
Tkinter.py(2566):     def get(self, first, last=None):
Tkinter.py(2573):     def index(self, index):
Tkinter.py(2578):     def insert(self, index, *elements):
Tkinter.py(2581):     def nearest(self, y):
Tkinter.py(2585):     def scan_mark(self, x, y):
Tkinter.py(2588):     def scan_dragto(self, x, y):
Tkinter.py(2593):     def see(self, index):
Tkinter.py(2596):     def selection_anchor(self, index):
Tkinter.py(2599):     select_anchor = selection_anchor
Tkinter.py(2600):     def selection_clear(self, first, last=None):
Tkinter.py(2604):     select_clear = selection_clear
Tkinter.py(2605):     def selection_includes(self, index):
Tkinter.py(2609):     select_includes = selection_includes
Tkinter.py(2610):     def selection_set(self, first, last=None):
Tkinter.py(2614):     select_set = selection_set
Tkinter.py(2615):     def size(self):
Tkinter.py(2618):     def itemcget(self, index, option):
Tkinter.py(2622):     def itemconfigure(self, index, cnf=None, **kw):
Tkinter.py(2631):     itemconfig = itemconfigure
Tkinter.py(2633): class Menu(Widget):
 --- modulename: Tkinter, funcname: Menu
Tkinter.py(2633): class Menu(Widget):
Tkinter.py(2634):     """Menu widget which allows to display menu bars, pull-down menus and pop-up menus."""
Tkinter.py(2635):     def __init__(self, master=None, cnf={}, **kw):
Tkinter.py(2643):     def tk_bindForTraversal(self):
Tkinter.py(2645):     def tk_mbPost(self):
Tkinter.py(2647):     def tk_mbUnpost(self):
Tkinter.py(2649):     def tk_traverseToMenu(self, char):
Tkinter.py(2651):     def tk_traverseWithinMenu(self, char):
Tkinter.py(2653):     def tk_getMenuButtons(self):
Tkinter.py(2655):     def tk_nextMenu(self, count):
Tkinter.py(2657):     def tk_nextMenuEntry(self, count):
Tkinter.py(2659):     def tk_invokeMenu(self):
Tkinter.py(2661):     def tk_firstMenu(self):
Tkinter.py(2663):     def tk_mbButtonDown(self):
Tkinter.py(2665):     def tk_popup(self, x, y, entry=""):
Tkinter.py(2668):     def activate(self, index):
Tkinter.py(2671):     def add(self, itemType, cnf={}, **kw):
Tkinter.py(2675):     def add_cascade(self, cnf={}, **kw):
Tkinter.py(2678):     def add_checkbutton(self, cnf={}, **kw):
Tkinter.py(2681):     def add_command(self, cnf={}, **kw):
Tkinter.py(2684):     def add_radiobutton(self, cnf={}, **kw):
Tkinter.py(2687):     def add_separator(self, cnf={}, **kw):
Tkinter.py(2690):     def insert(self, index, itemType, cnf={}, **kw):
Tkinter.py(2694):     def insert_cascade(self, index, cnf={}, **kw):
Tkinter.py(2697):     def insert_checkbutton(self, index, cnf={}, **kw):
Tkinter.py(2700):     def insert_command(self, index, cnf={}, **kw):
Tkinter.py(2703):     def insert_radiobutton(self, index, cnf={}, **kw):
Tkinter.py(2706):     def insert_separator(self, index, cnf={}, **kw):
Tkinter.py(2709):     def delete(self, index1, index2=None):
Tkinter.py(2724):     def entrycget(self, index, option):
Tkinter.py(2727):     def entryconfigure(self, index, cnf=None, **kw):
Tkinter.py(2730):     entryconfig = entryconfigure
Tkinter.py(2731):     def index(self, index):
Tkinter.py(2736):     def invoke(self, index):
Tkinter.py(2740):     def post(self, x, y):
Tkinter.py(2743):     def type(self, index):
Tkinter.py(2746):     def unpost(self):
Tkinter.py(2749):     def yposition(self, index):
Tkinter.py(2754): class Menubutton(Widget):
 --- modulename: Tkinter, funcname: Menubutton
Tkinter.py(2754): class Menubutton(Widget):
Tkinter.py(2755):     """Menubutton widget, obsolete since Tk8.0."""
Tkinter.py(2756):     def __init__(self, master=None, cnf={}, **kw):
Tkinter.py(2759): class Message(Widget):
 --- modulename: Tkinter, funcname: Message
Tkinter.py(2759): class Message(Widget):
Tkinter.py(2760):     """Message widget to display multiline text. Obsolete since Label does it too."""
Tkinter.py(2761):     def __init__(self, master=None, cnf={}, **kw):
Tkinter.py(2764): class Radiobutton(Widget):
 --- modulename: Tkinter, funcname: Radiobutton
Tkinter.py(2764): class Radiobutton(Widget):
Tkinter.py(2765):     """Radiobutton widget which shows only one of several buttons in on-state."""
Tkinter.py(2766):     def __init__(self, master=None, cnf={}, **kw):
Tkinter.py(2777):     def deselect(self):
Tkinter.py(2781):     def flash(self):
Tkinter.py(2784):     def invoke(self):
Tkinter.py(2787):     def select(self):
Tkinter.py(2791): class Scale(Widget):
 --- modulename: Tkinter, funcname: Scale
Tkinter.py(2791): class Scale(Widget):
Tkinter.py(2792):     """Scale widget which can display a numerical scale."""
Tkinter.py(2793):     def __init__(self, master=None, cnf={}, **kw):
Tkinter.py(2803):     def get(self):
Tkinter.py(2810):     def set(self, value):
Tkinter.py(2813):     def coords(self, value=None):
Tkinter.py(2819):     def identify(self, x, y):
Tkinter.py(2824): class Scrollbar(Widget):
 --- modulename: Tkinter, funcname: Scrollbar
Tkinter.py(2824): class Scrollbar(Widget):
Tkinter.py(2825):     """Scrollbar widget which displays a slider at a certain position."""
Tkinter.py(2826):     def __init__(self, master=None, cnf={}, **kw):
Tkinter.py(2836):     def activate(self, index):
Tkinter.py(2840):     def delta(self, deltax, deltay):
Tkinter.py(2845):     def fraction(self, x, y):
Tkinter.py(2849):     def identify(self, x, y):
Tkinter.py(2853):     def get(self):
Tkinter.py(2857):     def set(self, *args):
Tkinter.py(2864): class Text(Widget, XView, YView):
 --- modulename: Tkinter, funcname: Text
Tkinter.py(2864): class Text(Widget, XView, YView):
Tkinter.py(2865):     """Text widget which can display text in various forms."""
Tkinter.py(2866):     def __init__(self, master=None, cnf={}, **kw):
Tkinter.py(2890):     def bbox(self, *args):
Tkinter.py(2895):     def tk_textSelectTo(self, index):
Tkinter.py(2897):     def tk_textBackspace(self):
Tkinter.py(2899):     def tk_textIndexCloser(self, a, b, c):
Tkinter.py(2901):     def tk_textResetAnchor(self, index):
Tkinter.py(2903):     def compare(self, index1, op, index2):
Tkinter.py(2908):     def debug(self, boolean=None):
Tkinter.py(2913):     def delete(self, index1, index2=None):
Tkinter.py(2916):     def dlineinfo(self, index):
Tkinter.py(2921):     def dump(self, index1, index2=None, command=None, **kw):
Tkinter.py(2961):     def edit(self, *args):
Tkinter.py(2976):     def edit_modified(self, arg=None):
Tkinter.py(2987):     def edit_redo(self):
Tkinter.py(2997):     def edit_reset(self):
Tkinter.py(3002):     def edit_separator(self):
Tkinter.py(3009):     def edit_undo(self):
Tkinter.py(3020):     def get(self, index1, index2=None):
Tkinter.py(3024):     def image_cget(self, index, option):
Tkinter.py(3031):     def image_configure(self, index, cnf=None, **kw):
Tkinter.py(3034):     def image_create(self, index, cnf={}, **kw):
Tkinter.py(3039):     def image_names(self):
Tkinter.py(3042):     def index(self, index):
Tkinter.py(3045):     def insert(self, index, chars, *args):
Tkinter.py(3049):     def mark_gravity(self, markName, direction=None):
Tkinter.py(3054):     def mark_names(self):
Tkinter.py(3058):     def mark_set(self, markName, index):
Tkinter.py(3061):     def mark_unset(self, *markNames):
Tkinter.py(3064):     def mark_next(self, index):
Tkinter.py(3067):     def mark_previous(self, index):
Tkinter.py(3070):     def scan_mark(self, x, y):
Tkinter.py(3073):     def scan_dragto(self, x, y):
Tkinter.py(3078):     def search(self, pattern, index, stopindex=None,
Tkinter.py(3079):            forwards=None, backwards=None, exact=None,
Tkinter.py(3080):            regexp=None, nocase=None, count=None, elide=None):
Tkinter.py(3097):     def see(self, index):
Tkinter.py(3100):     def tag_add(self, tagName, index1, *args):
Tkinter.py(3105):     def tag_unbind(self, tagName, sequence, funcid=None):
Tkinter.py(3111):     def tag_bind(self, tagName, sequence, func, add=None):
Tkinter.py(3119):     def tag_cget(self, tagName, option):
Tkinter.py(3126):     def tag_configure(self, tagName, cnf=None, **kw):
Tkinter.py(3129):     tag_config = tag_configure
Tkinter.py(3130):     def tag_delete(self, *tagNames):
Tkinter.py(3133):     def tag_lower(self, tagName, belowThis=None):
Tkinter.py(3137):     def tag_names(self, index=None):
Tkinter.py(3141):     def tag_nextrange(self, tagName, index1, index2=None):
Tkinter.py(3147):     def tag_prevrange(self, tagName, index1, index2=None):
Tkinter.py(3153):     def tag_raise(self, tagName, aboveThis=None):
Tkinter.py(3158):     def tag_ranges(self, tagName):
Tkinter.py(3162):     def tag_remove(self, tagName, index1, index2=None):
Tkinter.py(3166):     def window_cget(self, index, option):
Tkinter.py(3173):     def window_configure(self, index, cnf=None, **kw):
Tkinter.py(3176):     window_config = window_configure
Tkinter.py(3177):     def window_create(self, index, cnf={}, **kw):
Tkinter.py(3182):     def window_names(self):
Tkinter.py(3186):     def yview_pickplace(self, *what):
Tkinter.py(3191): class _setit:
 --- modulename: Tkinter, funcname: _setit
Tkinter.py(3191): class _setit:
Tkinter.py(3192):     """Internal class. It wraps the command in the widget OptionMenu."""
Tkinter.py(3193):     def __init__(self, var, value, callback=None):
Tkinter.py(3197):     def __call__(self, *args):
Tkinter.py(3202): class OptionMenu(Menubutton):
 --- modulename: Tkinter, funcname: OptionMenu
Tkinter.py(3202): class OptionMenu(Menubutton):
Tkinter.py(3203):     """OptionMenu which allows the user to select a value from a menu."""
Tkinter.py(3204):     def __init__(self, master, variable, value, *values, **kwargs):
Tkinter.py(3229):     def __getitem__(self, name):
Tkinter.py(3234):     def destroy(self):
Tkinter.py(3239): class Image:
 --- modulename: Tkinter, funcname: Image
Tkinter.py(3239): class Image:
Tkinter.py(3240):     """Base class for images."""
Tkinter.py(3241):     _last_id = 0
Tkinter.py(3242):     def __init__(self, imgtype, name=None, cnf={}, master=None, **kw):
Tkinter.py(3264):     def __str__(self): return self.name
Tkinter.py(3265):     def __del__(self):
Tkinter.py(3272):     def __setitem__(self, key, value):
Tkinter.py(3274):     def __getitem__(self, key):
Tkinter.py(3276):     def configure(self, **kw):
Tkinter.py(3286):     config = configure
Tkinter.py(3287):     def height(self):
Tkinter.py(3291):     def type(self):
Tkinter.py(3294):     def width(self):
Tkinter.py(3299): class PhotoImage(Image):
 --- modulename: Tkinter, funcname: PhotoImage
Tkinter.py(3299): class PhotoImage(Image):
Tkinter.py(3300):     """Widget which can display colored images in GIF, PPM/PGM format."""
Tkinter.py(3301):     def __init__(self, name=None, cnf={}, master=None, **kw):
Tkinter.py(3307):     def blank(self):
Tkinter.py(3310):     def cget(self, option):
Tkinter.py(3314):     def __getitem__(self, key):
Tkinter.py(3317):     def copy(self):
Tkinter.py(3322):     def zoom(self,x,y=''):
Tkinter.py(3329):     def subsample(self,x,y=''):
Tkinter.py(3336):     def get(self, x, y):
Tkinter.py(3339):     def put(self, data, to=None):
Tkinter.py(3349):     def write(self, filename, format=None, from_coords=None):
Tkinter.py(3359): class BitmapImage(Image):
 --- modulename: Tkinter, funcname: BitmapImage
Tkinter.py(3359): class BitmapImage(Image):
Tkinter.py(3360):     """Widget which can display a bitmap."""
Tkinter.py(3361):     def __init__(self, name=None, cnf={}, master=None, **kw):
Tkinter.py(3367): def image_names(): return _default_root.tk.call('image', 'names')
Tkinter.py(3368): def image_types(): return _default_root.tk.call('image', 'types')
Tkinter.py(3371): class Spinbox(Widget, XView):
 --- modulename: Tkinter, funcname: Spinbox
Tkinter.py(3371): class Spinbox(Widget, XView):
Tkinter.py(3372):     """spinbox widget."""
Tkinter.py(3373):     def __init__(self, master=None, cnf={}, **kw):
Tkinter.py(3402):     def bbox(self, index):
Tkinter.py(3416):     def delete(self, first, last=None):
Tkinter.py(3427):     def get(self):
Tkinter.py(3431):     def icursor(self, index):
Tkinter.py(3439):     def identify(self, x, y):
Tkinter.py(3446):     def index(self, index):
Tkinter.py(3451):     def insert(self, index, s):
Tkinter.py(3458):     def invoke(self, element):
Tkinter.py(3466):     def scan(self, *args):
Tkinter.py(3471):     def scan_mark(self, x):
Tkinter.py(3480):     def scan_dragto(self, x):
Tkinter.py(3492):     def selection(self, *args):
Tkinter.py(3497):     def selection_adjust(self, index):
Tkinter.py(3511):     def selection_clear(self):
Tkinter.py(3519):     def selection_element(self, element=None):
Tkinter.py(3529): class LabelFrame(Widget):
 --- modulename: Tkinter, funcname: LabelFrame
Tkinter.py(3529): class LabelFrame(Widget):
Tkinter.py(3530):     """labelframe widget."""
Tkinter.py(3531):     def __init__(self, master=None, cnf={}, **kw):
Tkinter.py(3551): class PanedWindow(Widget):
 --- modulename: Tkinter, funcname: PanedWindow
Tkinter.py(3551): class PanedWindow(Widget):
Tkinter.py(3552):     """panedwindow widget."""
Tkinter.py(3553):     def __init__(self, master=None, cnf={}, **kw):
Tkinter.py(3569):     def add(self, child, **kw):
Tkinter.py(3579):     def remove(self, child):
Tkinter.py(3585):     forget=remove
Tkinter.py(3587):     def identify(self, x, y):
Tkinter.py(3599):     def proxy(self, *args):
Tkinter.py(3604):     def proxy_coord(self):
Tkinter.py(3609):     def proxy_forget(self):
Tkinter.py(3614):     def proxy_place(self, x, y):
Tkinter.py(3619):     def sash(self, *args):
Tkinter.py(3624):     def sash_coord(self, index):
Tkinter.py(3638):     def sash_mark(self, index):
Tkinter.py(3645):     def sash_place(self, index, x, y):
Tkinter.py(3650):     def panecget(self, child, option):
Tkinter.py(3658):     def paneconfigure(self, tagOrId, cnf=None, **kw):
Tkinter.py(3739):     paneconfig = paneconfigure
Tkinter.py(3741):     def panes(self):
Tkinter.py(3748): class Studbutton(Button):
 --- modulename: Tkinter, funcname: Studbutton
Tkinter.py(3748): class Studbutton(Button):
Tkinter.py(3749):     def __init__(self, master=None, cnf={}, **kw):
Tkinter.py(3756): class Tributton(Button):
 --- modulename: Tkinter, funcname: Tributton
Tkinter.py(3756): class Tributton(Button):
Tkinter.py(3757):     def __init__(self, master=None, cnf={}, **kw):
Tkinter.py(3769): def _test():
Tkinter.py(3794): if __name__ == '__main__':
graphicsUtils.py(17): _Windows = sys.platform == 'win32'  # True if on Win95/98/NT
graphicsUtils.py(19): _root_window = None      # The root window for graphics output
graphicsUtils.py(20): _canvas = None      # The canvas which holds graphics
graphicsUtils.py(21): _canvas_xs = None      # Size of canvas object
graphicsUtils.py(22): _canvas_ys = None
graphicsUtils.py(23): _canvas_x = None      # Current position on canvas
graphicsUtils.py(24): _canvas_y = None
graphicsUtils.py(25): _canvas_col = None      # Current colour (set to black below)
graphicsUtils.py(26): _canvas_tsize = 12
graphicsUtils.py(27): _canvas_tserifs = 0
graphicsUtils.py(29): def formatColor(r, g, b):
graphicsUtils.py(32): def colorToVector(color):
graphicsUtils.py(35): if _Windows:
graphicsUtils.py(38):     _canvas_tfonts = ['times', 'lucidasans-24']
graphicsUtils.py(41): def sleep(secs):
graphicsUtils.py(50): def begin_graphics(width=640, height=480, color=formatColor(0, 0, 0), title=None):
 --- modulename: graphicsUtils, funcname: formatColor
graphicsUtils.py(30):   return '#%02x%02x%02x' % (int(r * 255), int(g * 255), int(b * 255))
graphicsUtils.py(91): _leftclick_loc = None
graphicsUtils.py(92): _rightclick_loc = None
graphicsUtils.py(93): _ctrl_leftclick_loc = None
graphicsUtils.py(95): def _leftclick(event):
graphicsUtils.py(99): def _rightclick(event):
graphicsUtils.py(103): def _ctrl_leftclick(event):
graphicsUtils.py(107): def wait_for_click():
graphicsUtils.py(126): def draw_background():
graphicsUtils.py(130): def _destroy_window(event=None):
graphicsUtils.py(137): def end_graphics():
graphicsUtils.py(152): def clear_screen(background=None):
graphicsUtils.py(158): def polygon(coords, outlineColor, fillColor=None, filled=1, smoothed=1, behind=0, width=1):
graphicsUtils.py(170): def square(pos, r, color, filled=1, behind=0):
graphicsUtils.py(175): def circle(pos, r, outlineColor, fillColor, endpoints=None, style='pieslice', width=2):
graphicsUtils.py(188): def image(pos, file="../../blueghost.gif"):
graphicsUtils.py(194): def refresh():
graphicsUtils.py(197): def moveCircle(id, pos, r, endpoints=None):
graphicsUtils.py(214): def edit(id, *args):
graphicsUtils.py(217): def text(pos, color, contents, font='Helvetica', size=12, style='normal', anchor="nw"):
graphicsUtils.py(223): def changeText(id, newText, font=None, size=12, style='normal'):
graphicsUtils.py(228): def changeColor(id, newColor):
graphicsUtils.py(231): def line(here, there, color=formatColor(0, 0, 0), width=2):
 --- modulename: graphicsUtils, funcname: formatColor
graphicsUtils.py(30):   return '#%02x%02x%02x' % (int(r * 255), int(g * 255), int(b * 255))
graphicsUtils.py(242): _keysdown = {}
graphicsUtils.py(243): _keyswaiting = {}
graphicsUtils.py(246): _got_release = None
graphicsUtils.py(248): def _keypress(event):
graphicsUtils.py(256): def _keyrelease(event):
graphicsUtils.py(265): def remap_arrows(event):
graphicsUtils.py(278): def _clear_keys(event=None):
graphicsUtils.py(284): def keys_pressed(d_o_e=Tkinter.tkinter.dooneevent,
graphicsUtils.py(285):                  d_w=Tkinter.tkinter.DONT_WAIT):
graphicsUtils.py(291): def keys_waiting():
graphicsUtils.py(299): def wait_for_keys():
graphicsUtils.py(307):                        d_o_e=Tkinter.tkinter.dooneevent,
graphicsUtils.py(308):                        d_w=Tkinter.tkinter.DONT_WAIT):
graphicsUtils.py(312): def _adjust_coords(coord_list, x, y):
graphicsUtils.py(318): def move_to(object, x, y=None,
graphicsUtils.py(319):             d_o_e=Tkinter.tkinter.dooneevent,
graphicsUtils.py(320):             d_w=Tkinter.tkinter.DONT_WAIT):
graphicsUtils.py(340): def move_by(object, x, y=None,
graphicsUtils.py(341):             d_o_e=Tkinter.tkinter.dooneevent,
graphicsUtils.py(342):             d_w=Tkinter.tkinter.DONT_WAIT):
graphicsUtils.py(361): def writePostscript(filename):
graphicsUtils.py(370):     (0, - 0.5),
graphicsUtils.py(371):     (0.25, - 0.75),
graphicsUtils.py(372):     (0.5, - 0.5),
graphicsUtils.py(373):     (0.75, - 0.75),
graphicsUtils.py(374):     (0.75, 0.5),
graphicsUtils.py(375):     (0.5, 0.75),
graphicsUtils.py(376):     (- 0.5, 0.75),
graphicsUtils.py(377):     (- 0.75, 0.5),
graphicsUtils.py(378):     (- 0.75, - 0.75),
graphicsUtils.py(379):     (- 0.5, - 0.5),
graphicsUtils.py(380):     (- 0.25, - 0.75)
graphicsUtils.py(383): if __name__ == '__main__':
graphicsDisplay.py(10): import math, time
graphicsDisplay.py(11): from game import Directions
graphicsDisplay.py(20): DEFAULT_GRID_SIZE = 30.0
graphicsDisplay.py(21): INFO_PANE_HEIGHT = 35
graphicsDisplay.py(22): BACKGROUND_COLOR = formatColor(0,0,0)
 --- modulename: graphicsUtils, funcname: formatColor
graphicsUtils.py(30):   return '#%02x%02x%02x' % (int(r * 255), int(g * 255), int(b * 255))
graphicsDisplay.py(23): WALL_COLOR = formatColor(0.0/255.0, 51.0/255.0, 255.0/255.0)
 --- modulename: graphicsUtils, funcname: formatColor
graphicsUtils.py(30):   return '#%02x%02x%02x' % (int(r * 255), int(g * 255), int(b * 255))
graphicsDisplay.py(24): INFO_PANE_COLOR = formatColor(.4,.4,0)
 --- modulename: graphicsUtils, funcname: formatColor
graphicsUtils.py(30):   return '#%02x%02x%02x' % (int(r * 255), int(g * 255), int(b * 255))
graphicsDisplay.py(25): SCORE_COLOR = formatColor(.9, .9, .9)
 --- modulename: graphicsUtils, funcname: formatColor
graphicsUtils.py(30):   return '#%02x%02x%02x' % (int(r * 255), int(g * 255), int(b * 255))
graphicsDisplay.py(26): PACMAN_OUTLINE_WIDTH = 2
graphicsDisplay.py(27): PACMAN_CAPTURE_OUTLINE_WIDTH = 4
graphicsDisplay.py(29): GHOST_COLORS = []
graphicsDisplay.py(30): GHOST_COLORS.append(formatColor(.9,0,0)) # Red
 --- modulename: graphicsUtils, funcname: formatColor
graphicsUtils.py(30):   return '#%02x%02x%02x' % (int(r * 255), int(g * 255), int(b * 255))
graphicsDisplay.py(31): GHOST_COLORS.append(formatColor(0,.3,.9)) # Blue
 --- modulename: graphicsUtils, funcname: formatColor
graphicsUtils.py(30):   return '#%02x%02x%02x' % (int(r * 255), int(g * 255), int(b * 255))
graphicsDisplay.py(32): GHOST_COLORS.append(formatColor(.98,.41,.07)) # Orange
 --- modulename: graphicsUtils, funcname: formatColor
graphicsUtils.py(30):   return '#%02x%02x%02x' % (int(r * 255), int(g * 255), int(b * 255))
graphicsDisplay.py(33): GHOST_COLORS.append(formatColor(.1,.75,.7)) # Green
 --- modulename: graphicsUtils, funcname: formatColor
graphicsUtils.py(30):   return '#%02x%02x%02x' % (int(r * 255), int(g * 255), int(b * 255))
graphicsDisplay.py(34): GHOST_COLORS.append(formatColor(1.0,0.6,0.0)) # Yellow
 --- modulename: graphicsUtils, funcname: formatColor
graphicsUtils.py(30):   return '#%02x%02x%02x' % (int(r * 255), int(g * 255), int(b * 255))
graphicsDisplay.py(35): GHOST_COLORS.append(formatColor(.4,0.13,0.91)) # Purple
 --- modulename: graphicsUtils, funcname: formatColor
graphicsUtils.py(30):   return '#%02x%02x%02x' % (int(r * 255), int(g * 255), int(b * 255))
graphicsDisplay.py(37): TEAM_COLORS = GHOST_COLORS[:2]
graphicsDisplay.py(40):     ( 0,    0.3 ),
graphicsDisplay.py(41):     ( 0.25, 0.75 ),
graphicsDisplay.py(42):     ( 0.5,  0.3 ),
graphicsDisplay.py(43):     ( 0.75, 0.75 ),
graphicsDisplay.py(44):     ( 0.75, -0.5 ),
graphicsDisplay.py(45):     ( 0.5,  -0.75 ),
graphicsDisplay.py(46):     (-0.5,  -0.75 ),
graphicsDisplay.py(47):     (-0.75, -0.5 ),
graphicsDisplay.py(48):     (-0.75, 0.75 ),
graphicsDisplay.py(49):     (-0.5,  0.3 ),
graphicsDisplay.py(50):     (-0.25, 0.75 )
graphicsDisplay.py(52): GHOST_SIZE = 0.65
graphicsDisplay.py(53): SCARED_COLOR = formatColor(1,1,1)
 --- modulename: graphicsUtils, funcname: formatColor
graphicsUtils.py(30):   return '#%02x%02x%02x' % (int(r * 255), int(g * 255), int(b * 255))
graphicsDisplay.py(55): GHOST_VEC_COLORS = map(colorToVector, GHOST_COLORS)
 --- modulename: graphicsUtils, funcname: colorToVector
graphicsUtils.py(33):   return map(lambda x: int(x, 16) / 256.0, [color[1:3], color[3:5], color[5:7]])
 --- modulename: graphicsUtils, funcname: <lambda>
graphicsUtils.py(33):   return map(lambda x: int(x, 16) / 256.0, [color[1:3], color[3:5], color[5:7]])
 --- modulename: graphicsUtils, funcname: <lambda>
graphicsUtils.py(33):   return map(lambda x: int(x, 16) / 256.0, [color[1:3], color[3:5], color[5:7]])
 --- modulename: graphicsUtils, funcname: <lambda>
graphicsUtils.py(33):   return map(lambda x: int(x, 16) / 256.0, [color[1:3], color[3:5], color[5:7]])
 --- modulename: graphicsUtils, funcname: colorToVector
graphicsUtils.py(33):   return map(lambda x: int(x, 16) / 256.0, [color[1:3], color[3:5], color[5:7]])
 --- modulename: graphicsUtils, funcname: <lambda>
graphicsUtils.py(33):   return map(lambda x: int(x, 16) / 256.0, [color[1:3], color[3:5], color[5:7]])
 --- modulename: graphicsUtils, funcname: <lambda>
graphicsUtils.py(33):   return map(lambda x: int(x, 16) / 256.0, [color[1:3], color[3:5], color[5:7]])
 --- modulename: graphicsUtils, funcname: <lambda>
graphicsUtils.py(33):   return map(lambda x: int(x, 16) / 256.0, [color[1:3], color[3:5], color[5:7]])
 --- modulename: graphicsUtils, funcname: colorToVector
graphicsUtils.py(33):   return map(lambda x: int(x, 16) / 256.0, [color[1:3], color[3:5], color[5:7]])
 --- modulename: graphicsUtils, funcname: <lambda>
graphicsUtils.py(33):   return map(lambda x: int(x, 16) / 256.0, [color[1:3], color[3:5], color[5:7]])
 --- modulename: graphicsUtils, funcname: <lambda>
graphicsUtils.py(33):   return map(lambda x: int(x, 16) / 256.0, [color[1:3], color[3:5], color[5:7]])
 --- modulename: graphicsUtils, funcname: <lambda>
graphicsUtils.py(33):   return map(lambda x: int(x, 16) / 256.0, [color[1:3], color[3:5], color[5:7]])
 --- modulename: graphicsUtils, funcname: colorToVector
graphicsUtils.py(33):   return map(lambda x: int(x, 16) / 256.0, [color[1:3], color[3:5], color[5:7]])
 --- modulename: graphicsUtils, funcname: <lambda>
graphicsUtils.py(33):   return map(lambda x: int(x, 16) / 256.0, [color[1:3], color[3:5], color[5:7]])
 --- modulename: graphicsUtils, funcname: <lambda>
graphicsUtils.py(33):   return map(lambda x: int(x, 16) / 256.0, [color[1:3], color[3:5], color[5:7]])
 --- modulename: graphicsUtils, funcname: <lambda>
graphicsUtils.py(33):   return map(lambda x: int(x, 16) / 256.0, [color[1:3], color[3:5], color[5:7]])
 --- modulename: graphicsUtils, funcname: colorToVector
graphicsUtils.py(33):   return map(lambda x: int(x, 16) / 256.0, [color[1:3], color[3:5], color[5:7]])
 --- modulename: graphicsUtils, funcname: <lambda>
graphicsUtils.py(33):   return map(lambda x: int(x, 16) / 256.0, [color[1:3], color[3:5], color[5:7]])
 --- modulename: graphicsUtils, funcname: <lambda>
graphicsUtils.py(33):   return map(lambda x: int(x, 16) / 256.0, [color[1:3], color[3:5], color[5:7]])
 --- modulename: graphicsUtils, funcname: <lambda>
graphicsUtils.py(33):   return map(lambda x: int(x, 16) / 256.0, [color[1:3], color[3:5], color[5:7]])
 --- modulename: graphicsUtils, funcname: colorToVector
graphicsUtils.py(33):   return map(lambda x: int(x, 16) / 256.0, [color[1:3], color[3:5], color[5:7]])
 --- modulename: graphicsUtils, funcname: <lambda>
graphicsUtils.py(33):   return map(lambda x: int(x, 16) / 256.0, [color[1:3], color[3:5], color[5:7]])
 --- modulename: graphicsUtils, funcname: <lambda>
graphicsUtils.py(33):   return map(lambda x: int(x, 16) / 256.0, [color[1:3], color[3:5], color[5:7]])
 --- modulename: graphicsUtils, funcname: <lambda>
graphicsUtils.py(33):   return map(lambda x: int(x, 16) / 256.0, [color[1:3], color[3:5], color[5:7]])
graphicsDisplay.py(57): PACMAN_COLOR = formatColor(255.0/255.0,255.0/255.0,61.0/255)
 --- modulename: graphicsUtils, funcname: formatColor
graphicsUtils.py(30):   return '#%02x%02x%02x' % (int(r * 255), int(g * 255), int(b * 255))
graphicsDisplay.py(58): PACMAN_SCALE = 0.5
graphicsDisplay.py(62): FOOD_COLOR = formatColor(1,1,1)
 --- modulename: graphicsUtils, funcname: formatColor
graphicsUtils.py(30):   return '#%02x%02x%02x' % (int(r * 255), int(g * 255), int(b * 255))
graphicsDisplay.py(63): FOOD_SIZE = 0.1
graphicsDisplay.py(66): LASER_COLOR = formatColor(1,0,0)
 --- modulename: graphicsUtils, funcname: formatColor
graphicsUtils.py(30):   return '#%02x%02x%02x' % (int(r * 255), int(g * 255), int(b * 255))
graphicsDisplay.py(67): LASER_SIZE = 0.02
graphicsDisplay.py(70): CAPSULE_COLOR = formatColor(1,1,1)
 --- modulename: graphicsUtils, funcname: formatColor
graphicsUtils.py(30):   return '#%02x%02x%02x' % (int(r * 255), int(g * 255), int(b * 255))
graphicsDisplay.py(71): CAPSULE_SIZE = 0.25
graphicsDisplay.py(74): WALL_RADIUS = 0.15
graphicsDisplay.py(76): class InfoPane:
 --- modulename: graphicsDisplay, funcname: InfoPane
graphicsDisplay.py(76): class InfoPane:
graphicsDisplay.py(77):   def __init__(self, layout, gridSize):
graphicsDisplay.py(86):   def toScreen(self, pos, y = None):
graphicsDisplay.py(99):   def drawPane(self):
graphicsDisplay.py(102):   def initializeGhostDistances(self, distances):
graphicsDisplay.py(115):   def updateScore(self, score):
graphicsDisplay.py(118):   def setTeam(self, isBlue):
graphicsDisplay.py(123):   def updateGhostDistances(self, distances):
graphicsDisplay.py(130):   def drawGhost(self):
graphicsDisplay.py(133):   def drawPacman(self):
graphicsDisplay.py(136):   def drawWarning(self):
graphicsDisplay.py(139):   def clearIcon(self):
graphicsDisplay.py(142):   def updateMessage(self, message):
graphicsDisplay.py(145):   def clearMessage(self):
graphicsDisplay.py(149): class PacmanGraphics:
 --- modulename: graphicsDisplay, funcname: PacmanGraphics
graphicsDisplay.py(149): class PacmanGraphics:
graphicsDisplay.py(150):   def __init__(self, zoom=1.0, frameTime=0.0, capture=False):
graphicsDisplay.py(159):   def initialize(self, state, isBlue = False):
graphicsDisplay.py(171):   def startGraphics(self, state):
graphicsDisplay.py(180):   def drawDistributions(self, state):
graphicsDisplay.py(195):   def drawStaticObjects(self, state):
graphicsDisplay.py(202):   def drawAgentObjects(self, state):
graphicsDisplay.py(213):   def swapImages(self, agentIndex, newState):
graphicsDisplay.py(227):   def update(self, newState):
graphicsDisplay.py(247):   def make_window(self, width, height):
graphicsDisplay.py(258):   def drawPacman(self, pacman, index):
graphicsDisplay.py(277):   def getEndpoints(self, direction, position=(0,0)):
graphicsDisplay.py(293):   def movePacman(self, position, direction, image):
graphicsDisplay.py(300):   def animatePacman(self, pacman, prevPacman, image):
graphicsDisplay.py(320):   def getGhostColor(self, ghost, ghostIndex):
graphicsDisplay.py(326):   def drawGhost(self, ghost, agentIndex):
graphicsDisplay.py(362):   def moveEyes(self, pos, dir, eyes):
graphicsDisplay.py(379):   def moveGhost(self, ghost, ghostIndex, prevGhost, ghostImageParts):
graphicsDisplay.py(396):   def getPosition(self, agentState):
graphicsDisplay.py(400):   def getDirection(self, agentState):
graphicsDisplay.py(404):   def finish(self):
graphicsDisplay.py(407):   def to_screen(self, point):
graphicsDisplay.py(415):   def to_screen2(self, point):
graphicsDisplay.py(422):   def drawWalls(self, wallMatrix):
graphicsDisplay.py(508):   def isWall(self, x, y, walls):
graphicsDisplay.py(515):   def drawFood(self, foodMatrix ):
graphicsDisplay.py(535):   def drawCapsules(self, capsules ):
graphicsDisplay.py(547):   def removeFood(self, cell, foodImages ):
graphicsDisplay.py(551):   def removeCapsule(self, cell, capsuleImages ):
graphicsDisplay.py(555):   def drawExpandedCells(self, cells):
graphicsDisplay.py(574):   def clearExpandedCells(self):
graphicsDisplay.py(580):   def updateDistributions(self, distributions):
graphicsDisplay.py(600): class FirstPersonPacmanGraphics(PacmanGraphics):
 --- modulename: graphicsDisplay, funcname: FirstPersonPacmanGraphics
graphicsDisplay.py(600): class FirstPersonPacmanGraphics(PacmanGraphics):
graphicsDisplay.py(601):   def __init__(self, zoom = 1.0, showGhosts = True, capture = False, frameTime=0):
graphicsDisplay.py(606):   def initialize(self, state, isBlue = False):
graphicsDisplay.py(623):   def lookAhead(self, config, state):
graphicsDisplay.py(637):   def getGhostColor(self, ghost, ghostIndex):
graphicsDisplay.py(640):   def getPosition(self, ghostState):
graphicsDisplay.py(646): def add(x, y):
graphicsDisplay.py(656): SAVE_POSTSCRIPT = False
graphicsDisplay.py(657): POSTSCRIPT_OUTPUT_DIR = 'frames'
graphicsDisplay.py(658): FRAME_NUMBER = 0
graphicsDisplay.py(659): import os
graphicsDisplay.py(661): def saveFrame():
pacman.py(551):     args['display'] = graphicsDisplay.PacmanGraphics(options.zoom, frameTime = options.frameTime)
 --- modulename: graphicsDisplay, funcname: __init__
graphicsDisplay.py(151):     self.have_window = 0
graphicsDisplay.py(152):     self.currentGhostImages = {}
graphicsDisplay.py(153):     self.pacmanImage = None
graphicsDisplay.py(154):     self.zoom = zoom
graphicsDisplay.py(155):     self.gridSize = DEFAULT_GRID_SIZE * zoom
graphicsDisplay.py(156):     self.capture = capture
graphicsDisplay.py(157):     self.frameTime = frameTime
pacman.py(552):   args['numGames'] = options.numGames
pacman.py(553):   args['record'] = options.record
pacman.py(554):   args['catchExceptions'] = options.catchExceptions
pacman.py(555):   args['timeout'] = options.timeout
pacman.py(558):   if options.gameToReplay != None:
pacman.py(568):   return args
pacman.py(663):   runGames( **args )
 --- modulename: pacman, funcname: runGames
pacman.py(612):   import __main__
pacman.py(613):   __main__.__dict__['_display'] = display
pacman.py(615):   rules = ClassicGameRules(timeout)
 --- modulename: pacman, funcname: __init__
pacman.py(255):     self.timeout = timeout
pacman.py(616):   games = []
pacman.py(618):   for i in range( numGames ):
pacman.py(619):     beQuiet = i < numTraining
pacman.py(620):     if beQuiet:
pacman.py(626):         gameDisplay = display
pacman.py(627):         rules.quiet = False
pacman.py(628):     game = rules.newGame( layout, pacman, ghosts, gameDisplay, beQuiet, catchExceptions)
 --- modulename: pacman, funcname: newGame
pacman.py(258):     agents = [pacmanAgent] + ghostAgents[:layout.getNumGhosts()]
 --- modulename: layout, funcname: getNumGhosts
layout.py(34):     return self.numGhosts
pacman.py(259):     initState = GameState()
 --- modulename: pacman, funcname: __init__
pacman.py(207):     if prevState != None: # Initial state
pacman.py(210):       self.data = GameStateData()
 --- modulename: game, funcname: __init__
game.py(367):     if prevState != None:
game.py(374):     self._foodEaten = None
game.py(375):     self._capsuleEaten = None
game.py(376):     self._agentMoved = None
game.py(377):     self._lose = False
game.py(378):     self._win = False
game.py(379):     self.scoreChange = 0
pacman.py(260):     initState.initialize( layout, len(ghostAgents) )
 --- modulename: pacman, funcname: initialize
pacman.py(237):     self.data.initialize(layout, numGhostAgents)
 --- modulename: game, funcname: initialize
game.py(476):     self.food = layout.food.copy()
 --- modulename: game, funcname: copy
game.py(195):     g = Grid(self.width, self.height)
 --- modulename: game, funcname: __init__
game.py(159):     if initialValue not in [False, True]: raise Exception('Grids can only contain booleans')
game.py(160):     self.CELLS_PER_INT = 30
game.py(162):     self.width = width
game.py(163):     self.height = height
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(165):     if bitRepresentation:
game.py(196):     g.data = [x[:] for x in self.data]
game.py(196):     g.data = [x[:] for x in self.data]
game.py(196):     g.data = [x[:] for x in self.data]
game.py(196):     g.data = [x[:] for x in self.data]
game.py(196):     g.data = [x[:] for x in self.data]
game.py(196):     g.data = [x[:] for x in self.data]
game.py(196):     g.data = [x[:] for x in self.data]
game.py(196):     g.data = [x[:] for x in self.data]
game.py(197):     return g
game.py(477):     self.capsules = layout.capsules[:]
game.py(478):     self.layout = layout
game.py(479):     self.score = 0
game.py(480):     self.scoreChange = 0
game.py(482):     self.agentStates = []
game.py(483):     numGhosts = 0
game.py(484):     for isPacman, pos in layout.agentPositions:
game.py(485):       if not isPacman:
game.py(488):       self.agentStates.append( AgentState( Configuration( pos, Directions.STOP), isPacman) )
 --- modulename: game, funcname: __init__
game.py(72):     self.pos = pos
game.py(73):     self.direction = direction
 --- modulename: game, funcname: __init__
game.py(118):     self.start = startConfiguration
game.py(119):     self.configuration = startConfiguration
game.py(120):     self.isPacman = isPacman
game.py(121):     self.scaredTimer = 0
game.py(484):     for isPacman, pos in layout.agentPositions:
game.py(489):     self._eaten = [False for a in self.agentStates]
game.py(489):     self._eaten = [False for a in self.agentStates]
pacman.py(261):     game = Game(agents, display, self, catchExceptions=catchExceptions)
 --- modulename: game, funcname: __init__
game.py(497):     self.agentCrashed = False
game.py(498):     self.agents = agents
game.py(499):     self.display = display
game.py(500):     self.rules = rules
game.py(501):     self.startingIndex = startingIndex
game.py(502):     self.gameOver = False
game.py(503):     self.muteAgents = muteAgents
game.py(504):     self.catchExceptions = catchExceptions
game.py(505):     self.moveHistory = []
game.py(506):     self.totalAgentTimes = [0 for agent in agents]
game.py(506):     self.totalAgentTimes = [0 for agent in agents]
game.py(507):     self.totalAgentTimeWarnings = [0 for agent in agents]
game.py(507):     self.totalAgentTimeWarnings = [0 for agent in agents]
game.py(508):     self.agentTimeout = False
pacman.py(262):     game.state = initState
pacman.py(263):     self.initialState = initState.deepCopy()
 --- modulename: pacman, funcname: deepCopy
pacman.py(213):     state = GameState( self )
 --- modulename: pacman, funcname: __init__
pacman.py(207):     if prevState != None: # Initial state
pacman.py(208):       self.data = GameStateData(prevState.data)
 --- modulename: game, funcname: __init__
game.py(367):     if prevState != None:
game.py(368):       self.food = prevState.food.shallowCopy()
 --- modulename: game, funcname: shallowCopy
game.py(203):     g = Grid(self.width, self.height)
 --- modulename: game, funcname: __init__
game.py(159):     if initialValue not in [False, True]: raise Exception('Grids can only contain booleans')
game.py(160):     self.CELLS_PER_INT = 30
game.py(162):     self.width = width
game.py(163):     self.height = height
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(165):     if bitRepresentation:
game.py(204):     g.data = self.data
game.py(205):     return g
game.py(369):       self.capsules = prevState.capsules[:]
game.py(370):       self.agentStates = self.copyAgentStates( prevState.agentStates )
 --- modulename: game, funcname: copyAgentStates
game.py(391):     copiedStates = []
game.py(392):     for agentState in agentStates:
game.py(393):       copiedStates.append( agentState.copy() )
 --- modulename: game, funcname: copy
game.py(138):     state = AgentState( self.start, self.isPacman )
 --- modulename: game, funcname: __init__
game.py(118):     self.start = startConfiguration
game.py(119):     self.configuration = startConfiguration
game.py(120):     self.isPacman = isPacman
game.py(121):     self.scaredTimer = 0
game.py(139):     state.configuration = self.configuration
game.py(140):     state.scaredTimer = self.scaredTimer
game.py(141):     return state
game.py(392):     for agentState in agentStates:
game.py(394):     return copiedStates
game.py(371):       self.layout = prevState.layout
game.py(372):       self._eaten = prevState._eaten
game.py(373):       self.score = prevState.score
game.py(374):     self._foodEaten = None
game.py(375):     self._capsuleEaten = None
game.py(376):     self._agentMoved = None
game.py(377):     self._lose = False
game.py(378):     self._win = False
game.py(379):     self.scoreChange = 0
pacman.py(214):     state.data = self.data.deepCopy()
 --- modulename: game, funcname: deepCopy
game.py(382):     state = GameStateData( self )
 --- modulename: game, funcname: __init__
game.py(367):     if prevState != None:
game.py(368):       self.food = prevState.food.shallowCopy()
 --- modulename: game, funcname: shallowCopy
game.py(203):     g = Grid(self.width, self.height)
 --- modulename: game, funcname: __init__
game.py(159):     if initialValue not in [False, True]: raise Exception('Grids can only contain booleans')
game.py(160):     self.CELLS_PER_INT = 30
game.py(162):     self.width = width
game.py(163):     self.height = height
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(165):     if bitRepresentation:
game.py(204):     g.data = self.data
game.py(205):     return g
game.py(369):       self.capsules = prevState.capsules[:]
game.py(370):       self.agentStates = self.copyAgentStates( prevState.agentStates )
 --- modulename: game, funcname: copyAgentStates
game.py(391):     copiedStates = []
game.py(392):     for agentState in agentStates:
game.py(393):       copiedStates.append( agentState.copy() )
 --- modulename: game, funcname: copy
game.py(138):     state = AgentState( self.start, self.isPacman )
 --- modulename: game, funcname: __init__
game.py(118):     self.start = startConfiguration
game.py(119):     self.configuration = startConfiguration
game.py(120):     self.isPacman = isPacman
game.py(121):     self.scaredTimer = 0
game.py(139):     state.configuration = self.configuration
game.py(140):     state.scaredTimer = self.scaredTimer
game.py(141):     return state
game.py(392):     for agentState in agentStates:
game.py(394):     return copiedStates
game.py(371):       self.layout = prevState.layout
game.py(372):       self._eaten = prevState._eaten
game.py(373):       self.score = prevState.score
game.py(374):     self._foodEaten = None
game.py(375):     self._capsuleEaten = None
game.py(376):     self._agentMoved = None
game.py(377):     self._lose = False
game.py(378):     self._win = False
game.py(379):     self.scoreChange = 0
game.py(383):     state.food = self.food.deepCopy()
 --- modulename: game, funcname: deepCopy
game.py(200):     return self.copy()
 --- modulename: game, funcname: copy
game.py(195):     g = Grid(self.width, self.height)
 --- modulename: game, funcname: __init__
game.py(159):     if initialValue not in [False, True]: raise Exception('Grids can only contain booleans')
game.py(160):     self.CELLS_PER_INT = 30
game.py(162):     self.width = width
game.py(163):     self.height = height
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(165):     if bitRepresentation:
game.py(196):     g.data = [x[:] for x in self.data]
game.py(196):     g.data = [x[:] for x in self.data]
game.py(196):     g.data = [x[:] for x in self.data]
game.py(196):     g.data = [x[:] for x in self.data]
game.py(196):     g.data = [x[:] for x in self.data]
game.py(196):     g.data = [x[:] for x in self.data]
game.py(196):     g.data = [x[:] for x in self.data]
game.py(196):     g.data = [x[:] for x in self.data]
game.py(197):     return g
game.py(384):     state.layout = self.layout.deepCopy()
 --- modulename: layout, funcname: deepCopy
layout.py(86):     return Layout(self.layoutText[:])
 --- modulename: layout, funcname: __init__
layout.py(22):     self.width = len(layoutText[0])
layout.py(23):     self.height= len(layoutText)
layout.py(24):     self.walls = Grid(self.width, self.height, False)
 --- modulename: game, funcname: __init__
game.py(159):     if initialValue not in [False, True]: raise Exception('Grids can only contain booleans')
game.py(160):     self.CELLS_PER_INT = 30
game.py(162):     self.width = width
game.py(163):     self.height = height
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(165):     if bitRepresentation:
layout.py(25):     self.food = Grid(self.width, self.height, False)
 --- modulename: game, funcname: __init__
game.py(159):     if initialValue not in [False, True]: raise Exception('Grids can only contain booleans')
game.py(160):     self.CELLS_PER_INT = 30
game.py(162):     self.width = width
game.py(163):     self.height = height
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(165):     if bitRepresentation:
layout.py(26):     self.capsules = []
layout.py(27):     self.agentPositions = []
layout.py(28):     self.numGhosts = 0
layout.py(29):     self.processLayoutText(layoutText)
 --- modulename: layout, funcname: processLayoutText
layout.py(101):     maxY = self.height - 1
layout.py(102):     for y in range(self.height):       
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(102):     for y in range(self.height):       
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(113):       self.food[x][y] = True 
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(114):     elif layoutChar == 'o':    
layout.py(116):     elif layoutChar == 'P':    
layout.py(118):     elif layoutChar in ['G']:    
layout.py(121):     elif layoutChar in  ['1', '2', '3', '4']:
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(102):     for y in range(self.height):       
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(114):     elif layoutChar == 'o':    
layout.py(116):     elif layoutChar == 'P':    
layout.py(118):     elif layoutChar in ['G']:    
layout.py(121):     elif layoutChar in  ['1', '2', '3', '4']:
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(114):     elif layoutChar == 'o':    
layout.py(116):     elif layoutChar == 'P':    
layout.py(118):     elif layoutChar in ['G']:    
layout.py(121):     elif layoutChar in  ['1', '2', '3', '4']:
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(114):     elif layoutChar == 'o':    
layout.py(116):     elif layoutChar == 'P':    
layout.py(118):     elif layoutChar in ['G']:    
layout.py(121):     elif layoutChar in  ['1', '2', '3', '4']:
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(102):     for y in range(self.height):       
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(114):     elif layoutChar == 'o':    
layout.py(116):     elif layoutChar == 'P':    
layout.py(118):     elif layoutChar in ['G']:    
layout.py(121):     elif layoutChar in  ['1', '2', '3', '4']:
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(114):     elif layoutChar == 'o':    
layout.py(116):     elif layoutChar == 'P':    
layout.py(118):     elif layoutChar in ['G']:    
layout.py(121):     elif layoutChar in  ['1', '2', '3', '4']:
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(114):     elif layoutChar == 'o':    
layout.py(116):     elif layoutChar == 'P':    
layout.py(118):     elif layoutChar in ['G']:    
layout.py(121):     elif layoutChar in  ['1', '2', '3', '4']:
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(114):     elif layoutChar == 'o':    
layout.py(116):     elif layoutChar == 'P':    
layout.py(118):     elif layoutChar in ['G']:    
layout.py(121):     elif layoutChar in  ['1', '2', '3', '4']:
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(102):     for y in range(self.height):       
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(114):     elif layoutChar == 'o':    
layout.py(116):     elif layoutChar == 'P':    
layout.py(118):     elif layoutChar in ['G']:    
layout.py(121):     elif layoutChar in  ['1', '2', '3', '4']:
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(114):     elif layoutChar == 'o':    
layout.py(116):     elif layoutChar == 'P':    
layout.py(118):     elif layoutChar in ['G']:    
layout.py(121):     elif layoutChar in  ['1', '2', '3', '4']:
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(102):     for y in range(self.height):       
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(114):     elif layoutChar == 'o':    
layout.py(116):     elif layoutChar == 'P':    
layout.py(118):     elif layoutChar in ['G']:    
layout.py(121):     elif layoutChar in  ['1', '2', '3', '4']:
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(114):     elif layoutChar == 'o':    
layout.py(116):     elif layoutChar == 'P':    
layout.py(118):     elif layoutChar in ['G']:    
layout.py(121):     elif layoutChar in  ['1', '2', '3', '4']:
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(114):     elif layoutChar == 'o':    
layout.py(116):     elif layoutChar == 'P':    
layout.py(118):     elif layoutChar in ['G']:    
layout.py(121):     elif layoutChar in  ['1', '2', '3', '4']:
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(114):     elif layoutChar == 'o':    
layout.py(116):     elif layoutChar == 'P':    
layout.py(118):     elif layoutChar in ['G']:    
layout.py(121):     elif layoutChar in  ['1', '2', '3', '4']:
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(114):     elif layoutChar == 'o':    
layout.py(116):     elif layoutChar == 'P':    
layout.py(117):       self.agentPositions.append( (0, (x, y) ) )
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(102):     for y in range(self.height):       
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(102):     for y in range(self.height):       
layout.py(106):     self.agentPositions.sort()
layout.py(107):     self.agentPositions = [ ( i == 0, pos) for i, pos in self.agentPositions]
layout.py(107):     self.agentPositions = [ ( i == 0, pos) for i, pos in self.agentPositions]
layout.py(30):     self.layoutText = layoutText
game.py(385):     state._agentMoved = self._agentMoved
game.py(386):     state._foodEaten = self._foodEaten
game.py(387):     state._capsuleEaten = self._capsuleEaten
game.py(388):     return state
pacman.py(215):     return state
pacman.py(264):     self.quiet = quiet
pacman.py(265):     return game
pacman.py(629):     game.run()
 --- modulename: game, funcname: run
game.py(549):     self.display.initialize(self.state.data)
 --- modulename: graphicsDisplay, funcname: initialize
graphicsDisplay.py(160):     self.isBlue = isBlue
graphicsDisplay.py(161):     self.startGraphics(state)
 --- modulename: graphicsDisplay, funcname: startGraphics
graphicsDisplay.py(172):     self.layout = state.layout
graphicsDisplay.py(173):     layout = self.layout
graphicsDisplay.py(174):     self.width = layout.width
graphicsDisplay.py(175):     self.height = layout.height
graphicsDisplay.py(176):     self.make_window(self.width, self.height)
 --- modulename: graphicsDisplay, funcname: make_window
graphicsDisplay.py(248):     grid_width = (width-1) * self.gridSize
graphicsDisplay.py(249):     grid_height = (height-1) * self.gridSize
graphicsDisplay.py(250):     screen_width = 2*self.gridSize + grid_width
graphicsDisplay.py(251):     screen_height = 2*self.gridSize + grid_height + INFO_PANE_HEIGHT
graphicsDisplay.py(253):     begin_graphics(screen_width,
graphicsDisplay.py(254):                    screen_height,
graphicsDisplay.py(255):                    BACKGROUND_COLOR,
graphicsDisplay.py(256):                    "CS188 Pacman")
 --- modulename: graphicsUtils, funcname: begin_graphics
graphicsUtils.py(55):     if _root_window is not None:
graphicsUtils.py(60):     _canvas_xs, _canvas_ys = width - 1, height - 1
graphicsUtils.py(61):     _canvas_x, _canvas_y = 0, _canvas_ys
graphicsUtils.py(62):     _bg_color = color
graphicsUtils.py(65):     _root_window = Tkinter.Tk()
 --- modulename: Tkinter, funcname: __init__
Tkinter.py(1732):         self.master = None
Tkinter.py(1733):         self.children = {}
Tkinter.py(1734):         self._tkloaded = 0
Tkinter.py(1737):         self.tk = None
Tkinter.py(1738):         if baseName is None:
Tkinter.py(1739):             import sys, os
Tkinter.py(1740):             baseName = os.path.basename(sys.argv[0])
 --- modulename: posixpath, funcname: basename
posixpath.py(121):     i = p.rfind('/') + 1
posixpath.py(122):     return p[i:]
Tkinter.py(1741):             baseName, ext = os.path.splitext(baseName)
 --- modulename: posixpath, funcname: splitext
posixpath.py(105):     return genericpath._splitext(p, sep, altsep, extsep)
 --- modulename: genericpath, funcname: _splitext
genericpath.py(91):     sepIndex = p.rfind(sep)
genericpath.py(92):     if altsep:
genericpath.py(96):     dotIndex = p.rfind(extsep)
genericpath.py(97):     if dotIndex > sepIndex:
genericpath.py(99):         filenameIndex = sepIndex + 1
genericpath.py(100):         while filenameIndex < dotIndex:
genericpath.py(101):             if p[filenameIndex] != extsep:
genericpath.py(102):                 return p[:dotIndex], p[dotIndex:]
Tkinter.py(1742):             if ext not in ('.py', '.pyc', '.pyo'):
Tkinter.py(1744):         interactive = 0
Tkinter.py(1745):         self.tk = _tkinter.create(screenName, baseName, className, interactive, wantobjects, useTk, sync, use)
Tkinter.py(1746):         if useTk:
Tkinter.py(1747):             self._loadtk()
 --- modulename: Tkinter, funcname: _loadtk
Tkinter.py(1756):         self._tkloaded = 1
Tkinter.py(1759):         tk_version = self.tk.getvar('tk_version')
Tkinter.py(1760):         if tk_version != _tkinter.TK_VERSION:
Tkinter.py(1765):         tcl_version = str(self.tk.getvar('tcl_version'))
Tkinter.py(1766):         if tcl_version != _tkinter.TCL_VERSION:
Tkinter.py(1770):         if TkVersion < 4.0:
Tkinter.py(1777):         if self._tclCommands is None:
Tkinter.py(1778):             self._tclCommands = []
Tkinter.py(1779):         self.tk.createcommand('tkerror', _tkerror)
Tkinter.py(1780):         self.tk.createcommand('exit', _exit)
Tkinter.py(1781):         self._tclCommands.append('tkerror')
Tkinter.py(1782):         self._tclCommands.append('exit')
Tkinter.py(1783):         if _support_default_root and not _default_root:
Tkinter.py(1784):             _default_root = self
Tkinter.py(1785):         self.protocol("WM_DELETE_WINDOW", self.destroy)
 --- modulename: Tkinter, funcname: wm_protocol
Tkinter.py(1682):         if hasattr(func, '__call__'):
Tkinter.py(1683):             command = self._register(func)
 --- modulename: Tkinter, funcname: _register
Tkinter.py(1148):         f = CallWrapper(func, subst, self).__call__
 --- modulename: Tkinter, funcname: __init__
Tkinter.py(1462):         self.func = func
Tkinter.py(1463):         self.subst = subst
Tkinter.py(1464):         self.widget = widget
Tkinter.py(1149):         name = repr(id(f))
Tkinter.py(1150):         try:
Tkinter.py(1151):             func = func.im_func
Tkinter.py(1154):         try:
Tkinter.py(1155):             name = name + func.__name__
Tkinter.py(1158):         self.tk.createcommand(name, f)
Tkinter.py(1159):         if needcleanup:
Tkinter.py(1160):             if self._tclCommands is None:
Tkinter.py(1162):             self._tclCommands.append(name)
Tkinter.py(1163):         return name
Tkinter.py(1686):         return self.tk.call(
Tkinter.py(1687):             'wm', 'protocol', self._w, name, command)
Tkinter.py(1748):         if not sys.flags.ignore_environment:
Tkinter.py(1750):             self.readprofile(baseName, className)
 --- modulename: Tkinter, funcname: readprofile
Tkinter.py(1799):         import os
Tkinter.py(1800):         if 'HOME' in os.environ: home = os.environ['HOME']
 --- modulename: UserDict, funcname: __contains__
UserDict.py(71):         return key in self.data
 --- modulename: UserDict, funcname: __getitem__
UserDict.py(19):         if key in self.data:
UserDict.py(20):             return self.data[key]
Tkinter.py(1802):         class_tcl = os.path.join(home, '.%s.tcl' % className)
 --- modulename: posixpath, funcname: join
posixpath.py(73):     path = a
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(81):     return path
Tkinter.py(1803):         class_py = os.path.join(home, '.%s.py' % className)
 --- modulename: posixpath, funcname: join
posixpath.py(73):     path = a
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(81):     return path
Tkinter.py(1804):         base_tcl = os.path.join(home, '.%s.tcl' % baseName)
 --- modulename: posixpath, funcname: join
posixpath.py(73):     path = a
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(81):     return path
Tkinter.py(1805):         base_py = os.path.join(home, '.%s.py' % baseName)
 --- modulename: posixpath, funcname: join
posixpath.py(73):     path = a
posixpath.py(74):     for b in p:
posixpath.py(75):         if b.startswith('/'):
posixpath.py(77):         elif path == '' or path.endswith('/'):
posixpath.py(80):             path += '/' + b
posixpath.py(74):     for b in p:
posixpath.py(81):     return path
Tkinter.py(1806):         dir = {'self': self}
Tkinter.py(1807):         exec 'from Tkinter import *' in dir
Tkinter.py(1808):         if os.path.isfile(class_tcl):
 --- modulename: genericpath, funcname: isfile
genericpath.py(28):     try:
genericpath.py(29):         st = os.stat(path)
genericpath.py(30):     except os.error:
genericpath.py(31):         return False
Tkinter.py(1810):         if os.path.isfile(class_py):
 --- modulename: genericpath, funcname: isfile
genericpath.py(28):     try:
genericpath.py(29):         st = os.stat(path)
genericpath.py(30):     except os.error:
genericpath.py(31):         return False
Tkinter.py(1812):         if os.path.isfile(base_tcl):
 --- modulename: genericpath, funcname: isfile
genericpath.py(28):     try:
genericpath.py(29):         st = os.stat(path)
genericpath.py(30):     except os.error:
genericpath.py(31):         return False
Tkinter.py(1814):         if os.path.isfile(base_py):
 --- modulename: genericpath, funcname: isfile
genericpath.py(28):     try:
genericpath.py(29):         st = os.stat(path)
genericpath.py(30):     except os.error:
genericpath.py(31):         return False
graphicsUtils.py(66):     _root_window.protocol('WM_DELETE_WINDOW', _destroy_window)
 --- modulename: Tkinter, funcname: wm_protocol
Tkinter.py(1682):         if hasattr(func, '__call__'):
Tkinter.py(1683):             command = self._register(func)
 --- modulename: Tkinter, funcname: _register
Tkinter.py(1148):         f = CallWrapper(func, subst, self).__call__
 --- modulename: Tkinter, funcname: __init__
Tkinter.py(1462):         self.func = func
Tkinter.py(1463):         self.subst = subst
Tkinter.py(1464):         self.widget = widget
Tkinter.py(1149):         name = repr(id(f))
Tkinter.py(1150):         try:
Tkinter.py(1151):             func = func.im_func
Tkinter.py(1152):         except AttributeError:
Tkinter.py(1153):             pass
Tkinter.py(1154):         try:
Tkinter.py(1155):             name = name + func.__name__
Tkinter.py(1158):         self.tk.createcommand(name, f)
Tkinter.py(1159):         if needcleanup:
Tkinter.py(1160):             if self._tclCommands is None:
Tkinter.py(1162):             self._tclCommands.append(name)
Tkinter.py(1163):         return name
Tkinter.py(1686):         return self.tk.call(
Tkinter.py(1687):             'wm', 'protocol', self._w, name, command)
graphicsUtils.py(67):     _root_window.title(title or 'Graphics Window')
 --- modulename: Tkinter, funcname: wm_title
Tkinter.py(1707):         return self.tk.call('wm', 'title', self._w, string)
graphicsUtils.py(68):     _root_window.resizable(0, 0)
 --- modulename: Tkinter, funcname: wm_resizable
Tkinter.py(1692):         return self.tk.call('wm', 'resizable', self._w, width, height)
graphicsUtils.py(71):     try:
graphicsUtils.py(72):       _canvas = Tkinter.Canvas(_root_window, width=width, height=height)
 --- modulename: Tkinter, funcname: __init__
Tkinter.py(2176):         Widget.__init__(self, master, 'canvas', cnf, kw)
 --- modulename: Tkinter, funcname: __init__
Tkinter.py(2024):         if kw:
Tkinter.py(2025):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(2026):         self.widgetName = widgetName
Tkinter.py(2027):         BaseWidget._setup(self, master, cnf)
 --- modulename: Tkinter, funcname: _setup
Tkinter.py(1998):         if _support_default_root:
Tkinter.py(2000):             if not master:
 --- modulename: Tkinter, funcname: __getattr__
Tkinter.py(1826):         return getattr(self.tk, attr)
 --- modulename: Tkinter, funcname: __getattr__
Tkinter.py(1826):         return getattr(self.tk, attr)
Tkinter.py(2004):         self.master = master
Tkinter.py(2005):         self.tk = master.tk
Tkinter.py(2006):         name = None
Tkinter.py(2007):         if 'name' in cnf:
Tkinter.py(2010):         if not name:
Tkinter.py(2011):             name = repr(id(self))
Tkinter.py(2012):         self._name = name
Tkinter.py(2013):         if master._w=='.':
Tkinter.py(2014):             self._w = '.' + name
Tkinter.py(2017):         self.children = {}
Tkinter.py(2018):         if self._name in self.master.children:
Tkinter.py(2020):         self.master.children[self._name] = self
Tkinter.py(2028):         if self._tclCommands is None:
Tkinter.py(2029):             self._tclCommands = []
Tkinter.py(2030):         classes = []
Tkinter.py(2031):         for k in cnf.keys():
Tkinter.py(2032):             if type(k) is ClassType:
Tkinter.py(2031):         for k in cnf.keys():
Tkinter.py(2032):             if type(k) is ClassType:
Tkinter.py(2031):         for k in cnf.keys():
Tkinter.py(2035):         self.tk.call(
Tkinter.py(2036):             (widgetName, self._w) + extra + self._options(cnf))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1105):             cnf = _cnfmerge(cnf)
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(109):         return cnfs
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
Tkinter.py(2037):         for k, v in classes:
graphicsUtils.py(73):       _canvas.pack()
 --- modulename: Tkinter, funcname: pack_configure
Tkinter.py(1866):         self.tk.call(
Tkinter.py(1867):               ('pack', 'configure', self._w)
Tkinter.py(1868):               + self._options(cnf, kw))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1105):             cnf = _cnfmerge(cnf)
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(109):         return cnfs
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsUtils.py(74):       draw_background()
 --- modulename: graphicsUtils, funcname: draw_background
graphicsUtils.py(127):     corners = [(0,0), (0, _canvas_ys), (_canvas_xs, _canvas_ys), (_canvas_xs, 0)]
graphicsUtils.py(128):     polygon(corners, _bg_color, fillColor=_bg_color, filled=True, smoothed=False)
 --- modulename: graphicsUtils, funcname: polygon
graphicsUtils.py(159):   c = []
graphicsUtils.py(160):   for coord in coords:
graphicsUtils.py(161):     c.append(coord[0])
graphicsUtils.py(162):     c.append(coord[1])
graphicsUtils.py(160):   for coord in coords:
graphicsUtils.py(161):     c.append(coord[0])
graphicsUtils.py(162):     c.append(coord[1])
graphicsUtils.py(160):   for coord in coords:
graphicsUtils.py(161):     c.append(coord[0])
graphicsUtils.py(162):     c.append(coord[1])
graphicsUtils.py(160):   for coord in coords:
graphicsUtils.py(161):     c.append(coord[0])
graphicsUtils.py(162):     c.append(coord[1])
graphicsUtils.py(160):   for coord in coords:
graphicsUtils.py(163):   if fillColor == None: fillColor = outlineColor
graphicsUtils.py(164):   if filled == 0: fillColor = ""
graphicsUtils.py(165):   poly = _canvas.create_polygon(c, outline=outlineColor, fill=fillColor, smooth=smoothed, width=width)
 --- modulename: Tkinter, funcname: create_polygon
Tkinter.py(2269):         return self._create('polygon', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsUtils.py(166):   if behind > 0:    
graphicsUtils.py(168):   return poly
graphicsUtils.py(75):       _canvas.update()
 --- modulename: Tkinter, funcname: update
Tkinter.py(962):         self.tk.call('update')
graphicsUtils.py(81):     _root_window.bind( "<KeyPress>", _keypress )
 --- modulename: Tkinter, funcname: bind
Tkinter.py(1036):         return self._bind(('bind', self._w), sequence, func, add)
 --- modulename: Tkinter, funcname: _bind
Tkinter.py(982):         if type(func) is StringType:
Tkinter.py(984):         elif func:
Tkinter.py(985):             funcid = self._register(func, self._substitute,
Tkinter.py(986):                         needcleanup)
 --- modulename: Tkinter, funcname: _register
Tkinter.py(1148):         f = CallWrapper(func, subst, self).__call__
 --- modulename: Tkinter, funcname: __init__
Tkinter.py(1462):         self.func = func
Tkinter.py(1463):         self.subst = subst
Tkinter.py(1464):         self.widget = widget
Tkinter.py(1149):         name = repr(id(f))
Tkinter.py(1150):         try:
Tkinter.py(1151):             func = func.im_func
Tkinter.py(1152):         except AttributeError:
Tkinter.py(1153):             pass
Tkinter.py(1154):         try:
Tkinter.py(1155):             name = name + func.__name__
Tkinter.py(1158):         self.tk.createcommand(name, f)
Tkinter.py(1159):         if needcleanup:
Tkinter.py(1160):             if self._tclCommands is None:
Tkinter.py(1162):             self._tclCommands.append(name)
Tkinter.py(1163):         return name
Tkinter.py(987):             cmd = ('%sif {"[%s %s]" == "break"} break\n'
Tkinter.py(989):                    (add and '+' or '',
Tkinter.py(990):                 funcid, self._subst_format_str))
Tkinter.py(991):             self.tk.call(what + (sequence, cmd))
Tkinter.py(992):             return funcid
graphicsUtils.py(82):     _root_window.bind( "<KeyRelease>", _keyrelease )
 --- modulename: Tkinter, funcname: bind
Tkinter.py(1036):         return self._bind(('bind', self._w), sequence, func, add)
 --- modulename: Tkinter, funcname: _bind
Tkinter.py(982):         if type(func) is StringType:
Tkinter.py(984):         elif func:
Tkinter.py(985):             funcid = self._register(func, self._substitute,
Tkinter.py(986):                         needcleanup)
 --- modulename: Tkinter, funcname: _register
Tkinter.py(1148):         f = CallWrapper(func, subst, self).__call__
 --- modulename: Tkinter, funcname: __init__
Tkinter.py(1462):         self.func = func
Tkinter.py(1463):         self.subst = subst
Tkinter.py(1464):         self.widget = widget
Tkinter.py(1149):         name = repr(id(f))
Tkinter.py(1150):         try:
Tkinter.py(1151):             func = func.im_func
Tkinter.py(1152):         except AttributeError:
Tkinter.py(1153):             pass
Tkinter.py(1154):         try:
Tkinter.py(1155):             name = name + func.__name__
Tkinter.py(1158):         self.tk.createcommand(name, f)
Tkinter.py(1159):         if needcleanup:
Tkinter.py(1160):             if self._tclCommands is None:
Tkinter.py(1162):             self._tclCommands.append(name)
Tkinter.py(1163):         return name
Tkinter.py(987):             cmd = ('%sif {"[%s %s]" == "break"} break\n'
Tkinter.py(989):                    (add and '+' or '',
Tkinter.py(990):                 funcid, self._subst_format_str))
Tkinter.py(991):             self.tk.call(what + (sequence, cmd))
Tkinter.py(992):             return funcid
graphicsUtils.py(83):     _root_window.bind( "<FocusIn>", _clear_keys )
 --- modulename: Tkinter, funcname: bind
Tkinter.py(1036):         return self._bind(('bind', self._w), sequence, func, add)
 --- modulename: Tkinter, funcname: _bind
Tkinter.py(982):         if type(func) is StringType:
Tkinter.py(984):         elif func:
Tkinter.py(985):             funcid = self._register(func, self._substitute,
Tkinter.py(986):                         needcleanup)
 --- modulename: Tkinter, funcname: _register
Tkinter.py(1148):         f = CallWrapper(func, subst, self).__call__
 --- modulename: Tkinter, funcname: __init__
Tkinter.py(1462):         self.func = func
Tkinter.py(1463):         self.subst = subst
Tkinter.py(1464):         self.widget = widget
Tkinter.py(1149):         name = repr(id(f))
Tkinter.py(1150):         try:
Tkinter.py(1151):             func = func.im_func
Tkinter.py(1152):         except AttributeError:
Tkinter.py(1153):             pass
Tkinter.py(1154):         try:
Tkinter.py(1155):             name = name + func.__name__
Tkinter.py(1158):         self.tk.createcommand(name, f)
Tkinter.py(1159):         if needcleanup:
Tkinter.py(1160):             if self._tclCommands is None:
Tkinter.py(1162):             self._tclCommands.append(name)
Tkinter.py(1163):         return name
Tkinter.py(987):             cmd = ('%sif {"[%s %s]" == "break"} break\n'
Tkinter.py(989):                    (add and '+' or '',
Tkinter.py(990):                 funcid, self._subst_format_str))
Tkinter.py(991):             self.tk.call(what + (sequence, cmd))
Tkinter.py(992):             return funcid
graphicsUtils.py(84):     _root_window.bind( "<FocusOut>", _clear_keys )
 --- modulename: Tkinter, funcname: bind
Tkinter.py(1036):         return self._bind(('bind', self._w), sequence, func, add)
 --- modulename: Tkinter, funcname: _bind
Tkinter.py(982):         if type(func) is StringType:
Tkinter.py(984):         elif func:
Tkinter.py(985):             funcid = self._register(func, self._substitute,
Tkinter.py(986):                         needcleanup)
 --- modulename: Tkinter, funcname: _register
Tkinter.py(1148):         f = CallWrapper(func, subst, self).__call__
 --- modulename: Tkinter, funcname: __init__
Tkinter.py(1462):         self.func = func
Tkinter.py(1463):         self.subst = subst
Tkinter.py(1464):         self.widget = widget
Tkinter.py(1149):         name = repr(id(f))
Tkinter.py(1150):         try:
Tkinter.py(1151):             func = func.im_func
Tkinter.py(1152):         except AttributeError:
Tkinter.py(1153):             pass
Tkinter.py(1154):         try:
Tkinter.py(1155):             name = name + func.__name__
Tkinter.py(1158):         self.tk.createcommand(name, f)
Tkinter.py(1159):         if needcleanup:
Tkinter.py(1160):             if self._tclCommands is None:
Tkinter.py(1162):             self._tclCommands.append(name)
Tkinter.py(1163):         return name
Tkinter.py(987):             cmd = ('%sif {"[%s %s]" == "break"} break\n'
Tkinter.py(989):                    (add and '+' or '',
Tkinter.py(990):                 funcid, self._subst_format_str))
Tkinter.py(991):             self.tk.call(what + (sequence, cmd))
Tkinter.py(992):             return funcid
graphicsUtils.py(85):     _root_window.bind( "<Button-1>", _leftclick )
 --- modulename: Tkinter, funcname: bind
Tkinter.py(1036):         return self._bind(('bind', self._w), sequence, func, add)
 --- modulename: Tkinter, funcname: _bind
Tkinter.py(982):         if type(func) is StringType:
Tkinter.py(984):         elif func:
Tkinter.py(985):             funcid = self._register(func, self._substitute,
Tkinter.py(986):                         needcleanup)
 --- modulename: Tkinter, funcname: _register
Tkinter.py(1148):         f = CallWrapper(func, subst, self).__call__
 --- modulename: Tkinter, funcname: __init__
Tkinter.py(1462):         self.func = func
Tkinter.py(1463):         self.subst = subst
Tkinter.py(1464):         self.widget = widget
Tkinter.py(1149):         name = repr(id(f))
Tkinter.py(1150):         try:
Tkinter.py(1151):             func = func.im_func
Tkinter.py(1152):         except AttributeError:
Tkinter.py(1153):             pass
Tkinter.py(1154):         try:
Tkinter.py(1155):             name = name + func.__name__
Tkinter.py(1158):         self.tk.createcommand(name, f)
Tkinter.py(1159):         if needcleanup:
Tkinter.py(1160):             if self._tclCommands is None:
Tkinter.py(1162):             self._tclCommands.append(name)
Tkinter.py(1163):         return name
Tkinter.py(987):             cmd = ('%sif {"[%s %s]" == "break"} break\n'
Tkinter.py(989):                    (add and '+' or '',
Tkinter.py(990):                 funcid, self._subst_format_str))
Tkinter.py(991):             self.tk.call(what + (sequence, cmd))
Tkinter.py(992):             return funcid
graphicsUtils.py(86):     _root_window.bind( "<Button-2>", _rightclick )
 --- modulename: Tkinter, funcname: bind
Tkinter.py(1036):         return self._bind(('bind', self._w), sequence, func, add)
 --- modulename: Tkinter, funcname: _bind
Tkinter.py(982):         if type(func) is StringType:
Tkinter.py(984):         elif func:
Tkinter.py(985):             funcid = self._register(func, self._substitute,
Tkinter.py(986):                         needcleanup)
 --- modulename: Tkinter, funcname: _register
Tkinter.py(1148):         f = CallWrapper(func, subst, self).__call__
 --- modulename: Tkinter, funcname: __init__
Tkinter.py(1462):         self.func = func
Tkinter.py(1463):         self.subst = subst
Tkinter.py(1464):         self.widget = widget
Tkinter.py(1149):         name = repr(id(f))
Tkinter.py(1150):         try:
Tkinter.py(1151):             func = func.im_func
Tkinter.py(1152):         except AttributeError:
Tkinter.py(1153):             pass
Tkinter.py(1154):         try:
Tkinter.py(1155):             name = name + func.__name__
Tkinter.py(1158):         self.tk.createcommand(name, f)
Tkinter.py(1159):         if needcleanup:
Tkinter.py(1160):             if self._tclCommands is None:
Tkinter.py(1162):             self._tclCommands.append(name)
Tkinter.py(1163):         return name
Tkinter.py(987):             cmd = ('%sif {"[%s %s]" == "break"} break\n'
Tkinter.py(989):                    (add and '+' or '',
Tkinter.py(990):                 funcid, self._subst_format_str))
Tkinter.py(991):             self.tk.call(what + (sequence, cmd))
Tkinter.py(992):             return funcid
graphicsUtils.py(87):     _root_window.bind( "<Button-3>", _rightclick )
 --- modulename: Tkinter, funcname: bind
Tkinter.py(1036):         return self._bind(('bind', self._w), sequence, func, add)
 --- modulename: Tkinter, funcname: _bind
Tkinter.py(982):         if type(func) is StringType:
Tkinter.py(984):         elif func:
Tkinter.py(985):             funcid = self._register(func, self._substitute,
Tkinter.py(986):                         needcleanup)
 --- modulename: Tkinter, funcname: _register
Tkinter.py(1148):         f = CallWrapper(func, subst, self).__call__
 --- modulename: Tkinter, funcname: __init__
Tkinter.py(1462):         self.func = func
Tkinter.py(1463):         self.subst = subst
Tkinter.py(1464):         self.widget = widget
Tkinter.py(1149):         name = repr(id(f))
Tkinter.py(1150):         try:
Tkinter.py(1151):             func = func.im_func
Tkinter.py(1152):         except AttributeError:
Tkinter.py(1153):             pass
Tkinter.py(1154):         try:
Tkinter.py(1155):             name = name + func.__name__
Tkinter.py(1158):         self.tk.createcommand(name, f)
Tkinter.py(1159):         if needcleanup:
Tkinter.py(1160):             if self._tclCommands is None:
Tkinter.py(1162):             self._tclCommands.append(name)
Tkinter.py(1163):         return name
Tkinter.py(987):             cmd = ('%sif {"[%s %s]" == "break"} break\n'
Tkinter.py(989):                    (add and '+' or '',
Tkinter.py(990):                 funcid, self._subst_format_str))
Tkinter.py(991):             self.tk.call(what + (sequence, cmd))
Tkinter.py(992):             return funcid
graphicsUtils.py(88):     _root_window.bind( "<Control-Button-1>", _ctrl_leftclick)
 --- modulename: Tkinter, funcname: bind
Tkinter.py(1036):         return self._bind(('bind', self._w), sequence, func, add)
 --- modulename: Tkinter, funcname: _bind
Tkinter.py(982):         if type(func) is StringType:
Tkinter.py(984):         elif func:
Tkinter.py(985):             funcid = self._register(func, self._substitute,
Tkinter.py(986):                         needcleanup)
 --- modulename: Tkinter, funcname: _register
Tkinter.py(1148):         f = CallWrapper(func, subst, self).__call__
 --- modulename: Tkinter, funcname: __init__
Tkinter.py(1462):         self.func = func
Tkinter.py(1463):         self.subst = subst
Tkinter.py(1464):         self.widget = widget
Tkinter.py(1149):         name = repr(id(f))
Tkinter.py(1150):         try:
Tkinter.py(1151):             func = func.im_func
Tkinter.py(1152):         except AttributeError:
Tkinter.py(1153):             pass
Tkinter.py(1154):         try:
Tkinter.py(1155):             name = name + func.__name__
Tkinter.py(1158):         self.tk.createcommand(name, f)
Tkinter.py(1159):         if needcleanup:
Tkinter.py(1160):             if self._tclCommands is None:
Tkinter.py(1162):             self._tclCommands.append(name)
Tkinter.py(1163):         return name
Tkinter.py(987):             cmd = ('%sif {"[%s %s]" == "break"} break\n'
Tkinter.py(989):                    (add and '+' or '',
Tkinter.py(990):                 funcid, self._subst_format_str))
Tkinter.py(991):             self.tk.call(what + (sequence, cmd))
Tkinter.py(992):             return funcid
graphicsUtils.py(89):     _clear_keys()
 --- modulename: graphicsUtils, funcname: _clear_keys
graphicsUtils.py(280):     _keysdown = {}
graphicsUtils.py(281):     _keyswaiting = {}
graphicsUtils.py(282):     _got_release = None
graphicsDisplay.py(177):     self.infoPane = InfoPane(layout, self.gridSize)
 --- modulename: graphicsDisplay, funcname: __init__
graphicsDisplay.py(78):     self.gridSize = gridSize
graphicsDisplay.py(79):     self.width = (layout.width) * gridSize
graphicsDisplay.py(80):     self.base = (layout.height + 1) * gridSize
graphicsDisplay.py(81):     self.height = INFO_PANE_HEIGHT
graphicsDisplay.py(82):     self.fontSize = 24
graphicsDisplay.py(83):     self.textColor = PACMAN_COLOR
graphicsDisplay.py(84):     self.drawPane()
 --- modulename: graphicsDisplay, funcname: drawPane
graphicsDisplay.py(100):     self.scoreText = text( self.toScreen(0, 0  ), self.textColor, "SCORE:    0", "Times", self.fontSize, "bold")
 --- modulename: graphicsDisplay, funcname: toScreen
graphicsDisplay.py(90):     if y == None:
graphicsDisplay.py(93):       x = pos
graphicsDisplay.py(95):     x = self.gridSize + x # Margin
graphicsDisplay.py(96):     y = self.base + y
graphicsDisplay.py(97):     return x,y
 --- modulename: graphicsUtils, funcname: text
graphicsUtils.py(219):     x, y = pos
graphicsUtils.py(220):     font = (font, str(size), style)
graphicsUtils.py(221):     return _canvas.create_text(x, y, fill=color, text=contents, font=font, anchor=anchor)
 --- modulename: Tkinter, funcname: create_text
Tkinter.py(2275):         return self._create('text', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1113):                     nv = []
Tkinter.py(1114):                     for item in v:
Tkinter.py(1115):                         if not isinstance(item, (basestring, int)):
Tkinter.py(1117):                         elif isinstance(item, int):
Tkinter.py(1121):                             nv.append(_stringify(item))
 --- modulename: Tkinter, funcname: _stringify
Tkinter.py(71):     if isinstance(value, (list, tuple)):
Tkinter.py(79):         if isinstance(value, basestring):
Tkinter.py(80):             value = unicode(value)
Tkinter.py(83):         if not value:
Tkinter.py(85):         elif _magic_re.search(value):
Tkinter.py(89):         elif value[0] == '"' or _space_re.search(value):
Tkinter.py(91):     return value
Tkinter.py(1114):                     for item in v:
Tkinter.py(1115):                         if not isinstance(item, (basestring, int)):
Tkinter.py(1117):                         elif isinstance(item, int):
Tkinter.py(1121):                             nv.append(_stringify(item))
 --- modulename: Tkinter, funcname: _stringify
Tkinter.py(71):     if isinstance(value, (list, tuple)):
Tkinter.py(79):         if isinstance(value, basestring):
Tkinter.py(80):             value = unicode(value)
Tkinter.py(83):         if not value:
Tkinter.py(85):         elif _magic_re.search(value):
Tkinter.py(89):         elif value[0] == '"' or _space_re.search(value):
Tkinter.py(91):     return value
Tkinter.py(1114):                     for item in v:
Tkinter.py(1115):                         if not isinstance(item, (basestring, int)):
Tkinter.py(1117):                         elif isinstance(item, int):
Tkinter.py(1121):                             nv.append(_stringify(item))
 --- modulename: Tkinter, funcname: _stringify
Tkinter.py(71):     if isinstance(value, (list, tuple)):
Tkinter.py(79):         if isinstance(value, basestring):
Tkinter.py(80):             value = unicode(value)
Tkinter.py(83):         if not value:
Tkinter.py(85):         elif _magic_re.search(value):
Tkinter.py(89):         elif value[0] == '"' or _space_re.search(value):
Tkinter.py(91):     return value
Tkinter.py(1114):                     for item in v:
Tkinter.py(1123):                         v = ' '.join(nv)
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(178):     self.currentState = layout
graphicsDisplay.py(164):     self.distributionImages = None  # Initialized lazily
graphicsDisplay.py(165):     self.drawStaticObjects(state)
 --- modulename: graphicsDisplay, funcname: drawStaticObjects
graphicsDisplay.py(196):     layout = self.layout
graphicsDisplay.py(197):     self.drawWalls(layout.walls)
 --- modulename: graphicsDisplay, funcname: drawWalls
graphicsDisplay.py(423):     wallColor = WALL_COLOR
graphicsDisplay.py(424):     for xNum, x in enumerate(wallMatrix):
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(425):       if self.capture and (xNum * 2) < wallMatrix.width: wallColor = TEAM_COLORS[0]
graphicsDisplay.py(426):       if self.capture and (xNum * 2) >= wallMatrix.width: wallColor = TEAM_COLORS[1]
graphicsDisplay.py(428):       for yNum, cell in enumerate(x):
graphicsDisplay.py(429):         if cell: # There's a wall here
graphicsDisplay.py(430):           pos = (xNum, yNum)
graphicsDisplay.py(431):           screen = self.to_screen(pos)
 --- modulename: graphicsDisplay, funcname: to_screen
graphicsDisplay.py(408):     ( x, y ) = point
graphicsDisplay.py(410):     x = (x + 1)*self.gridSize
graphicsDisplay.py(411):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(412):     return ( x, y )
graphicsDisplay.py(432):           screen2 = self.to_screen2(pos)
 --- modulename: graphicsDisplay, funcname: to_screen2
graphicsDisplay.py(416):     ( x, y ) = point
graphicsDisplay.py(418):     x = (x + 1)*self.gridSize
graphicsDisplay.py(419):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(420):     return ( x, y )
graphicsDisplay.py(435):           wIsWall = self.isWall(xNum-1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(510):       return False
graphicsDisplay.py(436):           eIsWall = self.isWall(xNum+1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(437):           nIsWall = self.isWall(xNum, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(438):           sIsWall = self.isWall(xNum, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(510):       return False
graphicsDisplay.py(439):           nwIsWall = self.isWall(xNum-1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(510):       return False
graphicsDisplay.py(440):           swIsWall = self.isWall(xNum-1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(510):       return False
graphicsDisplay.py(441):           neIsWall = self.isWall(xNum+1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(442):           seIsWall = self.isWall(xNum+1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(510):       return False
graphicsDisplay.py(445):           if (not nIsWall) and (not eIsWall):
graphicsDisplay.py(448):           if (nIsWall) and (not eIsWall):
graphicsDisplay.py(451):           if (not nIsWall) and (eIsWall):
graphicsDisplay.py(454):           if (nIsWall) and (eIsWall) and (not neIsWall):
graphicsDisplay.py(456):             circle(add(screen2, (self.gridSize*2*WALL_RADIUS, self.gridSize*(-2)*WALL_RADIUS)), WALL_RADIUS * self.gridSize-1, wallColor, wallColor, (180,271), 'arc')
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: circle
graphicsUtils.py(176):     x, y = pos
graphicsUtils.py(177):     x0, x1 = x - r - 1, x + r
graphicsUtils.py(178):     y0, y1 = y - r - 1, y + r
graphicsUtils.py(179):     if endpoints == None:
graphicsUtils.py(182):       e = list(endpoints)
graphicsUtils.py(183):     while e[0] > e[1]: e[1] = e[1] + 360
graphicsUtils.py(185):     return _canvas.create_arc(x0, y0, x1, y1, outline=outlineColor, fill=fillColor,
graphicsUtils.py(186):                               extent=e[1] - e[0], start=e[0], style=style, width=width)
 --- modulename: Tkinter, funcname: create_arc
Tkinter.py(2254):         return self._create('arc', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(457):             line(add(screen, (self.gridSize*2*WALL_RADIUS-1, self.gridSize*(-1)*WALL_RADIUS)), add(screen, (self.gridSize*0.5+1, self.gridSize*(-1)*WALL_RADIUS)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(458):             line(add(screen, (self.gridSize*WALL_RADIUS, self.gridSize*(-2)*WALL_RADIUS+1)), add(screen, (self.gridSize*WALL_RADIUS, self.gridSize*(-0.5))), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(461):           if (not nIsWall) and (not wIsWall):
graphicsDisplay.py(464):           if (nIsWall) and (not wIsWall):
graphicsDisplay.py(466):             line(add(screen, (self.gridSize*(-1)*WALL_RADIUS, 0)), add(screen, (self.gridSize*(-1)*WALL_RADIUS, self.gridSize*(-0.5)-1)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(467):           if (not nIsWall) and (wIsWall):
graphicsDisplay.py(470):           if (nIsWall) and (wIsWall) and (not nwIsWall):
graphicsDisplay.py(477):           if (not sIsWall) and (not eIsWall):
graphicsDisplay.py(480):           if (sIsWall) and (not eIsWall):
graphicsDisplay.py(483):           if (not sIsWall) and (eIsWall):
graphicsDisplay.py(485):             line(add(screen, (0, self.gridSize*(1)*WALL_RADIUS)), add(screen, (self.gridSize*0.5+1, self.gridSize*(1)*WALL_RADIUS)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(486):           if (sIsWall) and (eIsWall) and (not seIsWall):
graphicsDisplay.py(493):           if (not sIsWall) and (not wIsWall):
graphicsDisplay.py(495):             circle(screen2, WALL_RADIUS * self.gridSize, wallColor, wallColor, (180,271), 'arc')
 --- modulename: graphicsUtils, funcname: circle
graphicsUtils.py(176):     x, y = pos
graphicsUtils.py(177):     x0, x1 = x - r - 1, x + r
graphicsUtils.py(178):     y0, y1 = y - r - 1, y + r
graphicsUtils.py(179):     if endpoints == None:
graphicsUtils.py(182):       e = list(endpoints)
graphicsUtils.py(183):     while e[0] > e[1]: e[1] = e[1] + 360
graphicsUtils.py(185):     return _canvas.create_arc(x0, y0, x1, y1, outline=outlineColor, fill=fillColor,
graphicsUtils.py(186):                               extent=e[1] - e[0], start=e[0], style=style, width=width)
 --- modulename: Tkinter, funcname: create_arc
Tkinter.py(2254):         return self._create('arc', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(496):           if (sIsWall) and (not wIsWall):
graphicsDisplay.py(499):           if (not sIsWall) and (wIsWall):
graphicsDisplay.py(502):           if (sIsWall) and (wIsWall) and (not swIsWall):
graphicsDisplay.py(428):       for yNum, cell in enumerate(x):
graphicsDisplay.py(429):         if cell: # There's a wall here
graphicsDisplay.py(430):           pos = (xNum, yNum)
graphicsDisplay.py(431):           screen = self.to_screen(pos)
 --- modulename: graphicsDisplay, funcname: to_screen
graphicsDisplay.py(408):     ( x, y ) = point
graphicsDisplay.py(410):     x = (x + 1)*self.gridSize
graphicsDisplay.py(411):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(412):     return ( x, y )
graphicsDisplay.py(432):           screen2 = self.to_screen2(pos)
 --- modulename: graphicsDisplay, funcname: to_screen2
graphicsDisplay.py(416):     ( x, y ) = point
graphicsDisplay.py(418):     x = (x + 1)*self.gridSize
graphicsDisplay.py(419):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(420):     return ( x, y )
graphicsDisplay.py(435):           wIsWall = self.isWall(xNum-1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(510):       return False
graphicsDisplay.py(436):           eIsWall = self.isWall(xNum+1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(437):           nIsWall = self.isWall(xNum, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(438):           sIsWall = self.isWall(xNum, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(439):           nwIsWall = self.isWall(xNum-1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(510):       return False
graphicsDisplay.py(440):           swIsWall = self.isWall(xNum-1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(510):       return False
graphicsDisplay.py(441):           neIsWall = self.isWall(xNum+1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(442):           seIsWall = self.isWall(xNum+1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(445):           if (not nIsWall) and (not eIsWall):
graphicsDisplay.py(448):           if (nIsWall) and (not eIsWall):
graphicsDisplay.py(450):             line(add(screen, (self.gridSize*WALL_RADIUS, 0)), add(screen, (self.gridSize*WALL_RADIUS, self.gridSize*(-0.5)-1)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(451):           if (not nIsWall) and (eIsWall):
graphicsDisplay.py(454):           if (nIsWall) and (eIsWall) and (not neIsWall):
graphicsDisplay.py(461):           if (not nIsWall) and (not wIsWall):
graphicsDisplay.py(464):           if (nIsWall) and (not wIsWall):
graphicsDisplay.py(466):             line(add(screen, (self.gridSize*(-1)*WALL_RADIUS, 0)), add(screen, (self.gridSize*(-1)*WALL_RADIUS, self.gridSize*(-0.5)-1)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(467):           if (not nIsWall) and (wIsWall):
graphicsDisplay.py(470):           if (nIsWall) and (wIsWall) and (not nwIsWall):
graphicsDisplay.py(477):           if (not sIsWall) and (not eIsWall):
graphicsDisplay.py(480):           if (sIsWall) and (not eIsWall):
graphicsDisplay.py(482):             line(add(screen, (self.gridSize*WALL_RADIUS, 0)), add(screen, (self.gridSize*WALL_RADIUS, self.gridSize*(0.5)+1)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(483):           if (not sIsWall) and (eIsWall):
graphicsDisplay.py(486):           if (sIsWall) and (eIsWall) and (not seIsWall):
graphicsDisplay.py(493):           if (not sIsWall) and (not wIsWall):
graphicsDisplay.py(496):           if (sIsWall) and (not wIsWall):
graphicsDisplay.py(498):             line(add(screen, (self.gridSize*(-1)*WALL_RADIUS, 0)), add(screen, (self.gridSize*(-1)*WALL_RADIUS, self.gridSize*(0.5)+1)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(499):           if (not sIsWall) and (wIsWall):
graphicsDisplay.py(502):           if (sIsWall) and (wIsWall) and (not swIsWall):
graphicsDisplay.py(428):       for yNum, cell in enumerate(x):
graphicsDisplay.py(429):         if cell: # There's a wall here
graphicsDisplay.py(430):           pos = (xNum, yNum)
graphicsDisplay.py(431):           screen = self.to_screen(pos)
 --- modulename: graphicsDisplay, funcname: to_screen
graphicsDisplay.py(408):     ( x, y ) = point
graphicsDisplay.py(410):     x = (x + 1)*self.gridSize
graphicsDisplay.py(411):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(412):     return ( x, y )
graphicsDisplay.py(432):           screen2 = self.to_screen2(pos)
 --- modulename: graphicsDisplay, funcname: to_screen2
graphicsDisplay.py(416):     ( x, y ) = point
graphicsDisplay.py(418):     x = (x + 1)*self.gridSize
graphicsDisplay.py(419):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(420):     return ( x, y )
graphicsDisplay.py(435):           wIsWall = self.isWall(xNum-1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(510):       return False
graphicsDisplay.py(436):           eIsWall = self.isWall(xNum+1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(437):           nIsWall = self.isWall(xNum, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(438):           sIsWall = self.isWall(xNum, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(439):           nwIsWall = self.isWall(xNum-1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(510):       return False
graphicsDisplay.py(440):           swIsWall = self.isWall(xNum-1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(510):       return False
graphicsDisplay.py(441):           neIsWall = self.isWall(xNum+1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(442):           seIsWall = self.isWall(xNum+1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(445):           if (not nIsWall) and (not eIsWall):
graphicsDisplay.py(448):           if (nIsWall) and (not eIsWall):
graphicsDisplay.py(451):           if (not nIsWall) and (eIsWall):
graphicsDisplay.py(454):           if (nIsWall) and (eIsWall) and (not neIsWall):
graphicsDisplay.py(456):             circle(add(screen2, (self.gridSize*2*WALL_RADIUS, self.gridSize*(-2)*WALL_RADIUS)), WALL_RADIUS * self.gridSize-1, wallColor, wallColor, (180,271), 'arc')
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: circle
graphicsUtils.py(176):     x, y = pos
graphicsUtils.py(177):     x0, x1 = x - r - 1, x + r
graphicsUtils.py(178):     y0, y1 = y - r - 1, y + r
graphicsUtils.py(179):     if endpoints == None:
graphicsUtils.py(182):       e = list(endpoints)
graphicsUtils.py(183):     while e[0] > e[1]: e[1] = e[1] + 360
graphicsUtils.py(185):     return _canvas.create_arc(x0, y0, x1, y1, outline=outlineColor, fill=fillColor,
graphicsUtils.py(186):                               extent=e[1] - e[0], start=e[0], style=style, width=width)
 --- modulename: Tkinter, funcname: create_arc
Tkinter.py(2254):         return self._create('arc', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(457):             line(add(screen, (self.gridSize*2*WALL_RADIUS-1, self.gridSize*(-1)*WALL_RADIUS)), add(screen, (self.gridSize*0.5+1, self.gridSize*(-1)*WALL_RADIUS)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(458):             line(add(screen, (self.gridSize*WALL_RADIUS, self.gridSize*(-2)*WALL_RADIUS+1)), add(screen, (self.gridSize*WALL_RADIUS, self.gridSize*(-0.5))), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(461):           if (not nIsWall) and (not wIsWall):
graphicsDisplay.py(464):           if (nIsWall) and (not wIsWall):
graphicsDisplay.py(466):             line(add(screen, (self.gridSize*(-1)*WALL_RADIUS, 0)), add(screen, (self.gridSize*(-1)*WALL_RADIUS, self.gridSize*(-0.5)-1)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(467):           if (not nIsWall) and (wIsWall):
graphicsDisplay.py(470):           if (nIsWall) and (wIsWall) and (not nwIsWall):
graphicsDisplay.py(477):           if (not sIsWall) and (not eIsWall):
graphicsDisplay.py(480):           if (sIsWall) and (not eIsWall):
graphicsDisplay.py(483):           if (not sIsWall) and (eIsWall):
graphicsDisplay.py(486):           if (sIsWall) and (eIsWall) and (not seIsWall):
graphicsDisplay.py(488):             circle(add(screen2, (self.gridSize*2*WALL_RADIUS, self.gridSize*(2)*WALL_RADIUS)), WALL_RADIUS * self.gridSize-1, wallColor, wallColor, (90,181), 'arc')
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: circle
graphicsUtils.py(176):     x, y = pos
graphicsUtils.py(177):     x0, x1 = x - r - 1, x + r
graphicsUtils.py(178):     y0, y1 = y - r - 1, y + r
graphicsUtils.py(179):     if endpoints == None:
graphicsUtils.py(182):       e = list(endpoints)
graphicsUtils.py(183):     while e[0] > e[1]: e[1] = e[1] + 360
graphicsUtils.py(185):     return _canvas.create_arc(x0, y0, x1, y1, outline=outlineColor, fill=fillColor,
graphicsUtils.py(186):                               extent=e[1] - e[0], start=e[0], style=style, width=width)
 --- modulename: Tkinter, funcname: create_arc
Tkinter.py(2254):         return self._create('arc', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(489):             line(add(screen, (self.gridSize*2*WALL_RADIUS-1, self.gridSize*(1)*WALL_RADIUS)), add(screen, (self.gridSize*0.5, self.gridSize*(1)*WALL_RADIUS)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(490):             line(add(screen, (self.gridSize*WALL_RADIUS, self.gridSize*(2)*WALL_RADIUS-1)), add(screen, (self.gridSize*WALL_RADIUS, self.gridSize*(0.5))), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(493):           if (not sIsWall) and (not wIsWall):
graphicsDisplay.py(496):           if (sIsWall) and (not wIsWall):
graphicsDisplay.py(498):             line(add(screen, (self.gridSize*(-1)*WALL_RADIUS, 0)), add(screen, (self.gridSize*(-1)*WALL_RADIUS, self.gridSize*(0.5)+1)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(499):           if (not sIsWall) and (wIsWall):
graphicsDisplay.py(502):           if (sIsWall) and (wIsWall) and (not swIsWall):
graphicsDisplay.py(428):       for yNum, cell in enumerate(x):
graphicsDisplay.py(429):         if cell: # There's a wall here
graphicsDisplay.py(430):           pos = (xNum, yNum)
graphicsDisplay.py(431):           screen = self.to_screen(pos)
 --- modulename: graphicsDisplay, funcname: to_screen
graphicsDisplay.py(408):     ( x, y ) = point
graphicsDisplay.py(410):     x = (x + 1)*self.gridSize
graphicsDisplay.py(411):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(412):     return ( x, y )
graphicsDisplay.py(432):           screen2 = self.to_screen2(pos)
 --- modulename: graphicsDisplay, funcname: to_screen2
graphicsDisplay.py(416):     ( x, y ) = point
graphicsDisplay.py(418):     x = (x + 1)*self.gridSize
graphicsDisplay.py(419):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(420):     return ( x, y )
graphicsDisplay.py(435):           wIsWall = self.isWall(xNum-1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(510):       return False
graphicsDisplay.py(436):           eIsWall = self.isWall(xNum+1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(437):           nIsWall = self.isWall(xNum, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(438):           sIsWall = self.isWall(xNum, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(439):           nwIsWall = self.isWall(xNum-1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(510):       return False
graphicsDisplay.py(440):           swIsWall = self.isWall(xNum-1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(510):       return False
graphicsDisplay.py(441):           neIsWall = self.isWall(xNum+1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(442):           seIsWall = self.isWall(xNum+1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(445):           if (not nIsWall) and (not eIsWall):
graphicsDisplay.py(448):           if (nIsWall) and (not eIsWall):
graphicsDisplay.py(450):             line(add(screen, (self.gridSize*WALL_RADIUS, 0)), add(screen, (self.gridSize*WALL_RADIUS, self.gridSize*(-0.5)-1)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(451):           if (not nIsWall) and (eIsWall):
graphicsDisplay.py(454):           if (nIsWall) and (eIsWall) and (not neIsWall):
graphicsDisplay.py(461):           if (not nIsWall) and (not wIsWall):
graphicsDisplay.py(464):           if (nIsWall) and (not wIsWall):
graphicsDisplay.py(466):             line(add(screen, (self.gridSize*(-1)*WALL_RADIUS, 0)), add(screen, (self.gridSize*(-1)*WALL_RADIUS, self.gridSize*(-0.5)-1)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(467):           if (not nIsWall) and (wIsWall):
graphicsDisplay.py(470):           if (nIsWall) and (wIsWall) and (not nwIsWall):
graphicsDisplay.py(477):           if (not sIsWall) and (not eIsWall):
graphicsDisplay.py(480):           if (sIsWall) and (not eIsWall):
graphicsDisplay.py(482):             line(add(screen, (self.gridSize*WALL_RADIUS, 0)), add(screen, (self.gridSize*WALL_RADIUS, self.gridSize*(0.5)+1)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(483):           if (not sIsWall) and (eIsWall):
graphicsDisplay.py(486):           if (sIsWall) and (eIsWall) and (not seIsWall):
graphicsDisplay.py(493):           if (not sIsWall) and (not wIsWall):
graphicsDisplay.py(496):           if (sIsWall) and (not wIsWall):
graphicsDisplay.py(498):             line(add(screen, (self.gridSize*(-1)*WALL_RADIUS, 0)), add(screen, (self.gridSize*(-1)*WALL_RADIUS, self.gridSize*(0.5)+1)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(499):           if (not sIsWall) and (wIsWall):
graphicsDisplay.py(502):           if (sIsWall) and (wIsWall) and (not swIsWall):
graphicsDisplay.py(428):       for yNum, cell in enumerate(x):
graphicsDisplay.py(429):         if cell: # There's a wall here
graphicsDisplay.py(430):           pos = (xNum, yNum)
graphicsDisplay.py(431):           screen = self.to_screen(pos)
 --- modulename: graphicsDisplay, funcname: to_screen
graphicsDisplay.py(408):     ( x, y ) = point
graphicsDisplay.py(410):     x = (x + 1)*self.gridSize
graphicsDisplay.py(411):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(412):     return ( x, y )
graphicsDisplay.py(432):           screen2 = self.to_screen2(pos)
 --- modulename: graphicsDisplay, funcname: to_screen2
graphicsDisplay.py(416):     ( x, y ) = point
graphicsDisplay.py(418):     x = (x + 1)*self.gridSize
graphicsDisplay.py(419):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(420):     return ( x, y )
graphicsDisplay.py(435):           wIsWall = self.isWall(xNum-1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(510):       return False
graphicsDisplay.py(436):           eIsWall = self.isWall(xNum+1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(437):           nIsWall = self.isWall(xNum, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(438):           sIsWall = self.isWall(xNum, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(439):           nwIsWall = self.isWall(xNum-1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(510):       return False
graphicsDisplay.py(440):           swIsWall = self.isWall(xNum-1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(510):       return False
graphicsDisplay.py(441):           neIsWall = self.isWall(xNum+1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(442):           seIsWall = self.isWall(xNum+1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(445):           if (not nIsWall) and (not eIsWall):
graphicsDisplay.py(448):           if (nIsWall) and (not eIsWall):
graphicsDisplay.py(450):             line(add(screen, (self.gridSize*WALL_RADIUS, 0)), add(screen, (self.gridSize*WALL_RADIUS, self.gridSize*(-0.5)-1)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(451):           if (not nIsWall) and (eIsWall):
graphicsDisplay.py(454):           if (nIsWall) and (eIsWall) and (not neIsWall):
graphicsDisplay.py(461):           if (not nIsWall) and (not wIsWall):
graphicsDisplay.py(464):           if (nIsWall) and (not wIsWall):
graphicsDisplay.py(466):             line(add(screen, (self.gridSize*(-1)*WALL_RADIUS, 0)), add(screen, (self.gridSize*(-1)*WALL_RADIUS, self.gridSize*(-0.5)-1)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(467):           if (not nIsWall) and (wIsWall):
graphicsDisplay.py(470):           if (nIsWall) and (wIsWall) and (not nwIsWall):
graphicsDisplay.py(477):           if (not sIsWall) and (not eIsWall):
graphicsDisplay.py(480):           if (sIsWall) and (not eIsWall):
graphicsDisplay.py(482):             line(add(screen, (self.gridSize*WALL_RADIUS, 0)), add(screen, (self.gridSize*WALL_RADIUS, self.gridSize*(0.5)+1)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(483):           if (not sIsWall) and (eIsWall):
graphicsDisplay.py(486):           if (sIsWall) and (eIsWall) and (not seIsWall):
graphicsDisplay.py(493):           if (not sIsWall) and (not wIsWall):
graphicsDisplay.py(496):           if (sIsWall) and (not wIsWall):
graphicsDisplay.py(498):             line(add(screen, (self.gridSize*(-1)*WALL_RADIUS, 0)), add(screen, (self.gridSize*(-1)*WALL_RADIUS, self.gridSize*(0.5)+1)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(499):           if (not sIsWall) and (wIsWall):
graphicsDisplay.py(502):           if (sIsWall) and (wIsWall) and (not swIsWall):
graphicsDisplay.py(428):       for yNum, cell in enumerate(x):
graphicsDisplay.py(429):         if cell: # There's a wall here
graphicsDisplay.py(430):           pos = (xNum, yNum)
graphicsDisplay.py(431):           screen = self.to_screen(pos)
 --- modulename: graphicsDisplay, funcname: to_screen
graphicsDisplay.py(408):     ( x, y ) = point
graphicsDisplay.py(410):     x = (x + 1)*self.gridSize
graphicsDisplay.py(411):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(412):     return ( x, y )
graphicsDisplay.py(432):           screen2 = self.to_screen2(pos)
 --- modulename: graphicsDisplay, funcname: to_screen2
graphicsDisplay.py(416):     ( x, y ) = point
graphicsDisplay.py(418):     x = (x + 1)*self.gridSize
graphicsDisplay.py(419):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(420):     return ( x, y )
graphicsDisplay.py(435):           wIsWall = self.isWall(xNum-1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(510):       return False
graphicsDisplay.py(436):           eIsWall = self.isWall(xNum+1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(437):           nIsWall = self.isWall(xNum, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(438):           sIsWall = self.isWall(xNum, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(439):           nwIsWall = self.isWall(xNum-1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(510):       return False
graphicsDisplay.py(440):           swIsWall = self.isWall(xNum-1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(510):       return False
graphicsDisplay.py(441):           neIsWall = self.isWall(xNum+1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(442):           seIsWall = self.isWall(xNum+1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(445):           if (not nIsWall) and (not eIsWall):
graphicsDisplay.py(448):           if (nIsWall) and (not eIsWall):
graphicsDisplay.py(450):             line(add(screen, (self.gridSize*WALL_RADIUS, 0)), add(screen, (self.gridSize*WALL_RADIUS, self.gridSize*(-0.5)-1)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(451):           if (not nIsWall) and (eIsWall):
graphicsDisplay.py(454):           if (nIsWall) and (eIsWall) and (not neIsWall):
graphicsDisplay.py(461):           if (not nIsWall) and (not wIsWall):
graphicsDisplay.py(464):           if (nIsWall) and (not wIsWall):
graphicsDisplay.py(466):             line(add(screen, (self.gridSize*(-1)*WALL_RADIUS, 0)), add(screen, (self.gridSize*(-1)*WALL_RADIUS, self.gridSize*(-0.5)-1)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(467):           if (not nIsWall) and (wIsWall):
graphicsDisplay.py(470):           if (nIsWall) and (wIsWall) and (not nwIsWall):
graphicsDisplay.py(477):           if (not sIsWall) and (not eIsWall):
graphicsDisplay.py(480):           if (sIsWall) and (not eIsWall):
graphicsDisplay.py(482):             line(add(screen, (self.gridSize*WALL_RADIUS, 0)), add(screen, (self.gridSize*WALL_RADIUS, self.gridSize*(0.5)+1)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(483):           if (not sIsWall) and (eIsWall):
graphicsDisplay.py(486):           if (sIsWall) and (eIsWall) and (not seIsWall):
graphicsDisplay.py(493):           if (not sIsWall) and (not wIsWall):
graphicsDisplay.py(496):           if (sIsWall) and (not wIsWall):
graphicsDisplay.py(498):             line(add(screen, (self.gridSize*(-1)*WALL_RADIUS, 0)), add(screen, (self.gridSize*(-1)*WALL_RADIUS, self.gridSize*(0.5)+1)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(499):           if (not sIsWall) and (wIsWall):
graphicsDisplay.py(502):           if (sIsWall) and (wIsWall) and (not swIsWall):
graphicsDisplay.py(428):       for yNum, cell in enumerate(x):
graphicsDisplay.py(429):         if cell: # There's a wall here
graphicsDisplay.py(430):           pos = (xNum, yNum)
graphicsDisplay.py(431):           screen = self.to_screen(pos)
 --- modulename: graphicsDisplay, funcname: to_screen
graphicsDisplay.py(408):     ( x, y ) = point
graphicsDisplay.py(410):     x = (x + 1)*self.gridSize
graphicsDisplay.py(411):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(412):     return ( x, y )
graphicsDisplay.py(432):           screen2 = self.to_screen2(pos)
 --- modulename: graphicsDisplay, funcname: to_screen2
graphicsDisplay.py(416):     ( x, y ) = point
graphicsDisplay.py(418):     x = (x + 1)*self.gridSize
graphicsDisplay.py(419):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(420):     return ( x, y )
graphicsDisplay.py(435):           wIsWall = self.isWall(xNum-1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(510):       return False
graphicsDisplay.py(436):           eIsWall = self.isWall(xNum+1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(437):           nIsWall = self.isWall(xNum, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(512):       return False
graphicsDisplay.py(438):           sIsWall = self.isWall(xNum, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(439):           nwIsWall = self.isWall(xNum-1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(510):       return False
graphicsDisplay.py(440):           swIsWall = self.isWall(xNum-1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(510):       return False
graphicsDisplay.py(441):           neIsWall = self.isWall(xNum+1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(512):       return False
graphicsDisplay.py(442):           seIsWall = self.isWall(xNum+1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(445):           if (not nIsWall) and (not eIsWall):
graphicsDisplay.py(448):           if (nIsWall) and (not eIsWall):
graphicsDisplay.py(451):           if (not nIsWall) and (eIsWall):
graphicsDisplay.py(453):             line(add(screen, (0, self.gridSize*(-1)*WALL_RADIUS)), add(screen, (self.gridSize*0.5+1, self.gridSize*(-1)*WALL_RADIUS)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(454):           if (nIsWall) and (eIsWall) and (not neIsWall):
graphicsDisplay.py(461):           if (not nIsWall) and (not wIsWall):
graphicsDisplay.py(463):             circle(screen2, WALL_RADIUS * self.gridSize, wallColor, wallColor, (90,181), 'arc')
 --- modulename: graphicsUtils, funcname: circle
graphicsUtils.py(176):     x, y = pos
graphicsUtils.py(177):     x0, x1 = x - r - 1, x + r
graphicsUtils.py(178):     y0, y1 = y - r - 1, y + r
graphicsUtils.py(179):     if endpoints == None:
graphicsUtils.py(182):       e = list(endpoints)
graphicsUtils.py(183):     while e[0] > e[1]: e[1] = e[1] + 360
graphicsUtils.py(185):     return _canvas.create_arc(x0, y0, x1, y1, outline=outlineColor, fill=fillColor,
graphicsUtils.py(186):                               extent=e[1] - e[0], start=e[0], style=style, width=width)
 --- modulename: Tkinter, funcname: create_arc
Tkinter.py(2254):         return self._create('arc', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(464):           if (nIsWall) and (not wIsWall):
graphicsDisplay.py(467):           if (not nIsWall) and (wIsWall):
graphicsDisplay.py(470):           if (nIsWall) and (wIsWall) and (not nwIsWall):
graphicsDisplay.py(477):           if (not sIsWall) and (not eIsWall):
graphicsDisplay.py(480):           if (sIsWall) and (not eIsWall):
graphicsDisplay.py(483):           if (not sIsWall) and (eIsWall):
graphicsDisplay.py(486):           if (sIsWall) and (eIsWall) and (not seIsWall):
graphicsDisplay.py(488):             circle(add(screen2, (self.gridSize*2*WALL_RADIUS, self.gridSize*(2)*WALL_RADIUS)), WALL_RADIUS * self.gridSize-1, wallColor, wallColor, (90,181), 'arc')
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: circle
graphicsUtils.py(176):     x, y = pos
graphicsUtils.py(177):     x0, x1 = x - r - 1, x + r
graphicsUtils.py(178):     y0, y1 = y - r - 1, y + r
graphicsUtils.py(179):     if endpoints == None:
graphicsUtils.py(182):       e = list(endpoints)
graphicsUtils.py(183):     while e[0] > e[1]: e[1] = e[1] + 360
graphicsUtils.py(185):     return _canvas.create_arc(x0, y0, x1, y1, outline=outlineColor, fill=fillColor,
graphicsUtils.py(186):                               extent=e[1] - e[0], start=e[0], style=style, width=width)
 --- modulename: Tkinter, funcname: create_arc
Tkinter.py(2254):         return self._create('arc', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(489):             line(add(screen, (self.gridSize*2*WALL_RADIUS-1, self.gridSize*(1)*WALL_RADIUS)), add(screen, (self.gridSize*0.5, self.gridSize*(1)*WALL_RADIUS)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(490):             line(add(screen, (self.gridSize*WALL_RADIUS, self.gridSize*(2)*WALL_RADIUS-1)), add(screen, (self.gridSize*WALL_RADIUS, self.gridSize*(0.5))), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(493):           if (not sIsWall) and (not wIsWall):
graphicsDisplay.py(496):           if (sIsWall) and (not wIsWall):
graphicsDisplay.py(498):             line(add(screen, (self.gridSize*(-1)*WALL_RADIUS, 0)), add(screen, (self.gridSize*(-1)*WALL_RADIUS, self.gridSize*(0.5)+1)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(499):           if (not sIsWall) and (wIsWall):
graphicsDisplay.py(502):           if (sIsWall) and (wIsWall) and (not swIsWall):
graphicsDisplay.py(428):       for yNum, cell in enumerate(x):
graphicsDisplay.py(424):     for xNum, x in enumerate(wallMatrix):
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(425):       if self.capture and (xNum * 2) < wallMatrix.width: wallColor = TEAM_COLORS[0]
graphicsDisplay.py(426):       if self.capture and (xNum * 2) >= wallMatrix.width: wallColor = TEAM_COLORS[1]
graphicsDisplay.py(428):       for yNum, cell in enumerate(x):
graphicsDisplay.py(429):         if cell: # There's a wall here
graphicsDisplay.py(430):           pos = (xNum, yNum)
graphicsDisplay.py(431):           screen = self.to_screen(pos)
 --- modulename: graphicsDisplay, funcname: to_screen
graphicsDisplay.py(408):     ( x, y ) = point
graphicsDisplay.py(410):     x = (x + 1)*self.gridSize
graphicsDisplay.py(411):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(412):     return ( x, y )
graphicsDisplay.py(432):           screen2 = self.to_screen2(pos)
 --- modulename: graphicsDisplay, funcname: to_screen2
graphicsDisplay.py(416):     ( x, y ) = point
graphicsDisplay.py(418):     x = (x + 1)*self.gridSize
graphicsDisplay.py(419):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(420):     return ( x, y )
graphicsDisplay.py(435):           wIsWall = self.isWall(xNum-1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(436):           eIsWall = self.isWall(xNum+1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(437):           nIsWall = self.isWall(xNum, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(438):           sIsWall = self.isWall(xNum, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(510):       return False
graphicsDisplay.py(439):           nwIsWall = self.isWall(xNum-1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(440):           swIsWall = self.isWall(xNum-1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(510):       return False
graphicsDisplay.py(441):           neIsWall = self.isWall(xNum+1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(442):           seIsWall = self.isWall(xNum+1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(510):       return False
graphicsDisplay.py(445):           if (not nIsWall) and (not eIsWall):
graphicsDisplay.py(448):           if (nIsWall) and (not eIsWall):
graphicsDisplay.py(451):           if (not nIsWall) and (eIsWall):
graphicsDisplay.py(453):             line(add(screen, (0, self.gridSize*(-1)*WALL_RADIUS)), add(screen, (self.gridSize*0.5+1, self.gridSize*(-1)*WALL_RADIUS)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(454):           if (nIsWall) and (eIsWall) and (not neIsWall):
graphicsDisplay.py(461):           if (not nIsWall) and (not wIsWall):
graphicsDisplay.py(464):           if (nIsWall) and (not wIsWall):
graphicsDisplay.py(467):           if (not nIsWall) and (wIsWall):
graphicsDisplay.py(469):             line(add(screen, (0, self.gridSize*(-1)*WALL_RADIUS)), add(screen, (self.gridSize*(-0.5)-1, self.gridSize*(-1)*WALL_RADIUS)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(470):           if (nIsWall) and (wIsWall) and (not nwIsWall):
graphicsDisplay.py(477):           if (not sIsWall) and (not eIsWall):
graphicsDisplay.py(480):           if (sIsWall) and (not eIsWall):
graphicsDisplay.py(483):           if (not sIsWall) and (eIsWall):
graphicsDisplay.py(485):             line(add(screen, (0, self.gridSize*(1)*WALL_RADIUS)), add(screen, (self.gridSize*0.5+1, self.gridSize*(1)*WALL_RADIUS)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(486):           if (sIsWall) and (eIsWall) and (not seIsWall):
graphicsDisplay.py(493):           if (not sIsWall) and (not wIsWall):
graphicsDisplay.py(496):           if (sIsWall) and (not wIsWall):
graphicsDisplay.py(499):           if (not sIsWall) and (wIsWall):
graphicsDisplay.py(501):             line(add(screen, (0, self.gridSize*(1)*WALL_RADIUS)), add(screen, (self.gridSize*(-0.5)-1, self.gridSize*(1)*WALL_RADIUS)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(502):           if (sIsWall) and (wIsWall) and (not swIsWall):
graphicsDisplay.py(428):       for yNum, cell in enumerate(x):
graphicsDisplay.py(429):         if cell: # There's a wall here
graphicsDisplay.py(428):       for yNum, cell in enumerate(x):
graphicsDisplay.py(429):         if cell: # There's a wall here
graphicsDisplay.py(430):           pos = (xNum, yNum)
graphicsDisplay.py(431):           screen = self.to_screen(pos)
 --- modulename: graphicsDisplay, funcname: to_screen
graphicsDisplay.py(408):     ( x, y ) = point
graphicsDisplay.py(410):     x = (x + 1)*self.gridSize
graphicsDisplay.py(411):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(412):     return ( x, y )
graphicsDisplay.py(432):           screen2 = self.to_screen2(pos)
 --- modulename: graphicsDisplay, funcname: to_screen2
graphicsDisplay.py(416):     ( x, y ) = point
graphicsDisplay.py(418):     x = (x + 1)*self.gridSize
graphicsDisplay.py(419):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(420):     return ( x, y )
graphicsDisplay.py(435):           wIsWall = self.isWall(xNum-1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(436):           eIsWall = self.isWall(xNum+1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(437):           nIsWall = self.isWall(xNum, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(438):           sIsWall = self.isWall(xNum, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(439):           nwIsWall = self.isWall(xNum-1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(440):           swIsWall = self.isWall(xNum-1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(441):           neIsWall = self.isWall(xNum+1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(442):           seIsWall = self.isWall(xNum+1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(445):           if (not nIsWall) and (not eIsWall):
graphicsDisplay.py(447):             circle(screen2, WALL_RADIUS * self.gridSize, wallColor, wallColor, (0,91), 'arc')
 --- modulename: graphicsUtils, funcname: circle
graphicsUtils.py(176):     x, y = pos
graphicsUtils.py(177):     x0, x1 = x - r - 1, x + r
graphicsUtils.py(178):     y0, y1 = y - r - 1, y + r
graphicsUtils.py(179):     if endpoints == None:
graphicsUtils.py(182):       e = list(endpoints)
graphicsUtils.py(183):     while e[0] > e[1]: e[1] = e[1] + 360
graphicsUtils.py(185):     return _canvas.create_arc(x0, y0, x1, y1, outline=outlineColor, fill=fillColor,
graphicsUtils.py(186):                               extent=e[1] - e[0], start=e[0], style=style, width=width)
 --- modulename: Tkinter, funcname: create_arc
Tkinter.py(2254):         return self._create('arc', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(448):           if (nIsWall) and (not eIsWall):
graphicsDisplay.py(451):           if (not nIsWall) and (eIsWall):
graphicsDisplay.py(454):           if (nIsWall) and (eIsWall) and (not neIsWall):
graphicsDisplay.py(461):           if (not nIsWall) and (not wIsWall):
graphicsDisplay.py(464):           if (nIsWall) and (not wIsWall):
graphicsDisplay.py(467):           if (not nIsWall) and (wIsWall):
graphicsDisplay.py(469):             line(add(screen, (0, self.gridSize*(-1)*WALL_RADIUS)), add(screen, (self.gridSize*(-0.5)-1, self.gridSize*(-1)*WALL_RADIUS)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(470):           if (nIsWall) and (wIsWall) and (not nwIsWall):
graphicsDisplay.py(477):           if (not sIsWall) and (not eIsWall):
graphicsDisplay.py(479):             circle(screen2, WALL_RADIUS * self.gridSize, wallColor, wallColor, (270,361), 'arc')
 --- modulename: graphicsUtils, funcname: circle
graphicsUtils.py(176):     x, y = pos
graphicsUtils.py(177):     x0, x1 = x - r - 1, x + r
graphicsUtils.py(178):     y0, y1 = y - r - 1, y + r
graphicsUtils.py(179):     if endpoints == None:
graphicsUtils.py(182):       e = list(endpoints)
graphicsUtils.py(183):     while e[0] > e[1]: e[1] = e[1] + 360
graphicsUtils.py(185):     return _canvas.create_arc(x0, y0, x1, y1, outline=outlineColor, fill=fillColor,
graphicsUtils.py(186):                               extent=e[1] - e[0], start=e[0], style=style, width=width)
 --- modulename: Tkinter, funcname: create_arc
Tkinter.py(2254):         return self._create('arc', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(480):           if (sIsWall) and (not eIsWall):
graphicsDisplay.py(483):           if (not sIsWall) and (eIsWall):
graphicsDisplay.py(486):           if (sIsWall) and (eIsWall) and (not seIsWall):
graphicsDisplay.py(493):           if (not sIsWall) and (not wIsWall):
graphicsDisplay.py(496):           if (sIsWall) and (not wIsWall):
graphicsDisplay.py(499):           if (not sIsWall) and (wIsWall):
graphicsDisplay.py(501):             line(add(screen, (0, self.gridSize*(1)*WALL_RADIUS)), add(screen, (self.gridSize*(-0.5)-1, self.gridSize*(1)*WALL_RADIUS)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(502):           if (sIsWall) and (wIsWall) and (not swIsWall):
graphicsDisplay.py(428):       for yNum, cell in enumerate(x):
graphicsDisplay.py(429):         if cell: # There's a wall here
graphicsDisplay.py(428):       for yNum, cell in enumerate(x):
graphicsDisplay.py(429):         if cell: # There's a wall here
graphicsDisplay.py(428):       for yNum, cell in enumerate(x):
graphicsDisplay.py(429):         if cell: # There's a wall here
graphicsDisplay.py(428):       for yNum, cell in enumerate(x):
graphicsDisplay.py(429):         if cell: # There's a wall here
graphicsDisplay.py(430):           pos = (xNum, yNum)
graphicsDisplay.py(431):           screen = self.to_screen(pos)
 --- modulename: graphicsDisplay, funcname: to_screen
graphicsDisplay.py(408):     ( x, y ) = point
graphicsDisplay.py(410):     x = (x + 1)*self.gridSize
graphicsDisplay.py(411):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(412):     return ( x, y )
graphicsDisplay.py(432):           screen2 = self.to_screen2(pos)
 --- modulename: graphicsDisplay, funcname: to_screen2
graphicsDisplay.py(416):     ( x, y ) = point
graphicsDisplay.py(418):     x = (x + 1)*self.gridSize
graphicsDisplay.py(419):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(420):     return ( x, y )
graphicsDisplay.py(435):           wIsWall = self.isWall(xNum-1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(436):           eIsWall = self.isWall(xNum+1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(437):           nIsWall = self.isWall(xNum, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(512):       return False
graphicsDisplay.py(438):           sIsWall = self.isWall(xNum, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(439):           nwIsWall = self.isWall(xNum-1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(512):       return False
graphicsDisplay.py(440):           swIsWall = self.isWall(xNum-1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(441):           neIsWall = self.isWall(xNum+1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(512):       return False
graphicsDisplay.py(442):           seIsWall = self.isWall(xNum+1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(445):           if (not nIsWall) and (not eIsWall):
graphicsDisplay.py(448):           if (nIsWall) and (not eIsWall):
graphicsDisplay.py(451):           if (not nIsWall) and (eIsWall):
graphicsDisplay.py(453):             line(add(screen, (0, self.gridSize*(-1)*WALL_RADIUS)), add(screen, (self.gridSize*0.5+1, self.gridSize*(-1)*WALL_RADIUS)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(454):           if (nIsWall) and (eIsWall) and (not neIsWall):
graphicsDisplay.py(461):           if (not nIsWall) and (not wIsWall):
graphicsDisplay.py(464):           if (nIsWall) and (not wIsWall):
graphicsDisplay.py(467):           if (not nIsWall) and (wIsWall):
graphicsDisplay.py(469):             line(add(screen, (0, self.gridSize*(-1)*WALL_RADIUS)), add(screen, (self.gridSize*(-0.5)-1, self.gridSize*(-1)*WALL_RADIUS)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(470):           if (nIsWall) and (wIsWall) and (not nwIsWall):
graphicsDisplay.py(477):           if (not sIsWall) and (not eIsWall):
graphicsDisplay.py(480):           if (sIsWall) and (not eIsWall):
graphicsDisplay.py(483):           if (not sIsWall) and (eIsWall):
graphicsDisplay.py(485):             line(add(screen, (0, self.gridSize*(1)*WALL_RADIUS)), add(screen, (self.gridSize*0.5+1, self.gridSize*(1)*WALL_RADIUS)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(486):           if (sIsWall) and (eIsWall) and (not seIsWall):
graphicsDisplay.py(493):           if (not sIsWall) and (not wIsWall):
graphicsDisplay.py(496):           if (sIsWall) and (not wIsWall):
graphicsDisplay.py(499):           if (not sIsWall) and (wIsWall):
graphicsDisplay.py(501):             line(add(screen, (0, self.gridSize*(1)*WALL_RADIUS)), add(screen, (self.gridSize*(-0.5)-1, self.gridSize*(1)*WALL_RADIUS)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(502):           if (sIsWall) and (wIsWall) and (not swIsWall):
graphicsDisplay.py(428):       for yNum, cell in enumerate(x):
graphicsDisplay.py(424):     for xNum, x in enumerate(wallMatrix):
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(425):       if self.capture and (xNum * 2) < wallMatrix.width: wallColor = TEAM_COLORS[0]
graphicsDisplay.py(426):       if self.capture and (xNum * 2) >= wallMatrix.width: wallColor = TEAM_COLORS[1]
graphicsDisplay.py(428):       for yNum, cell in enumerate(x):
graphicsDisplay.py(429):         if cell: # There's a wall here
graphicsDisplay.py(430):           pos = (xNum, yNum)
graphicsDisplay.py(431):           screen = self.to_screen(pos)
 --- modulename: graphicsDisplay, funcname: to_screen
graphicsDisplay.py(408):     ( x, y ) = point
graphicsDisplay.py(410):     x = (x + 1)*self.gridSize
graphicsDisplay.py(411):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(412):     return ( x, y )
graphicsDisplay.py(432):           screen2 = self.to_screen2(pos)
 --- modulename: graphicsDisplay, funcname: to_screen2
graphicsDisplay.py(416):     ( x, y ) = point
graphicsDisplay.py(418):     x = (x + 1)*self.gridSize
graphicsDisplay.py(419):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(420):     return ( x, y )
graphicsDisplay.py(435):           wIsWall = self.isWall(xNum-1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(436):           eIsWall = self.isWall(xNum+1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(437):           nIsWall = self.isWall(xNum, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(438):           sIsWall = self.isWall(xNum, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(510):       return False
graphicsDisplay.py(439):           nwIsWall = self.isWall(xNum-1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(440):           swIsWall = self.isWall(xNum-1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(510):       return False
graphicsDisplay.py(441):           neIsWall = self.isWall(xNum+1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(442):           seIsWall = self.isWall(xNum+1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(510):       return False
graphicsDisplay.py(445):           if (not nIsWall) and (not eIsWall):
graphicsDisplay.py(448):           if (nIsWall) and (not eIsWall):
graphicsDisplay.py(451):           if (not nIsWall) and (eIsWall):
graphicsDisplay.py(453):             line(add(screen, (0, self.gridSize*(-1)*WALL_RADIUS)), add(screen, (self.gridSize*0.5+1, self.gridSize*(-1)*WALL_RADIUS)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(454):           if (nIsWall) and (eIsWall) and (not neIsWall):
graphicsDisplay.py(461):           if (not nIsWall) and (not wIsWall):
graphicsDisplay.py(464):           if (nIsWall) and (not wIsWall):
graphicsDisplay.py(467):           if (not nIsWall) and (wIsWall):
graphicsDisplay.py(469):             line(add(screen, (0, self.gridSize*(-1)*WALL_RADIUS)), add(screen, (self.gridSize*(-0.5)-1, self.gridSize*(-1)*WALL_RADIUS)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(470):           if (nIsWall) and (wIsWall) and (not nwIsWall):
graphicsDisplay.py(477):           if (not sIsWall) and (not eIsWall):
graphicsDisplay.py(480):           if (sIsWall) and (not eIsWall):
graphicsDisplay.py(483):           if (not sIsWall) and (eIsWall):
graphicsDisplay.py(485):             line(add(screen, (0, self.gridSize*(1)*WALL_RADIUS)), add(screen, (self.gridSize*0.5+1, self.gridSize*(1)*WALL_RADIUS)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(486):           if (sIsWall) and (eIsWall) and (not seIsWall):
graphicsDisplay.py(493):           if (not sIsWall) and (not wIsWall):
graphicsDisplay.py(496):           if (sIsWall) and (not wIsWall):
graphicsDisplay.py(499):           if (not sIsWall) and (wIsWall):
graphicsDisplay.py(501):             line(add(screen, (0, self.gridSize*(1)*WALL_RADIUS)), add(screen, (self.gridSize*(-0.5)-1, self.gridSize*(1)*WALL_RADIUS)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(502):           if (sIsWall) and (wIsWall) and (not swIsWall):
graphicsDisplay.py(428):       for yNum, cell in enumerate(x):
graphicsDisplay.py(429):         if cell: # There's a wall here
graphicsDisplay.py(428):       for yNum, cell in enumerate(x):
graphicsDisplay.py(429):         if cell: # There's a wall here
graphicsDisplay.py(428):       for yNum, cell in enumerate(x):
graphicsDisplay.py(429):         if cell: # There's a wall here
graphicsDisplay.py(428):       for yNum, cell in enumerate(x):
graphicsDisplay.py(429):         if cell: # There's a wall here
graphicsDisplay.py(430):           pos = (xNum, yNum)
graphicsDisplay.py(431):           screen = self.to_screen(pos)
 --- modulename: graphicsDisplay, funcname: to_screen
graphicsDisplay.py(408):     ( x, y ) = point
graphicsDisplay.py(410):     x = (x + 1)*self.gridSize
graphicsDisplay.py(411):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(412):     return ( x, y )
graphicsDisplay.py(432):           screen2 = self.to_screen2(pos)
 --- modulename: graphicsDisplay, funcname: to_screen2
graphicsDisplay.py(416):     ( x, y ) = point
graphicsDisplay.py(418):     x = (x + 1)*self.gridSize
graphicsDisplay.py(419):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(420):     return ( x, y )
graphicsDisplay.py(435):           wIsWall = self.isWall(xNum-1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(436):           eIsWall = self.isWall(xNum+1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(437):           nIsWall = self.isWall(xNum, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(438):           sIsWall = self.isWall(xNum, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(439):           nwIsWall = self.isWall(xNum-1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(440):           swIsWall = self.isWall(xNum-1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(441):           neIsWall = self.isWall(xNum+1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(442):           seIsWall = self.isWall(xNum+1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(445):           if (not nIsWall) and (not eIsWall):
graphicsDisplay.py(448):           if (nIsWall) and (not eIsWall):
graphicsDisplay.py(451):           if (not nIsWall) and (eIsWall):
graphicsDisplay.py(453):             line(add(screen, (0, self.gridSize*(-1)*WALL_RADIUS)), add(screen, (self.gridSize*0.5+1, self.gridSize*(-1)*WALL_RADIUS)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(454):           if (nIsWall) and (eIsWall) and (not neIsWall):
graphicsDisplay.py(461):           if (not nIsWall) and (not wIsWall):
graphicsDisplay.py(463):             circle(screen2, WALL_RADIUS * self.gridSize, wallColor, wallColor, (90,181), 'arc')
 --- modulename: graphicsUtils, funcname: circle
graphicsUtils.py(176):     x, y = pos
graphicsUtils.py(177):     x0, x1 = x - r - 1, x + r
graphicsUtils.py(178):     y0, y1 = y - r - 1, y + r
graphicsUtils.py(179):     if endpoints == None:
graphicsUtils.py(182):       e = list(endpoints)
graphicsUtils.py(183):     while e[0] > e[1]: e[1] = e[1] + 360
graphicsUtils.py(185):     return _canvas.create_arc(x0, y0, x1, y1, outline=outlineColor, fill=fillColor,
graphicsUtils.py(186):                               extent=e[1] - e[0], start=e[0], style=style, width=width)
 --- modulename: Tkinter, funcname: create_arc
Tkinter.py(2254):         return self._create('arc', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(464):           if (nIsWall) and (not wIsWall):
graphicsDisplay.py(467):           if (not nIsWall) and (wIsWall):
graphicsDisplay.py(470):           if (nIsWall) and (wIsWall) and (not nwIsWall):
graphicsDisplay.py(477):           if (not sIsWall) and (not eIsWall):
graphicsDisplay.py(480):           if (sIsWall) and (not eIsWall):
graphicsDisplay.py(483):           if (not sIsWall) and (eIsWall):
graphicsDisplay.py(485):             line(add(screen, (0, self.gridSize*(1)*WALL_RADIUS)), add(screen, (self.gridSize*0.5+1, self.gridSize*(1)*WALL_RADIUS)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(486):           if (sIsWall) and (eIsWall) and (not seIsWall):
graphicsDisplay.py(493):           if (not sIsWall) and (not wIsWall):
graphicsDisplay.py(495):             circle(screen2, WALL_RADIUS * self.gridSize, wallColor, wallColor, (180,271), 'arc')
 --- modulename: graphicsUtils, funcname: circle
graphicsUtils.py(176):     x, y = pos
graphicsUtils.py(177):     x0, x1 = x - r - 1, x + r
graphicsUtils.py(178):     y0, y1 = y - r - 1, y + r
graphicsUtils.py(179):     if endpoints == None:
graphicsUtils.py(182):       e = list(endpoints)
graphicsUtils.py(183):     while e[0] > e[1]: e[1] = e[1] + 360
graphicsUtils.py(185):     return _canvas.create_arc(x0, y0, x1, y1, outline=outlineColor, fill=fillColor,
graphicsUtils.py(186):                               extent=e[1] - e[0], start=e[0], style=style, width=width)
 --- modulename: Tkinter, funcname: create_arc
Tkinter.py(2254):         return self._create('arc', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(496):           if (sIsWall) and (not wIsWall):
graphicsDisplay.py(499):           if (not sIsWall) and (wIsWall):
graphicsDisplay.py(502):           if (sIsWall) and (wIsWall) and (not swIsWall):
graphicsDisplay.py(428):       for yNum, cell in enumerate(x):
graphicsDisplay.py(429):         if cell: # There's a wall here
graphicsDisplay.py(428):       for yNum, cell in enumerate(x):
graphicsDisplay.py(429):         if cell: # There's a wall here
graphicsDisplay.py(430):           pos = (xNum, yNum)
graphicsDisplay.py(431):           screen = self.to_screen(pos)
 --- modulename: graphicsDisplay, funcname: to_screen
graphicsDisplay.py(408):     ( x, y ) = point
graphicsDisplay.py(410):     x = (x + 1)*self.gridSize
graphicsDisplay.py(411):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(412):     return ( x, y )
graphicsDisplay.py(432):           screen2 = self.to_screen2(pos)
 --- modulename: graphicsDisplay, funcname: to_screen2
graphicsDisplay.py(416):     ( x, y ) = point
graphicsDisplay.py(418):     x = (x + 1)*self.gridSize
graphicsDisplay.py(419):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(420):     return ( x, y )
graphicsDisplay.py(435):           wIsWall = self.isWall(xNum-1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(436):           eIsWall = self.isWall(xNum+1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(437):           nIsWall = self.isWall(xNum, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(512):       return False
graphicsDisplay.py(438):           sIsWall = self.isWall(xNum, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(439):           nwIsWall = self.isWall(xNum-1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(512):       return False
graphicsDisplay.py(440):           swIsWall = self.isWall(xNum-1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(441):           neIsWall = self.isWall(xNum+1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(512):       return False
graphicsDisplay.py(442):           seIsWall = self.isWall(xNum+1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(445):           if (not nIsWall) and (not eIsWall):
graphicsDisplay.py(448):           if (nIsWall) and (not eIsWall):
graphicsDisplay.py(451):           if (not nIsWall) and (eIsWall):
graphicsDisplay.py(453):             line(add(screen, (0, self.gridSize*(-1)*WALL_RADIUS)), add(screen, (self.gridSize*0.5+1, self.gridSize*(-1)*WALL_RADIUS)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(454):           if (nIsWall) and (eIsWall) and (not neIsWall):
graphicsDisplay.py(461):           if (not nIsWall) and (not wIsWall):
graphicsDisplay.py(464):           if (nIsWall) and (not wIsWall):
graphicsDisplay.py(467):           if (not nIsWall) and (wIsWall):
graphicsDisplay.py(469):             line(add(screen, (0, self.gridSize*(-1)*WALL_RADIUS)), add(screen, (self.gridSize*(-0.5)-1, self.gridSize*(-1)*WALL_RADIUS)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(470):           if (nIsWall) and (wIsWall) and (not nwIsWall):
graphicsDisplay.py(477):           if (not sIsWall) and (not eIsWall):
graphicsDisplay.py(480):           if (sIsWall) and (not eIsWall):
graphicsDisplay.py(483):           if (not sIsWall) and (eIsWall):
graphicsDisplay.py(485):             line(add(screen, (0, self.gridSize*(1)*WALL_RADIUS)), add(screen, (self.gridSize*0.5+1, self.gridSize*(1)*WALL_RADIUS)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(486):           if (sIsWall) and (eIsWall) and (not seIsWall):
graphicsDisplay.py(493):           if (not sIsWall) and (not wIsWall):
graphicsDisplay.py(496):           if (sIsWall) and (not wIsWall):
graphicsDisplay.py(499):           if (not sIsWall) and (wIsWall):
graphicsDisplay.py(501):             line(add(screen, (0, self.gridSize*(1)*WALL_RADIUS)), add(screen, (self.gridSize*(-0.5)-1, self.gridSize*(1)*WALL_RADIUS)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(502):           if (sIsWall) and (wIsWall) and (not swIsWall):
graphicsDisplay.py(428):       for yNum, cell in enumerate(x):
graphicsDisplay.py(424):     for xNum, x in enumerate(wallMatrix):
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(425):       if self.capture and (xNum * 2) < wallMatrix.width: wallColor = TEAM_COLORS[0]
graphicsDisplay.py(426):       if self.capture and (xNum * 2) >= wallMatrix.width: wallColor = TEAM_COLORS[1]
graphicsDisplay.py(428):       for yNum, cell in enumerate(x):
graphicsDisplay.py(429):         if cell: # There's a wall here
graphicsDisplay.py(430):           pos = (xNum, yNum)
graphicsDisplay.py(431):           screen = self.to_screen(pos)
 --- modulename: graphicsDisplay, funcname: to_screen
graphicsDisplay.py(408):     ( x, y ) = point
graphicsDisplay.py(410):     x = (x + 1)*self.gridSize
graphicsDisplay.py(411):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(412):     return ( x, y )
graphicsDisplay.py(432):           screen2 = self.to_screen2(pos)
 --- modulename: graphicsDisplay, funcname: to_screen2
graphicsDisplay.py(416):     ( x, y ) = point
graphicsDisplay.py(418):     x = (x + 1)*self.gridSize
graphicsDisplay.py(419):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(420):     return ( x, y )
graphicsDisplay.py(435):           wIsWall = self.isWall(xNum-1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(436):           eIsWall = self.isWall(xNum+1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(437):           nIsWall = self.isWall(xNum, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(438):           sIsWall = self.isWall(xNum, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(510):       return False
graphicsDisplay.py(439):           nwIsWall = self.isWall(xNum-1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(440):           swIsWall = self.isWall(xNum-1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(510):       return False
graphicsDisplay.py(441):           neIsWall = self.isWall(xNum+1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(442):           seIsWall = self.isWall(xNum+1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(510):       return False
graphicsDisplay.py(445):           if (not nIsWall) and (not eIsWall):
graphicsDisplay.py(448):           if (nIsWall) and (not eIsWall):
graphicsDisplay.py(451):           if (not nIsWall) and (eIsWall):
graphicsDisplay.py(454):           if (nIsWall) and (eIsWall) and (not neIsWall):
graphicsDisplay.py(461):           if (not nIsWall) and (not wIsWall):
graphicsDisplay.py(464):           if (nIsWall) and (not wIsWall):
graphicsDisplay.py(467):           if (not nIsWall) and (wIsWall):
graphicsDisplay.py(470):           if (nIsWall) and (wIsWall) and (not nwIsWall):
graphicsDisplay.py(472):             circle(add(screen2, (self.gridSize*(-2)*WALL_RADIUS, self.gridSize*(-2)*WALL_RADIUS)), WALL_RADIUS * self.gridSize-1, wallColor, wallColor, (270,361), 'arc')
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: circle
graphicsUtils.py(176):     x, y = pos
graphicsUtils.py(177):     x0, x1 = x - r - 1, x + r
graphicsUtils.py(178):     y0, y1 = y - r - 1, y + r
graphicsUtils.py(179):     if endpoints == None:
graphicsUtils.py(182):       e = list(endpoints)
graphicsUtils.py(183):     while e[0] > e[1]: e[1] = e[1] + 360
graphicsUtils.py(185):     return _canvas.create_arc(x0, y0, x1, y1, outline=outlineColor, fill=fillColor,
graphicsUtils.py(186):                               extent=e[1] - e[0], start=e[0], style=style, width=width)
 --- modulename: Tkinter, funcname: create_arc
Tkinter.py(2254):         return self._create('arc', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(473):             line(add(screen, (self.gridSize*(-2)*WALL_RADIUS+1, self.gridSize*(-1)*WALL_RADIUS)), add(screen, (self.gridSize*(-0.5), self.gridSize*(-1)*WALL_RADIUS)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(474):             line(add(screen, (self.gridSize*(-1)*WALL_RADIUS, self.gridSize*(-2)*WALL_RADIUS+1)), add(screen, (self.gridSize*(-1)*WALL_RADIUS, self.gridSize*(-0.5))), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(477):           if (not sIsWall) and (not eIsWall):
graphicsDisplay.py(480):           if (sIsWall) and (not eIsWall):
graphicsDisplay.py(483):           if (not sIsWall) and (eIsWall):
graphicsDisplay.py(485):             line(add(screen, (0, self.gridSize*(1)*WALL_RADIUS)), add(screen, (self.gridSize*0.5+1, self.gridSize*(1)*WALL_RADIUS)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(486):           if (sIsWall) and (eIsWall) and (not seIsWall):
graphicsDisplay.py(493):           if (not sIsWall) and (not wIsWall):
graphicsDisplay.py(496):           if (sIsWall) and (not wIsWall):
graphicsDisplay.py(499):           if (not sIsWall) and (wIsWall):
graphicsDisplay.py(501):             line(add(screen, (0, self.gridSize*(1)*WALL_RADIUS)), add(screen, (self.gridSize*(-0.5)-1, self.gridSize*(1)*WALL_RADIUS)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(502):           if (sIsWall) and (wIsWall) and (not swIsWall):
graphicsDisplay.py(428):       for yNum, cell in enumerate(x):
graphicsDisplay.py(429):         if cell: # There's a wall here
graphicsDisplay.py(430):           pos = (xNum, yNum)
graphicsDisplay.py(431):           screen = self.to_screen(pos)
 --- modulename: graphicsDisplay, funcname: to_screen
graphicsDisplay.py(408):     ( x, y ) = point
graphicsDisplay.py(410):     x = (x + 1)*self.gridSize
graphicsDisplay.py(411):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(412):     return ( x, y )
graphicsDisplay.py(432):           screen2 = self.to_screen2(pos)
 --- modulename: graphicsDisplay, funcname: to_screen2
graphicsDisplay.py(416):     ( x, y ) = point
graphicsDisplay.py(418):     x = (x + 1)*self.gridSize
graphicsDisplay.py(419):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(420):     return ( x, y )
graphicsDisplay.py(435):           wIsWall = self.isWall(xNum-1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(436):           eIsWall = self.isWall(xNum+1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(437):           nIsWall = self.isWall(xNum, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(438):           sIsWall = self.isWall(xNum, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(439):           nwIsWall = self.isWall(xNum-1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(440):           swIsWall = self.isWall(xNum-1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(441):           neIsWall = self.isWall(xNum+1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(442):           seIsWall = self.isWall(xNum+1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(445):           if (not nIsWall) and (not eIsWall):
graphicsDisplay.py(448):           if (nIsWall) and (not eIsWall):
graphicsDisplay.py(451):           if (not nIsWall) and (eIsWall):
graphicsDisplay.py(453):             line(add(screen, (0, self.gridSize*(-1)*WALL_RADIUS)), add(screen, (self.gridSize*0.5+1, self.gridSize*(-1)*WALL_RADIUS)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(454):           if (nIsWall) and (eIsWall) and (not neIsWall):
graphicsDisplay.py(461):           if (not nIsWall) and (not wIsWall):
graphicsDisplay.py(463):             circle(screen2, WALL_RADIUS * self.gridSize, wallColor, wallColor, (90,181), 'arc')
 --- modulename: graphicsUtils, funcname: circle
graphicsUtils.py(176):     x, y = pos
graphicsUtils.py(177):     x0, x1 = x - r - 1, x + r
graphicsUtils.py(178):     y0, y1 = y - r - 1, y + r
graphicsUtils.py(179):     if endpoints == None:
graphicsUtils.py(182):       e = list(endpoints)
graphicsUtils.py(183):     while e[0] > e[1]: e[1] = e[1] + 360
graphicsUtils.py(185):     return _canvas.create_arc(x0, y0, x1, y1, outline=outlineColor, fill=fillColor,
graphicsUtils.py(186):                               extent=e[1] - e[0], start=e[0], style=style, width=width)
 --- modulename: Tkinter, funcname: create_arc
Tkinter.py(2254):         return self._create('arc', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(464):           if (nIsWall) and (not wIsWall):
graphicsDisplay.py(467):           if (not nIsWall) and (wIsWall):
graphicsDisplay.py(470):           if (nIsWall) and (wIsWall) and (not nwIsWall):
graphicsDisplay.py(477):           if (not sIsWall) and (not eIsWall):
graphicsDisplay.py(480):           if (sIsWall) and (not eIsWall):
graphicsDisplay.py(483):           if (not sIsWall) and (eIsWall):
graphicsDisplay.py(486):           if (sIsWall) and (eIsWall) and (not seIsWall):
graphicsDisplay.py(493):           if (not sIsWall) and (not wIsWall):
graphicsDisplay.py(496):           if (sIsWall) and (not wIsWall):
graphicsDisplay.py(498):             line(add(screen, (self.gridSize*(-1)*WALL_RADIUS, 0)), add(screen, (self.gridSize*(-1)*WALL_RADIUS, self.gridSize*(0.5)+1)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(499):           if (not sIsWall) and (wIsWall):
graphicsDisplay.py(502):           if (sIsWall) and (wIsWall) and (not swIsWall):
graphicsDisplay.py(428):       for yNum, cell in enumerate(x):
graphicsDisplay.py(429):         if cell: # There's a wall here
graphicsDisplay.py(428):       for yNum, cell in enumerate(x):
graphicsDisplay.py(429):         if cell: # There's a wall here
graphicsDisplay.py(430):           pos = (xNum, yNum)
graphicsDisplay.py(431):           screen = self.to_screen(pos)
 --- modulename: graphicsDisplay, funcname: to_screen
graphicsDisplay.py(408):     ( x, y ) = point
graphicsDisplay.py(410):     x = (x + 1)*self.gridSize
graphicsDisplay.py(411):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(412):     return ( x, y )
graphicsDisplay.py(432):           screen2 = self.to_screen2(pos)
 --- modulename: graphicsDisplay, funcname: to_screen2
graphicsDisplay.py(416):     ( x, y ) = point
graphicsDisplay.py(418):     x = (x + 1)*self.gridSize
graphicsDisplay.py(419):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(420):     return ( x, y )
graphicsDisplay.py(435):           wIsWall = self.isWall(xNum-1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(436):           eIsWall = self.isWall(xNum+1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(437):           nIsWall = self.isWall(xNum, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(438):           sIsWall = self.isWall(xNum, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(439):           nwIsWall = self.isWall(xNum-1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(440):           swIsWall = self.isWall(xNum-1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(441):           neIsWall = self.isWall(xNum+1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(442):           seIsWall = self.isWall(xNum+1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(445):           if (not nIsWall) and (not eIsWall):
graphicsDisplay.py(448):           if (nIsWall) and (not eIsWall):
graphicsDisplay.py(450):             line(add(screen, (self.gridSize*WALL_RADIUS, 0)), add(screen, (self.gridSize*WALL_RADIUS, self.gridSize*(-0.5)-1)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(451):           if (not nIsWall) and (eIsWall):
graphicsDisplay.py(454):           if (nIsWall) and (eIsWall) and (not neIsWall):
graphicsDisplay.py(461):           if (not nIsWall) and (not wIsWall):
graphicsDisplay.py(464):           if (nIsWall) and (not wIsWall):
graphicsDisplay.py(466):             line(add(screen, (self.gridSize*(-1)*WALL_RADIUS, 0)), add(screen, (self.gridSize*(-1)*WALL_RADIUS, self.gridSize*(-0.5)-1)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(467):           if (not nIsWall) and (wIsWall):
graphicsDisplay.py(470):           if (nIsWall) and (wIsWall) and (not nwIsWall):
graphicsDisplay.py(477):           if (not sIsWall) and (not eIsWall):
graphicsDisplay.py(479):             circle(screen2, WALL_RADIUS * self.gridSize, wallColor, wallColor, (270,361), 'arc')
 --- modulename: graphicsUtils, funcname: circle
graphicsUtils.py(176):     x, y = pos
graphicsUtils.py(177):     x0, x1 = x - r - 1, x + r
graphicsUtils.py(178):     y0, y1 = y - r - 1, y + r
graphicsUtils.py(179):     if endpoints == None:
graphicsUtils.py(182):       e = list(endpoints)
graphicsUtils.py(183):     while e[0] > e[1]: e[1] = e[1] + 360
graphicsUtils.py(185):     return _canvas.create_arc(x0, y0, x1, y1, outline=outlineColor, fill=fillColor,
graphicsUtils.py(186):                               extent=e[1] - e[0], start=e[0], style=style, width=width)
 --- modulename: Tkinter, funcname: create_arc
Tkinter.py(2254):         return self._create('arc', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(480):           if (sIsWall) and (not eIsWall):
graphicsDisplay.py(483):           if (not sIsWall) and (eIsWall):
graphicsDisplay.py(486):           if (sIsWall) and (eIsWall) and (not seIsWall):
graphicsDisplay.py(493):           if (not sIsWall) and (not wIsWall):
graphicsDisplay.py(495):             circle(screen2, WALL_RADIUS * self.gridSize, wallColor, wallColor, (180,271), 'arc')
 --- modulename: graphicsUtils, funcname: circle
graphicsUtils.py(176):     x, y = pos
graphicsUtils.py(177):     x0, x1 = x - r - 1, x + r
graphicsUtils.py(178):     y0, y1 = y - r - 1, y + r
graphicsUtils.py(179):     if endpoints == None:
graphicsUtils.py(182):       e = list(endpoints)
graphicsUtils.py(183):     while e[0] > e[1]: e[1] = e[1] + 360
graphicsUtils.py(185):     return _canvas.create_arc(x0, y0, x1, y1, outline=outlineColor, fill=fillColor,
graphicsUtils.py(186):                               extent=e[1] - e[0], start=e[0], style=style, width=width)
 --- modulename: Tkinter, funcname: create_arc
Tkinter.py(2254):         return self._create('arc', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(496):           if (sIsWall) and (not wIsWall):
graphicsDisplay.py(499):           if (not sIsWall) and (wIsWall):
graphicsDisplay.py(502):           if (sIsWall) and (wIsWall) and (not swIsWall):
graphicsDisplay.py(428):       for yNum, cell in enumerate(x):
graphicsDisplay.py(429):         if cell: # There's a wall here
graphicsDisplay.py(430):           pos = (xNum, yNum)
graphicsDisplay.py(431):           screen = self.to_screen(pos)
 --- modulename: graphicsDisplay, funcname: to_screen
graphicsDisplay.py(408):     ( x, y ) = point
graphicsDisplay.py(410):     x = (x + 1)*self.gridSize
graphicsDisplay.py(411):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(412):     return ( x, y )
graphicsDisplay.py(432):           screen2 = self.to_screen2(pos)
 --- modulename: graphicsDisplay, funcname: to_screen2
graphicsDisplay.py(416):     ( x, y ) = point
graphicsDisplay.py(418):     x = (x + 1)*self.gridSize
graphicsDisplay.py(419):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(420):     return ( x, y )
graphicsDisplay.py(435):           wIsWall = self.isWall(xNum-1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(436):           eIsWall = self.isWall(xNum+1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(437):           nIsWall = self.isWall(xNum, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(438):           sIsWall = self.isWall(xNum, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(439):           nwIsWall = self.isWall(xNum-1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(440):           swIsWall = self.isWall(xNum-1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(441):           neIsWall = self.isWall(xNum+1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(442):           seIsWall = self.isWall(xNum+1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(445):           if (not nIsWall) and (not eIsWall):
graphicsDisplay.py(448):           if (nIsWall) and (not eIsWall):
graphicsDisplay.py(451):           if (not nIsWall) and (eIsWall):
graphicsDisplay.py(453):             line(add(screen, (0, self.gridSize*(-1)*WALL_RADIUS)), add(screen, (self.gridSize*0.5+1, self.gridSize*(-1)*WALL_RADIUS)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(454):           if (nIsWall) and (eIsWall) and (not neIsWall):
graphicsDisplay.py(461):           if (not nIsWall) and (not wIsWall):
graphicsDisplay.py(464):           if (nIsWall) and (not wIsWall):
graphicsDisplay.py(467):           if (not nIsWall) and (wIsWall):
graphicsDisplay.py(469):             line(add(screen, (0, self.gridSize*(-1)*WALL_RADIUS)), add(screen, (self.gridSize*(-0.5)-1, self.gridSize*(-1)*WALL_RADIUS)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(470):           if (nIsWall) and (wIsWall) and (not nwIsWall):
graphicsDisplay.py(477):           if (not sIsWall) and (not eIsWall):
graphicsDisplay.py(480):           if (sIsWall) and (not eIsWall):
graphicsDisplay.py(483):           if (not sIsWall) and (eIsWall):
graphicsDisplay.py(486):           if (sIsWall) and (eIsWall) and (not seIsWall):
graphicsDisplay.py(488):             circle(add(screen2, (self.gridSize*2*WALL_RADIUS, self.gridSize*(2)*WALL_RADIUS)), WALL_RADIUS * self.gridSize-1, wallColor, wallColor, (90,181), 'arc')
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: circle
graphicsUtils.py(176):     x, y = pos
graphicsUtils.py(177):     x0, x1 = x - r - 1, x + r
graphicsUtils.py(178):     y0, y1 = y - r - 1, y + r
graphicsUtils.py(179):     if endpoints == None:
graphicsUtils.py(182):       e = list(endpoints)
graphicsUtils.py(183):     while e[0] > e[1]: e[1] = e[1] + 360
graphicsUtils.py(185):     return _canvas.create_arc(x0, y0, x1, y1, outline=outlineColor, fill=fillColor,
graphicsUtils.py(186):                               extent=e[1] - e[0], start=e[0], style=style, width=width)
 --- modulename: Tkinter, funcname: create_arc
Tkinter.py(2254):         return self._create('arc', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(489):             line(add(screen, (self.gridSize*2*WALL_RADIUS-1, self.gridSize*(1)*WALL_RADIUS)), add(screen, (self.gridSize*0.5, self.gridSize*(1)*WALL_RADIUS)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(490):             line(add(screen, (self.gridSize*WALL_RADIUS, self.gridSize*(2)*WALL_RADIUS-1)), add(screen, (self.gridSize*WALL_RADIUS, self.gridSize*(0.5))), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(493):           if (not sIsWall) and (not wIsWall):
graphicsDisplay.py(496):           if (sIsWall) and (not wIsWall):
graphicsDisplay.py(499):           if (not sIsWall) and (wIsWall):
graphicsDisplay.py(502):           if (sIsWall) and (wIsWall) and (not swIsWall):
graphicsDisplay.py(504):             circle(add(screen2, (self.gridSize*(-2)*WALL_RADIUS, self.gridSize*(2)*WALL_RADIUS)), WALL_RADIUS * self.gridSize-1, wallColor, wallColor, (0,91), 'arc')
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: circle
graphicsUtils.py(176):     x, y = pos
graphicsUtils.py(177):     x0, x1 = x - r - 1, x + r
graphicsUtils.py(178):     y0, y1 = y - r - 1, y + r
graphicsUtils.py(179):     if endpoints == None:
graphicsUtils.py(182):       e = list(endpoints)
graphicsUtils.py(183):     while e[0] > e[1]: e[1] = e[1] + 360
graphicsUtils.py(185):     return _canvas.create_arc(x0, y0, x1, y1, outline=outlineColor, fill=fillColor,
graphicsUtils.py(186):                               extent=e[1] - e[0], start=e[0], style=style, width=width)
 --- modulename: Tkinter, funcname: create_arc
Tkinter.py(2254):         return self._create('arc', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(505):             line(add(screen, (self.gridSize*(-2)*WALL_RADIUS+1, self.gridSize*(1)*WALL_RADIUS)), add(screen, (self.gridSize*(-0.5), self.gridSize*(1)*WALL_RADIUS)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(506):             line(add(screen, (self.gridSize*(-1)*WALL_RADIUS, self.gridSize*(2)*WALL_RADIUS-1)), add(screen, (self.gridSize*(-1)*WALL_RADIUS, self.gridSize*(0.5))), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(428):       for yNum, cell in enumerate(x):
graphicsDisplay.py(429):         if cell: # There's a wall here
graphicsDisplay.py(428):       for yNum, cell in enumerate(x):
graphicsDisplay.py(429):         if cell: # There's a wall here
graphicsDisplay.py(430):           pos = (xNum, yNum)
graphicsDisplay.py(431):           screen = self.to_screen(pos)
 --- modulename: graphicsDisplay, funcname: to_screen
graphicsDisplay.py(408):     ( x, y ) = point
graphicsDisplay.py(410):     x = (x + 1)*self.gridSize
graphicsDisplay.py(411):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(412):     return ( x, y )
graphicsDisplay.py(432):           screen2 = self.to_screen2(pos)
 --- modulename: graphicsDisplay, funcname: to_screen2
graphicsDisplay.py(416):     ( x, y ) = point
graphicsDisplay.py(418):     x = (x + 1)*self.gridSize
graphicsDisplay.py(419):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(420):     return ( x, y )
graphicsDisplay.py(435):           wIsWall = self.isWall(xNum-1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(436):           eIsWall = self.isWall(xNum+1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(437):           nIsWall = self.isWall(xNum, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(512):       return False
graphicsDisplay.py(438):           sIsWall = self.isWall(xNum, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(439):           nwIsWall = self.isWall(xNum-1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(512):       return False
graphicsDisplay.py(440):           swIsWall = self.isWall(xNum-1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(441):           neIsWall = self.isWall(xNum+1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(512):       return False
graphicsDisplay.py(442):           seIsWall = self.isWall(xNum+1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(445):           if (not nIsWall) and (not eIsWall):
graphicsDisplay.py(448):           if (nIsWall) and (not eIsWall):
graphicsDisplay.py(451):           if (not nIsWall) and (eIsWall):
graphicsDisplay.py(453):             line(add(screen, (0, self.gridSize*(-1)*WALL_RADIUS)), add(screen, (self.gridSize*0.5+1, self.gridSize*(-1)*WALL_RADIUS)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(454):           if (nIsWall) and (eIsWall) and (not neIsWall):
graphicsDisplay.py(461):           if (not nIsWall) and (not wIsWall):
graphicsDisplay.py(464):           if (nIsWall) and (not wIsWall):
graphicsDisplay.py(467):           if (not nIsWall) and (wIsWall):
graphicsDisplay.py(469):             line(add(screen, (0, self.gridSize*(-1)*WALL_RADIUS)), add(screen, (self.gridSize*(-0.5)-1, self.gridSize*(-1)*WALL_RADIUS)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(470):           if (nIsWall) and (wIsWall) and (not nwIsWall):
graphicsDisplay.py(477):           if (not sIsWall) and (not eIsWall):
graphicsDisplay.py(480):           if (sIsWall) and (not eIsWall):
graphicsDisplay.py(483):           if (not sIsWall) and (eIsWall):
graphicsDisplay.py(485):             line(add(screen, (0, self.gridSize*(1)*WALL_RADIUS)), add(screen, (self.gridSize*0.5+1, self.gridSize*(1)*WALL_RADIUS)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(486):           if (sIsWall) and (eIsWall) and (not seIsWall):
graphicsDisplay.py(493):           if (not sIsWall) and (not wIsWall):
graphicsDisplay.py(496):           if (sIsWall) and (not wIsWall):
graphicsDisplay.py(499):           if (not sIsWall) and (wIsWall):
graphicsDisplay.py(501):             line(add(screen, (0, self.gridSize*(1)*WALL_RADIUS)), add(screen, (self.gridSize*(-0.5)-1, self.gridSize*(1)*WALL_RADIUS)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(502):           if (sIsWall) and (wIsWall) and (not swIsWall):
graphicsDisplay.py(428):       for yNum, cell in enumerate(x):
graphicsDisplay.py(424):     for xNum, x in enumerate(wallMatrix):
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(425):       if self.capture and (xNum * 2) < wallMatrix.width: wallColor = TEAM_COLORS[0]
graphicsDisplay.py(426):       if self.capture and (xNum * 2) >= wallMatrix.width: wallColor = TEAM_COLORS[1]
graphicsDisplay.py(428):       for yNum, cell in enumerate(x):
graphicsDisplay.py(429):         if cell: # There's a wall here
graphicsDisplay.py(430):           pos = (xNum, yNum)
graphicsDisplay.py(431):           screen = self.to_screen(pos)
 --- modulename: graphicsDisplay, funcname: to_screen
graphicsDisplay.py(408):     ( x, y ) = point
graphicsDisplay.py(410):     x = (x + 1)*self.gridSize
graphicsDisplay.py(411):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(412):     return ( x, y )
graphicsDisplay.py(432):           screen2 = self.to_screen2(pos)
 --- modulename: graphicsDisplay, funcname: to_screen2
graphicsDisplay.py(416):     ( x, y ) = point
graphicsDisplay.py(418):     x = (x + 1)*self.gridSize
graphicsDisplay.py(419):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(420):     return ( x, y )
graphicsDisplay.py(435):           wIsWall = self.isWall(xNum-1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(436):           eIsWall = self.isWall(xNum+1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(437):           nIsWall = self.isWall(xNum, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(438):           sIsWall = self.isWall(xNum, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(510):       return False
graphicsDisplay.py(439):           nwIsWall = self.isWall(xNum-1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(440):           swIsWall = self.isWall(xNum-1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(510):       return False
graphicsDisplay.py(441):           neIsWall = self.isWall(xNum+1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(442):           seIsWall = self.isWall(xNum+1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(510):       return False
graphicsDisplay.py(445):           if (not nIsWall) and (not eIsWall):
graphicsDisplay.py(448):           if (nIsWall) and (not eIsWall):
graphicsDisplay.py(451):           if (not nIsWall) and (eIsWall):
graphicsDisplay.py(454):           if (nIsWall) and (eIsWall) and (not neIsWall):
graphicsDisplay.py(461):           if (not nIsWall) and (not wIsWall):
graphicsDisplay.py(464):           if (nIsWall) and (not wIsWall):
graphicsDisplay.py(467):           if (not nIsWall) and (wIsWall):
graphicsDisplay.py(470):           if (nIsWall) and (wIsWall) and (not nwIsWall):
graphicsDisplay.py(477):           if (not sIsWall) and (not eIsWall):
graphicsDisplay.py(480):           if (sIsWall) and (not eIsWall):
graphicsDisplay.py(483):           if (not sIsWall) and (eIsWall):
graphicsDisplay.py(485):             line(add(screen, (0, self.gridSize*(1)*WALL_RADIUS)), add(screen, (self.gridSize*0.5+1, self.gridSize*(1)*WALL_RADIUS)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(486):           if (sIsWall) and (eIsWall) and (not seIsWall):
graphicsDisplay.py(493):           if (not sIsWall) and (not wIsWall):
graphicsDisplay.py(496):           if (sIsWall) and (not wIsWall):
graphicsDisplay.py(499):           if (not sIsWall) and (wIsWall):
graphicsDisplay.py(501):             line(add(screen, (0, self.gridSize*(1)*WALL_RADIUS)), add(screen, (self.gridSize*(-0.5)-1, self.gridSize*(1)*WALL_RADIUS)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(502):           if (sIsWall) and (wIsWall) and (not swIsWall):
graphicsDisplay.py(428):       for yNum, cell in enumerate(x):
graphicsDisplay.py(429):         if cell: # There's a wall here
graphicsDisplay.py(430):           pos = (xNum, yNum)
graphicsDisplay.py(431):           screen = self.to_screen(pos)
 --- modulename: graphicsDisplay, funcname: to_screen
graphicsDisplay.py(408):     ( x, y ) = point
graphicsDisplay.py(410):     x = (x + 1)*self.gridSize
graphicsDisplay.py(411):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(412):     return ( x, y )
graphicsDisplay.py(432):           screen2 = self.to_screen2(pos)
 --- modulename: graphicsDisplay, funcname: to_screen2
graphicsDisplay.py(416):     ( x, y ) = point
graphicsDisplay.py(418):     x = (x + 1)*self.gridSize
graphicsDisplay.py(419):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(420):     return ( x, y )
graphicsDisplay.py(435):           wIsWall = self.isWall(xNum-1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(436):           eIsWall = self.isWall(xNum+1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(437):           nIsWall = self.isWall(xNum, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(438):           sIsWall = self.isWall(xNum, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(439):           nwIsWall = self.isWall(xNum-1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(440):           swIsWall = self.isWall(xNum-1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(441):           neIsWall = self.isWall(xNum+1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(442):           seIsWall = self.isWall(xNum+1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(445):           if (not nIsWall) and (not eIsWall):
graphicsDisplay.py(448):           if (nIsWall) and (not eIsWall):
graphicsDisplay.py(451):           if (not nIsWall) and (eIsWall):
graphicsDisplay.py(453):             line(add(screen, (0, self.gridSize*(-1)*WALL_RADIUS)), add(screen, (self.gridSize*0.5+1, self.gridSize*(-1)*WALL_RADIUS)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(454):           if (nIsWall) and (eIsWall) and (not neIsWall):
graphicsDisplay.py(461):           if (not nIsWall) and (not wIsWall):
graphicsDisplay.py(464):           if (nIsWall) and (not wIsWall):
graphicsDisplay.py(467):           if (not nIsWall) and (wIsWall):
graphicsDisplay.py(469):             line(add(screen, (0, self.gridSize*(-1)*WALL_RADIUS)), add(screen, (self.gridSize*(-0.5)-1, self.gridSize*(-1)*WALL_RADIUS)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(470):           if (nIsWall) and (wIsWall) and (not nwIsWall):
graphicsDisplay.py(477):           if (not sIsWall) and (not eIsWall):
graphicsDisplay.py(480):           if (sIsWall) and (not eIsWall):
graphicsDisplay.py(483):           if (not sIsWall) and (eIsWall):
graphicsDisplay.py(486):           if (sIsWall) and (eIsWall) and (not seIsWall):
graphicsDisplay.py(493):           if (not sIsWall) and (not wIsWall):
graphicsDisplay.py(496):           if (sIsWall) and (not wIsWall):
graphicsDisplay.py(499):           if (not sIsWall) and (wIsWall):
graphicsDisplay.py(502):           if (sIsWall) and (wIsWall) and (not swIsWall):
graphicsDisplay.py(428):       for yNum, cell in enumerate(x):
graphicsDisplay.py(429):         if cell: # There's a wall here
graphicsDisplay.py(428):       for yNum, cell in enumerate(x):
graphicsDisplay.py(429):         if cell: # There's a wall here
graphicsDisplay.py(428):       for yNum, cell in enumerate(x):
graphicsDisplay.py(429):         if cell: # There's a wall here
graphicsDisplay.py(430):           pos = (xNum, yNum)
graphicsDisplay.py(431):           screen = self.to_screen(pos)
 --- modulename: graphicsDisplay, funcname: to_screen
graphicsDisplay.py(408):     ( x, y ) = point
graphicsDisplay.py(410):     x = (x + 1)*self.gridSize
graphicsDisplay.py(411):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(412):     return ( x, y )
graphicsDisplay.py(432):           screen2 = self.to_screen2(pos)
 --- modulename: graphicsDisplay, funcname: to_screen2
graphicsDisplay.py(416):     ( x, y ) = point
graphicsDisplay.py(418):     x = (x + 1)*self.gridSize
graphicsDisplay.py(419):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(420):     return ( x, y )
graphicsDisplay.py(435):           wIsWall = self.isWall(xNum-1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(436):           eIsWall = self.isWall(xNum+1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(437):           nIsWall = self.isWall(xNum, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(438):           sIsWall = self.isWall(xNum, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(439):           nwIsWall = self.isWall(xNum-1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(440):           swIsWall = self.isWall(xNum-1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(441):           neIsWall = self.isWall(xNum+1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(442):           seIsWall = self.isWall(xNum+1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(445):           if (not nIsWall) and (not eIsWall):
graphicsDisplay.py(447):             circle(screen2, WALL_RADIUS * self.gridSize, wallColor, wallColor, (0,91), 'arc')
 --- modulename: graphicsUtils, funcname: circle
graphicsUtils.py(176):     x, y = pos
graphicsUtils.py(177):     x0, x1 = x - r - 1, x + r
graphicsUtils.py(178):     y0, y1 = y - r - 1, y + r
graphicsUtils.py(179):     if endpoints == None:
graphicsUtils.py(182):       e = list(endpoints)
graphicsUtils.py(183):     while e[0] > e[1]: e[1] = e[1] + 360
graphicsUtils.py(185):     return _canvas.create_arc(x0, y0, x1, y1, outline=outlineColor, fill=fillColor,
graphicsUtils.py(186):                               extent=e[1] - e[0], start=e[0], style=style, width=width)
 --- modulename: Tkinter, funcname: create_arc
Tkinter.py(2254):         return self._create('arc', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(448):           if (nIsWall) and (not eIsWall):
graphicsDisplay.py(451):           if (not nIsWall) and (eIsWall):
graphicsDisplay.py(454):           if (nIsWall) and (eIsWall) and (not neIsWall):
graphicsDisplay.py(461):           if (not nIsWall) and (not wIsWall):
graphicsDisplay.py(464):           if (nIsWall) and (not wIsWall):
graphicsDisplay.py(467):           if (not nIsWall) and (wIsWall):
graphicsDisplay.py(469):             line(add(screen, (0, self.gridSize*(-1)*WALL_RADIUS)), add(screen, (self.gridSize*(-0.5)-1, self.gridSize*(-1)*WALL_RADIUS)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(470):           if (nIsWall) and (wIsWall) and (not nwIsWall):
graphicsDisplay.py(477):           if (not sIsWall) and (not eIsWall):
graphicsDisplay.py(479):             circle(screen2, WALL_RADIUS * self.gridSize, wallColor, wallColor, (270,361), 'arc')
 --- modulename: graphicsUtils, funcname: circle
graphicsUtils.py(176):     x, y = pos
graphicsUtils.py(177):     x0, x1 = x - r - 1, x + r
graphicsUtils.py(178):     y0, y1 = y - r - 1, y + r
graphicsUtils.py(179):     if endpoints == None:
graphicsUtils.py(182):       e = list(endpoints)
graphicsUtils.py(183):     while e[0] > e[1]: e[1] = e[1] + 360
graphicsUtils.py(185):     return _canvas.create_arc(x0, y0, x1, y1, outline=outlineColor, fill=fillColor,
graphicsUtils.py(186):                               extent=e[1] - e[0], start=e[0], style=style, width=width)
 --- modulename: Tkinter, funcname: create_arc
Tkinter.py(2254):         return self._create('arc', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(480):           if (sIsWall) and (not eIsWall):
graphicsDisplay.py(483):           if (not sIsWall) and (eIsWall):
graphicsDisplay.py(486):           if (sIsWall) and (eIsWall) and (not seIsWall):
graphicsDisplay.py(493):           if (not sIsWall) and (not wIsWall):
graphicsDisplay.py(496):           if (sIsWall) and (not wIsWall):
graphicsDisplay.py(499):           if (not sIsWall) and (wIsWall):
graphicsDisplay.py(501):             line(add(screen, (0, self.gridSize*(1)*WALL_RADIUS)), add(screen, (self.gridSize*(-0.5)-1, self.gridSize*(1)*WALL_RADIUS)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(502):           if (sIsWall) and (wIsWall) and (not swIsWall):
graphicsDisplay.py(428):       for yNum, cell in enumerate(x):
graphicsDisplay.py(429):         if cell: # There's a wall here
graphicsDisplay.py(428):       for yNum, cell in enumerate(x):
graphicsDisplay.py(429):         if cell: # There's a wall here
graphicsDisplay.py(430):           pos = (xNum, yNum)
graphicsDisplay.py(431):           screen = self.to_screen(pos)
 --- modulename: graphicsDisplay, funcname: to_screen
graphicsDisplay.py(408):     ( x, y ) = point
graphicsDisplay.py(410):     x = (x + 1)*self.gridSize
graphicsDisplay.py(411):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(412):     return ( x, y )
graphicsDisplay.py(432):           screen2 = self.to_screen2(pos)
 --- modulename: graphicsDisplay, funcname: to_screen2
graphicsDisplay.py(416):     ( x, y ) = point
graphicsDisplay.py(418):     x = (x + 1)*self.gridSize
graphicsDisplay.py(419):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(420):     return ( x, y )
graphicsDisplay.py(435):           wIsWall = self.isWall(xNum-1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(436):           eIsWall = self.isWall(xNum+1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(437):           nIsWall = self.isWall(xNum, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(512):       return False
graphicsDisplay.py(438):           sIsWall = self.isWall(xNum, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(439):           nwIsWall = self.isWall(xNum-1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(512):       return False
graphicsDisplay.py(440):           swIsWall = self.isWall(xNum-1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(441):           neIsWall = self.isWall(xNum+1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(512):       return False
graphicsDisplay.py(442):           seIsWall = self.isWall(xNum+1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(445):           if (not nIsWall) and (not eIsWall):
graphicsDisplay.py(448):           if (nIsWall) and (not eIsWall):
graphicsDisplay.py(451):           if (not nIsWall) and (eIsWall):
graphicsDisplay.py(453):             line(add(screen, (0, self.gridSize*(-1)*WALL_RADIUS)), add(screen, (self.gridSize*0.5+1, self.gridSize*(-1)*WALL_RADIUS)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(454):           if (nIsWall) and (eIsWall) and (not neIsWall):
graphicsDisplay.py(461):           if (not nIsWall) and (not wIsWall):
graphicsDisplay.py(464):           if (nIsWall) and (not wIsWall):
graphicsDisplay.py(467):           if (not nIsWall) and (wIsWall):
graphicsDisplay.py(469):             line(add(screen, (0, self.gridSize*(-1)*WALL_RADIUS)), add(screen, (self.gridSize*(-0.5)-1, self.gridSize*(-1)*WALL_RADIUS)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(470):           if (nIsWall) and (wIsWall) and (not nwIsWall):
graphicsDisplay.py(477):           if (not sIsWall) and (not eIsWall):
graphicsDisplay.py(480):           if (sIsWall) and (not eIsWall):
graphicsDisplay.py(483):           if (not sIsWall) and (eIsWall):
graphicsDisplay.py(485):             line(add(screen, (0, self.gridSize*(1)*WALL_RADIUS)), add(screen, (self.gridSize*0.5+1, self.gridSize*(1)*WALL_RADIUS)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(486):           if (sIsWall) and (eIsWall) and (not seIsWall):
graphicsDisplay.py(493):           if (not sIsWall) and (not wIsWall):
graphicsDisplay.py(496):           if (sIsWall) and (not wIsWall):
graphicsDisplay.py(499):           if (not sIsWall) and (wIsWall):
graphicsDisplay.py(501):             line(add(screen, (0, self.gridSize*(1)*WALL_RADIUS)), add(screen, (self.gridSize*(-0.5)-1, self.gridSize*(1)*WALL_RADIUS)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(502):           if (sIsWall) and (wIsWall) and (not swIsWall):
graphicsDisplay.py(428):       for yNum, cell in enumerate(x):
graphicsDisplay.py(424):     for xNum, x in enumerate(wallMatrix):
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(425):       if self.capture and (xNum * 2) < wallMatrix.width: wallColor = TEAM_COLORS[0]
graphicsDisplay.py(426):       if self.capture and (xNum * 2) >= wallMatrix.width: wallColor = TEAM_COLORS[1]
graphicsDisplay.py(428):       for yNum, cell in enumerate(x):
graphicsDisplay.py(429):         if cell: # There's a wall here
graphicsDisplay.py(430):           pos = (xNum, yNum)
graphicsDisplay.py(431):           screen = self.to_screen(pos)
 --- modulename: graphicsDisplay, funcname: to_screen
graphicsDisplay.py(408):     ( x, y ) = point
graphicsDisplay.py(410):     x = (x + 1)*self.gridSize
graphicsDisplay.py(411):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(412):     return ( x, y )
graphicsDisplay.py(432):           screen2 = self.to_screen2(pos)
 --- modulename: graphicsDisplay, funcname: to_screen2
graphicsDisplay.py(416):     ( x, y ) = point
graphicsDisplay.py(418):     x = (x + 1)*self.gridSize
graphicsDisplay.py(419):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(420):     return ( x, y )
graphicsDisplay.py(435):           wIsWall = self.isWall(xNum-1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(436):           eIsWall = self.isWall(xNum+1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(437):           nIsWall = self.isWall(xNum, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(438):           sIsWall = self.isWall(xNum, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(510):       return False
graphicsDisplay.py(439):           nwIsWall = self.isWall(xNum-1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(440):           swIsWall = self.isWall(xNum-1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(510):       return False
graphicsDisplay.py(441):           neIsWall = self.isWall(xNum+1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(442):           seIsWall = self.isWall(xNum+1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(510):       return False
graphicsDisplay.py(445):           if (not nIsWall) and (not eIsWall):
graphicsDisplay.py(448):           if (nIsWall) and (not eIsWall):
graphicsDisplay.py(451):           if (not nIsWall) and (eIsWall):
graphicsDisplay.py(454):           if (nIsWall) and (eIsWall) and (not neIsWall):
graphicsDisplay.py(461):           if (not nIsWall) and (not wIsWall):
graphicsDisplay.py(464):           if (nIsWall) and (not wIsWall):
graphicsDisplay.py(467):           if (not nIsWall) and (wIsWall):
graphicsDisplay.py(470):           if (nIsWall) and (wIsWall) and (not nwIsWall):
graphicsDisplay.py(477):           if (not sIsWall) and (not eIsWall):
graphicsDisplay.py(480):           if (sIsWall) and (not eIsWall):
graphicsDisplay.py(483):           if (not sIsWall) and (eIsWall):
graphicsDisplay.py(485):             line(add(screen, (0, self.gridSize*(1)*WALL_RADIUS)), add(screen, (self.gridSize*0.5+1, self.gridSize*(1)*WALL_RADIUS)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(486):           if (sIsWall) and (eIsWall) and (not seIsWall):
graphicsDisplay.py(493):           if (not sIsWall) and (not wIsWall):
graphicsDisplay.py(496):           if (sIsWall) and (not wIsWall):
graphicsDisplay.py(499):           if (not sIsWall) and (wIsWall):
graphicsDisplay.py(501):             line(add(screen, (0, self.gridSize*(1)*WALL_RADIUS)), add(screen, (self.gridSize*(-0.5)-1, self.gridSize*(1)*WALL_RADIUS)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(502):           if (sIsWall) and (wIsWall) and (not swIsWall):
graphicsDisplay.py(428):       for yNum, cell in enumerate(x):
graphicsDisplay.py(429):         if cell: # There's a wall here
graphicsDisplay.py(430):           pos = (xNum, yNum)
graphicsDisplay.py(431):           screen = self.to_screen(pos)
 --- modulename: graphicsDisplay, funcname: to_screen
graphicsDisplay.py(408):     ( x, y ) = point
graphicsDisplay.py(410):     x = (x + 1)*self.gridSize
graphicsDisplay.py(411):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(412):     return ( x, y )
graphicsDisplay.py(432):           screen2 = self.to_screen2(pos)
 --- modulename: graphicsDisplay, funcname: to_screen2
graphicsDisplay.py(416):     ( x, y ) = point
graphicsDisplay.py(418):     x = (x + 1)*self.gridSize
graphicsDisplay.py(419):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(420):     return ( x, y )
graphicsDisplay.py(435):           wIsWall = self.isWall(xNum-1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(436):           eIsWall = self.isWall(xNum+1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(437):           nIsWall = self.isWall(xNum, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(438):           sIsWall = self.isWall(xNum, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(439):           nwIsWall = self.isWall(xNum-1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(440):           swIsWall = self.isWall(xNum-1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(441):           neIsWall = self.isWall(xNum+1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(442):           seIsWall = self.isWall(xNum+1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(445):           if (not nIsWall) and (not eIsWall):
graphicsDisplay.py(448):           if (nIsWall) and (not eIsWall):
graphicsDisplay.py(451):           if (not nIsWall) and (eIsWall):
graphicsDisplay.py(454):           if (nIsWall) and (eIsWall) and (not neIsWall):
graphicsDisplay.py(461):           if (not nIsWall) and (not wIsWall):
graphicsDisplay.py(464):           if (nIsWall) and (not wIsWall):
graphicsDisplay.py(467):           if (not nIsWall) and (wIsWall):
graphicsDisplay.py(470):           if (nIsWall) and (wIsWall) and (not nwIsWall):
graphicsDisplay.py(472):             circle(add(screen2, (self.gridSize*(-2)*WALL_RADIUS, self.gridSize*(-2)*WALL_RADIUS)), WALL_RADIUS * self.gridSize-1, wallColor, wallColor, (270,361), 'arc')
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: circle
graphicsUtils.py(176):     x, y = pos
graphicsUtils.py(177):     x0, x1 = x - r - 1, x + r
graphicsUtils.py(178):     y0, y1 = y - r - 1, y + r
graphicsUtils.py(179):     if endpoints == None:
graphicsUtils.py(182):       e = list(endpoints)
graphicsUtils.py(183):     while e[0] > e[1]: e[1] = e[1] + 360
graphicsUtils.py(185):     return _canvas.create_arc(x0, y0, x1, y1, outline=outlineColor, fill=fillColor,
graphicsUtils.py(186):                               extent=e[1] - e[0], start=e[0], style=style, width=width)
 --- modulename: Tkinter, funcname: create_arc
Tkinter.py(2254):         return self._create('arc', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(473):             line(add(screen, (self.gridSize*(-2)*WALL_RADIUS+1, self.gridSize*(-1)*WALL_RADIUS)), add(screen, (self.gridSize*(-0.5), self.gridSize*(-1)*WALL_RADIUS)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(474):             line(add(screen, (self.gridSize*(-1)*WALL_RADIUS, self.gridSize*(-2)*WALL_RADIUS+1)), add(screen, (self.gridSize*(-1)*WALL_RADIUS, self.gridSize*(-0.5))), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(477):           if (not sIsWall) and (not eIsWall):
graphicsDisplay.py(480):           if (sIsWall) and (not eIsWall):
graphicsDisplay.py(483):           if (not sIsWall) and (eIsWall):
graphicsDisplay.py(486):           if (sIsWall) and (eIsWall) and (not seIsWall):
graphicsDisplay.py(493):           if (not sIsWall) and (not wIsWall):
graphicsDisplay.py(496):           if (sIsWall) and (not wIsWall):
graphicsDisplay.py(499):           if (not sIsWall) and (wIsWall):
graphicsDisplay.py(502):           if (sIsWall) and (wIsWall) and (not swIsWall):
graphicsDisplay.py(428):       for yNum, cell in enumerate(x):
graphicsDisplay.py(429):         if cell: # There's a wall here
graphicsDisplay.py(430):           pos = (xNum, yNum)
graphicsDisplay.py(431):           screen = self.to_screen(pos)
 --- modulename: graphicsDisplay, funcname: to_screen
graphicsDisplay.py(408):     ( x, y ) = point
graphicsDisplay.py(410):     x = (x + 1)*self.gridSize
graphicsDisplay.py(411):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(412):     return ( x, y )
graphicsDisplay.py(432):           screen2 = self.to_screen2(pos)
 --- modulename: graphicsDisplay, funcname: to_screen2
graphicsDisplay.py(416):     ( x, y ) = point
graphicsDisplay.py(418):     x = (x + 1)*self.gridSize
graphicsDisplay.py(419):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(420):     return ( x, y )
graphicsDisplay.py(435):           wIsWall = self.isWall(xNum-1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(436):           eIsWall = self.isWall(xNum+1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(437):           nIsWall = self.isWall(xNum, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(438):           sIsWall = self.isWall(xNum, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(439):           nwIsWall = self.isWall(xNum-1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(440):           swIsWall = self.isWall(xNum-1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(441):           neIsWall = self.isWall(xNum+1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(442):           seIsWall = self.isWall(xNum+1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(445):           if (not nIsWall) and (not eIsWall):
graphicsDisplay.py(448):           if (nIsWall) and (not eIsWall):
graphicsDisplay.py(451):           if (not nIsWall) and (eIsWall):
graphicsDisplay.py(453):             line(add(screen, (0, self.gridSize*(-1)*WALL_RADIUS)), add(screen, (self.gridSize*0.5+1, self.gridSize*(-1)*WALL_RADIUS)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(454):           if (nIsWall) and (eIsWall) and (not neIsWall):
graphicsDisplay.py(461):           if (not nIsWall) and (not wIsWall):
graphicsDisplay.py(463):             circle(screen2, WALL_RADIUS * self.gridSize, wallColor, wallColor, (90,181), 'arc')
 --- modulename: graphicsUtils, funcname: circle
graphicsUtils.py(176):     x, y = pos
graphicsUtils.py(177):     x0, x1 = x - r - 1, x + r
graphicsUtils.py(178):     y0, y1 = y - r - 1, y + r
graphicsUtils.py(179):     if endpoints == None:
graphicsUtils.py(182):       e = list(endpoints)
graphicsUtils.py(183):     while e[0] > e[1]: e[1] = e[1] + 360
graphicsUtils.py(185):     return _canvas.create_arc(x0, y0, x1, y1, outline=outlineColor, fill=fillColor,
graphicsUtils.py(186):                               extent=e[1] - e[0], start=e[0], style=style, width=width)
 --- modulename: Tkinter, funcname: create_arc
Tkinter.py(2254):         return self._create('arc', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(464):           if (nIsWall) and (not wIsWall):
graphicsDisplay.py(467):           if (not nIsWall) and (wIsWall):
graphicsDisplay.py(470):           if (nIsWall) and (wIsWall) and (not nwIsWall):
graphicsDisplay.py(477):           if (not sIsWall) and (not eIsWall):
graphicsDisplay.py(480):           if (sIsWall) and (not eIsWall):
graphicsDisplay.py(483):           if (not sIsWall) and (eIsWall):
graphicsDisplay.py(486):           if (sIsWall) and (eIsWall) and (not seIsWall):
graphicsDisplay.py(493):           if (not sIsWall) and (not wIsWall):
graphicsDisplay.py(496):           if (sIsWall) and (not wIsWall):
graphicsDisplay.py(498):             line(add(screen, (self.gridSize*(-1)*WALL_RADIUS, 0)), add(screen, (self.gridSize*(-1)*WALL_RADIUS, self.gridSize*(0.5)+1)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(499):           if (not sIsWall) and (wIsWall):
graphicsDisplay.py(502):           if (sIsWall) and (wIsWall) and (not swIsWall):
graphicsDisplay.py(428):       for yNum, cell in enumerate(x):
graphicsDisplay.py(429):         if cell: # There's a wall here
graphicsDisplay.py(428):       for yNum, cell in enumerate(x):
graphicsDisplay.py(429):         if cell: # There's a wall here
graphicsDisplay.py(428):       for yNum, cell in enumerate(x):
graphicsDisplay.py(429):         if cell: # There's a wall here
graphicsDisplay.py(428):       for yNum, cell in enumerate(x):
graphicsDisplay.py(429):         if cell: # There's a wall here
graphicsDisplay.py(430):           pos = (xNum, yNum)
graphicsDisplay.py(431):           screen = self.to_screen(pos)
 --- modulename: graphicsDisplay, funcname: to_screen
graphicsDisplay.py(408):     ( x, y ) = point
graphicsDisplay.py(410):     x = (x + 1)*self.gridSize
graphicsDisplay.py(411):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(412):     return ( x, y )
graphicsDisplay.py(432):           screen2 = self.to_screen2(pos)
 --- modulename: graphicsDisplay, funcname: to_screen2
graphicsDisplay.py(416):     ( x, y ) = point
graphicsDisplay.py(418):     x = (x + 1)*self.gridSize
graphicsDisplay.py(419):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(420):     return ( x, y )
graphicsDisplay.py(435):           wIsWall = self.isWall(xNum-1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(436):           eIsWall = self.isWall(xNum+1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(437):           nIsWall = self.isWall(xNum, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(512):       return False
graphicsDisplay.py(438):           sIsWall = self.isWall(xNum, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(439):           nwIsWall = self.isWall(xNum-1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(512):       return False
graphicsDisplay.py(440):           swIsWall = self.isWall(xNum-1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(441):           neIsWall = self.isWall(xNum+1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(512):       return False
graphicsDisplay.py(442):           seIsWall = self.isWall(xNum+1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(445):           if (not nIsWall) and (not eIsWall):
graphicsDisplay.py(448):           if (nIsWall) and (not eIsWall):
graphicsDisplay.py(451):           if (not nIsWall) and (eIsWall):
graphicsDisplay.py(453):             line(add(screen, (0, self.gridSize*(-1)*WALL_RADIUS)), add(screen, (self.gridSize*0.5+1, self.gridSize*(-1)*WALL_RADIUS)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(454):           if (nIsWall) and (eIsWall) and (not neIsWall):
graphicsDisplay.py(461):           if (not nIsWall) and (not wIsWall):
graphicsDisplay.py(464):           if (nIsWall) and (not wIsWall):
graphicsDisplay.py(467):           if (not nIsWall) and (wIsWall):
graphicsDisplay.py(469):             line(add(screen, (0, self.gridSize*(-1)*WALL_RADIUS)), add(screen, (self.gridSize*(-0.5)-1, self.gridSize*(-1)*WALL_RADIUS)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(470):           if (nIsWall) and (wIsWall) and (not nwIsWall):
graphicsDisplay.py(477):           if (not sIsWall) and (not eIsWall):
graphicsDisplay.py(480):           if (sIsWall) and (not eIsWall):
graphicsDisplay.py(483):           if (not sIsWall) and (eIsWall):
graphicsDisplay.py(485):             line(add(screen, (0, self.gridSize*(1)*WALL_RADIUS)), add(screen, (self.gridSize*0.5+1, self.gridSize*(1)*WALL_RADIUS)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(486):           if (sIsWall) and (eIsWall) and (not seIsWall):
graphicsDisplay.py(493):           if (not sIsWall) and (not wIsWall):
graphicsDisplay.py(496):           if (sIsWall) and (not wIsWall):
graphicsDisplay.py(499):           if (not sIsWall) and (wIsWall):
graphicsDisplay.py(501):             line(add(screen, (0, self.gridSize*(1)*WALL_RADIUS)), add(screen, (self.gridSize*(-0.5)-1, self.gridSize*(1)*WALL_RADIUS)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(502):           if (sIsWall) and (wIsWall) and (not swIsWall):
graphicsDisplay.py(428):       for yNum, cell in enumerate(x):
graphicsDisplay.py(424):     for xNum, x in enumerate(wallMatrix):
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(425):       if self.capture and (xNum * 2) < wallMatrix.width: wallColor = TEAM_COLORS[0]
graphicsDisplay.py(426):       if self.capture and (xNum * 2) >= wallMatrix.width: wallColor = TEAM_COLORS[1]
graphicsDisplay.py(428):       for yNum, cell in enumerate(x):
graphicsDisplay.py(429):         if cell: # There's a wall here
graphicsDisplay.py(430):           pos = (xNum, yNum)
graphicsDisplay.py(431):           screen = self.to_screen(pos)
 --- modulename: graphicsDisplay, funcname: to_screen
graphicsDisplay.py(408):     ( x, y ) = point
graphicsDisplay.py(410):     x = (x + 1)*self.gridSize
graphicsDisplay.py(411):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(412):     return ( x, y )
graphicsDisplay.py(432):           screen2 = self.to_screen2(pos)
 --- modulename: graphicsDisplay, funcname: to_screen2
graphicsDisplay.py(416):     ( x, y ) = point
graphicsDisplay.py(418):     x = (x + 1)*self.gridSize
graphicsDisplay.py(419):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(420):     return ( x, y )
graphicsDisplay.py(435):           wIsWall = self.isWall(xNum-1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(436):           eIsWall = self.isWall(xNum+1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(512):       return False
graphicsDisplay.py(437):           nIsWall = self.isWall(xNum, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(438):           sIsWall = self.isWall(xNum, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(510):       return False
graphicsDisplay.py(439):           nwIsWall = self.isWall(xNum-1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(440):           swIsWall = self.isWall(xNum-1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(510):       return False
graphicsDisplay.py(441):           neIsWall = self.isWall(xNum+1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(512):       return False
graphicsDisplay.py(442):           seIsWall = self.isWall(xNum+1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(510):       return False
graphicsDisplay.py(445):           if (not nIsWall) and (not eIsWall):
graphicsDisplay.py(448):           if (nIsWall) and (not eIsWall):
graphicsDisplay.py(450):             line(add(screen, (self.gridSize*WALL_RADIUS, 0)), add(screen, (self.gridSize*WALL_RADIUS, self.gridSize*(-0.5)-1)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(451):           if (not nIsWall) and (eIsWall):
graphicsDisplay.py(454):           if (nIsWall) and (eIsWall) and (not neIsWall):
graphicsDisplay.py(461):           if (not nIsWall) and (not wIsWall):
graphicsDisplay.py(464):           if (nIsWall) and (not wIsWall):
graphicsDisplay.py(467):           if (not nIsWall) and (wIsWall):
graphicsDisplay.py(470):           if (nIsWall) and (wIsWall) and (not nwIsWall):
graphicsDisplay.py(477):           if (not sIsWall) and (not eIsWall):
graphicsDisplay.py(479):             circle(screen2, WALL_RADIUS * self.gridSize, wallColor, wallColor, (270,361), 'arc')
 --- modulename: graphicsUtils, funcname: circle
graphicsUtils.py(176):     x, y = pos
graphicsUtils.py(177):     x0, x1 = x - r - 1, x + r
graphicsUtils.py(178):     y0, y1 = y - r - 1, y + r
graphicsUtils.py(179):     if endpoints == None:
graphicsUtils.py(182):       e = list(endpoints)
graphicsUtils.py(183):     while e[0] > e[1]: e[1] = e[1] + 360
graphicsUtils.py(185):     return _canvas.create_arc(x0, y0, x1, y1, outline=outlineColor, fill=fillColor,
graphicsUtils.py(186):                               extent=e[1] - e[0], start=e[0], style=style, width=width)
 --- modulename: Tkinter, funcname: create_arc
Tkinter.py(2254):         return self._create('arc', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(480):           if (sIsWall) and (not eIsWall):
graphicsDisplay.py(483):           if (not sIsWall) and (eIsWall):
graphicsDisplay.py(486):           if (sIsWall) and (eIsWall) and (not seIsWall):
graphicsDisplay.py(493):           if (not sIsWall) and (not wIsWall):
graphicsDisplay.py(496):           if (sIsWall) and (not wIsWall):
graphicsDisplay.py(499):           if (not sIsWall) and (wIsWall):
graphicsDisplay.py(501):             line(add(screen, (0, self.gridSize*(1)*WALL_RADIUS)), add(screen, (self.gridSize*(-0.5)-1, self.gridSize*(1)*WALL_RADIUS)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(502):           if (sIsWall) and (wIsWall) and (not swIsWall):
graphicsDisplay.py(428):       for yNum, cell in enumerate(x):
graphicsDisplay.py(429):         if cell: # There's a wall here
graphicsDisplay.py(430):           pos = (xNum, yNum)
graphicsDisplay.py(431):           screen = self.to_screen(pos)
 --- modulename: graphicsDisplay, funcname: to_screen
graphicsDisplay.py(408):     ( x, y ) = point
graphicsDisplay.py(410):     x = (x + 1)*self.gridSize
graphicsDisplay.py(411):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(412):     return ( x, y )
graphicsDisplay.py(432):           screen2 = self.to_screen2(pos)
 --- modulename: graphicsDisplay, funcname: to_screen2
graphicsDisplay.py(416):     ( x, y ) = point
graphicsDisplay.py(418):     x = (x + 1)*self.gridSize
graphicsDisplay.py(419):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(420):     return ( x, y )
graphicsDisplay.py(435):           wIsWall = self.isWall(xNum-1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(436):           eIsWall = self.isWall(xNum+1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(512):       return False
graphicsDisplay.py(437):           nIsWall = self.isWall(xNum, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(438):           sIsWall = self.isWall(xNum, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(439):           nwIsWall = self.isWall(xNum-1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(440):           swIsWall = self.isWall(xNum-1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(441):           neIsWall = self.isWall(xNum+1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(512):       return False
graphicsDisplay.py(442):           seIsWall = self.isWall(xNum+1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(512):       return False
graphicsDisplay.py(445):           if (not nIsWall) and (not eIsWall):
graphicsDisplay.py(448):           if (nIsWall) and (not eIsWall):
graphicsDisplay.py(450):             line(add(screen, (self.gridSize*WALL_RADIUS, 0)), add(screen, (self.gridSize*WALL_RADIUS, self.gridSize*(-0.5)-1)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(451):           if (not nIsWall) and (eIsWall):
graphicsDisplay.py(454):           if (nIsWall) and (eIsWall) and (not neIsWall):
graphicsDisplay.py(461):           if (not nIsWall) and (not wIsWall):
graphicsDisplay.py(464):           if (nIsWall) and (not wIsWall):
graphicsDisplay.py(467):           if (not nIsWall) and (wIsWall):
graphicsDisplay.py(470):           if (nIsWall) and (wIsWall) and (not nwIsWall):
graphicsDisplay.py(477):           if (not sIsWall) and (not eIsWall):
graphicsDisplay.py(480):           if (sIsWall) and (not eIsWall):
graphicsDisplay.py(482):             line(add(screen, (self.gridSize*WALL_RADIUS, 0)), add(screen, (self.gridSize*WALL_RADIUS, self.gridSize*(0.5)+1)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(483):           if (not sIsWall) and (eIsWall):
graphicsDisplay.py(486):           if (sIsWall) and (eIsWall) and (not seIsWall):
graphicsDisplay.py(493):           if (not sIsWall) and (not wIsWall):
graphicsDisplay.py(496):           if (sIsWall) and (not wIsWall):
graphicsDisplay.py(499):           if (not sIsWall) and (wIsWall):
graphicsDisplay.py(502):           if (sIsWall) and (wIsWall) and (not swIsWall):
graphicsDisplay.py(428):       for yNum, cell in enumerate(x):
graphicsDisplay.py(429):         if cell: # There's a wall here
graphicsDisplay.py(430):           pos = (xNum, yNum)
graphicsDisplay.py(431):           screen = self.to_screen(pos)
 --- modulename: graphicsDisplay, funcname: to_screen
graphicsDisplay.py(408):     ( x, y ) = point
graphicsDisplay.py(410):     x = (x + 1)*self.gridSize
graphicsDisplay.py(411):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(412):     return ( x, y )
graphicsDisplay.py(432):           screen2 = self.to_screen2(pos)
 --- modulename: graphicsDisplay, funcname: to_screen2
graphicsDisplay.py(416):     ( x, y ) = point
graphicsDisplay.py(418):     x = (x + 1)*self.gridSize
graphicsDisplay.py(419):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(420):     return ( x, y )
graphicsDisplay.py(435):           wIsWall = self.isWall(xNum-1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(436):           eIsWall = self.isWall(xNum+1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(512):       return False
graphicsDisplay.py(437):           nIsWall = self.isWall(xNum, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(438):           sIsWall = self.isWall(xNum, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(439):           nwIsWall = self.isWall(xNum-1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(440):           swIsWall = self.isWall(xNum-1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(441):           neIsWall = self.isWall(xNum+1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(512):       return False
graphicsDisplay.py(442):           seIsWall = self.isWall(xNum+1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(512):       return False
graphicsDisplay.py(445):           if (not nIsWall) and (not eIsWall):
graphicsDisplay.py(448):           if (nIsWall) and (not eIsWall):
graphicsDisplay.py(450):             line(add(screen, (self.gridSize*WALL_RADIUS, 0)), add(screen, (self.gridSize*WALL_RADIUS, self.gridSize*(-0.5)-1)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(451):           if (not nIsWall) and (eIsWall):
graphicsDisplay.py(454):           if (nIsWall) and (eIsWall) and (not neIsWall):
graphicsDisplay.py(461):           if (not nIsWall) and (not wIsWall):
graphicsDisplay.py(464):           if (nIsWall) and (not wIsWall):
graphicsDisplay.py(467):           if (not nIsWall) and (wIsWall):
graphicsDisplay.py(470):           if (nIsWall) and (wIsWall) and (not nwIsWall):
graphicsDisplay.py(472):             circle(add(screen2, (self.gridSize*(-2)*WALL_RADIUS, self.gridSize*(-2)*WALL_RADIUS)), WALL_RADIUS * self.gridSize-1, wallColor, wallColor, (270,361), 'arc')
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: circle
graphicsUtils.py(176):     x, y = pos
graphicsUtils.py(177):     x0, x1 = x - r - 1, x + r
graphicsUtils.py(178):     y0, y1 = y - r - 1, y + r
graphicsUtils.py(179):     if endpoints == None:
graphicsUtils.py(182):       e = list(endpoints)
graphicsUtils.py(183):     while e[0] > e[1]: e[1] = e[1] + 360
graphicsUtils.py(185):     return _canvas.create_arc(x0, y0, x1, y1, outline=outlineColor, fill=fillColor,
graphicsUtils.py(186):                               extent=e[1] - e[0], start=e[0], style=style, width=width)
 --- modulename: Tkinter, funcname: create_arc
Tkinter.py(2254):         return self._create('arc', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(473):             line(add(screen, (self.gridSize*(-2)*WALL_RADIUS+1, self.gridSize*(-1)*WALL_RADIUS)), add(screen, (self.gridSize*(-0.5), self.gridSize*(-1)*WALL_RADIUS)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(474):             line(add(screen, (self.gridSize*(-1)*WALL_RADIUS, self.gridSize*(-2)*WALL_RADIUS+1)), add(screen, (self.gridSize*(-1)*WALL_RADIUS, self.gridSize*(-0.5))), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(477):           if (not sIsWall) and (not eIsWall):
graphicsDisplay.py(480):           if (sIsWall) and (not eIsWall):
graphicsDisplay.py(482):             line(add(screen, (self.gridSize*WALL_RADIUS, 0)), add(screen, (self.gridSize*WALL_RADIUS, self.gridSize*(0.5)+1)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(483):           if (not sIsWall) and (eIsWall):
graphicsDisplay.py(486):           if (sIsWall) and (eIsWall) and (not seIsWall):
graphicsDisplay.py(493):           if (not sIsWall) and (not wIsWall):
graphicsDisplay.py(496):           if (sIsWall) and (not wIsWall):
graphicsDisplay.py(499):           if (not sIsWall) and (wIsWall):
graphicsDisplay.py(502):           if (sIsWall) and (wIsWall) and (not swIsWall):
graphicsDisplay.py(428):       for yNum, cell in enumerate(x):
graphicsDisplay.py(429):         if cell: # There's a wall here
graphicsDisplay.py(430):           pos = (xNum, yNum)
graphicsDisplay.py(431):           screen = self.to_screen(pos)
 --- modulename: graphicsDisplay, funcname: to_screen
graphicsDisplay.py(408):     ( x, y ) = point
graphicsDisplay.py(410):     x = (x + 1)*self.gridSize
graphicsDisplay.py(411):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(412):     return ( x, y )
graphicsDisplay.py(432):           screen2 = self.to_screen2(pos)
 --- modulename: graphicsDisplay, funcname: to_screen2
graphicsDisplay.py(416):     ( x, y ) = point
graphicsDisplay.py(418):     x = (x + 1)*self.gridSize
graphicsDisplay.py(419):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(420):     return ( x, y )
graphicsDisplay.py(435):           wIsWall = self.isWall(xNum-1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(436):           eIsWall = self.isWall(xNum+1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(512):       return False
graphicsDisplay.py(437):           nIsWall = self.isWall(xNum, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(438):           sIsWall = self.isWall(xNum, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(439):           nwIsWall = self.isWall(xNum-1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(440):           swIsWall = self.isWall(xNum-1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(441):           neIsWall = self.isWall(xNum+1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(512):       return False
graphicsDisplay.py(442):           seIsWall = self.isWall(xNum+1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(512):       return False
graphicsDisplay.py(445):           if (not nIsWall) and (not eIsWall):
graphicsDisplay.py(448):           if (nIsWall) and (not eIsWall):
graphicsDisplay.py(450):             line(add(screen, (self.gridSize*WALL_RADIUS, 0)), add(screen, (self.gridSize*WALL_RADIUS, self.gridSize*(-0.5)-1)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(451):           if (not nIsWall) and (eIsWall):
graphicsDisplay.py(454):           if (nIsWall) and (eIsWall) and (not neIsWall):
graphicsDisplay.py(461):           if (not nIsWall) and (not wIsWall):
graphicsDisplay.py(464):           if (nIsWall) and (not wIsWall):
graphicsDisplay.py(466):             line(add(screen, (self.gridSize*(-1)*WALL_RADIUS, 0)), add(screen, (self.gridSize*(-1)*WALL_RADIUS, self.gridSize*(-0.5)-1)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(467):           if (not nIsWall) and (wIsWall):
graphicsDisplay.py(470):           if (nIsWall) and (wIsWall) and (not nwIsWall):
graphicsDisplay.py(477):           if (not sIsWall) and (not eIsWall):
graphicsDisplay.py(480):           if (sIsWall) and (not eIsWall):
graphicsDisplay.py(482):             line(add(screen, (self.gridSize*WALL_RADIUS, 0)), add(screen, (self.gridSize*WALL_RADIUS, self.gridSize*(0.5)+1)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(483):           if (not sIsWall) and (eIsWall):
graphicsDisplay.py(486):           if (sIsWall) and (eIsWall) and (not seIsWall):
graphicsDisplay.py(493):           if (not sIsWall) and (not wIsWall):
graphicsDisplay.py(496):           if (sIsWall) and (not wIsWall):
graphicsDisplay.py(498):             line(add(screen, (self.gridSize*(-1)*WALL_RADIUS, 0)), add(screen, (self.gridSize*(-1)*WALL_RADIUS, self.gridSize*(0.5)+1)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(499):           if (not sIsWall) and (wIsWall):
graphicsDisplay.py(502):           if (sIsWall) and (wIsWall) and (not swIsWall):
graphicsDisplay.py(428):       for yNum, cell in enumerate(x):
graphicsDisplay.py(429):         if cell: # There's a wall here
graphicsDisplay.py(430):           pos = (xNum, yNum)
graphicsDisplay.py(431):           screen = self.to_screen(pos)
 --- modulename: graphicsDisplay, funcname: to_screen
graphicsDisplay.py(408):     ( x, y ) = point
graphicsDisplay.py(410):     x = (x + 1)*self.gridSize
graphicsDisplay.py(411):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(412):     return ( x, y )
graphicsDisplay.py(432):           screen2 = self.to_screen2(pos)
 --- modulename: graphicsDisplay, funcname: to_screen2
graphicsDisplay.py(416):     ( x, y ) = point
graphicsDisplay.py(418):     x = (x + 1)*self.gridSize
graphicsDisplay.py(419):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(420):     return ( x, y )
graphicsDisplay.py(435):           wIsWall = self.isWall(xNum-1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(436):           eIsWall = self.isWall(xNum+1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(512):       return False
graphicsDisplay.py(437):           nIsWall = self.isWall(xNum, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(438):           sIsWall = self.isWall(xNum, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(439):           nwIsWall = self.isWall(xNum-1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(440):           swIsWall = self.isWall(xNum-1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(441):           neIsWall = self.isWall(xNum+1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(512):       return False
graphicsDisplay.py(442):           seIsWall = self.isWall(xNum+1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(512):       return False
graphicsDisplay.py(445):           if (not nIsWall) and (not eIsWall):
graphicsDisplay.py(448):           if (nIsWall) and (not eIsWall):
graphicsDisplay.py(450):             line(add(screen, (self.gridSize*WALL_RADIUS, 0)), add(screen, (self.gridSize*WALL_RADIUS, self.gridSize*(-0.5)-1)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(451):           if (not nIsWall) and (eIsWall):
graphicsDisplay.py(454):           if (nIsWall) and (eIsWall) and (not neIsWall):
graphicsDisplay.py(461):           if (not nIsWall) and (not wIsWall):
graphicsDisplay.py(464):           if (nIsWall) and (not wIsWall):
graphicsDisplay.py(466):             line(add(screen, (self.gridSize*(-1)*WALL_RADIUS, 0)), add(screen, (self.gridSize*(-1)*WALL_RADIUS, self.gridSize*(-0.5)-1)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(467):           if (not nIsWall) and (wIsWall):
graphicsDisplay.py(470):           if (nIsWall) and (wIsWall) and (not nwIsWall):
graphicsDisplay.py(477):           if (not sIsWall) and (not eIsWall):
graphicsDisplay.py(480):           if (sIsWall) and (not eIsWall):
graphicsDisplay.py(482):             line(add(screen, (self.gridSize*WALL_RADIUS, 0)), add(screen, (self.gridSize*WALL_RADIUS, self.gridSize*(0.5)+1)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(483):           if (not sIsWall) and (eIsWall):
graphicsDisplay.py(486):           if (sIsWall) and (eIsWall) and (not seIsWall):
graphicsDisplay.py(493):           if (not sIsWall) and (not wIsWall):
graphicsDisplay.py(496):           if (sIsWall) and (not wIsWall):
graphicsDisplay.py(498):             line(add(screen, (self.gridSize*(-1)*WALL_RADIUS, 0)), add(screen, (self.gridSize*(-1)*WALL_RADIUS, self.gridSize*(0.5)+1)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(499):           if (not sIsWall) and (wIsWall):
graphicsDisplay.py(502):           if (sIsWall) and (wIsWall) and (not swIsWall):
graphicsDisplay.py(428):       for yNum, cell in enumerate(x):
graphicsDisplay.py(429):         if cell: # There's a wall here
graphicsDisplay.py(430):           pos = (xNum, yNum)
graphicsDisplay.py(431):           screen = self.to_screen(pos)
 --- modulename: graphicsDisplay, funcname: to_screen
graphicsDisplay.py(408):     ( x, y ) = point
graphicsDisplay.py(410):     x = (x + 1)*self.gridSize
graphicsDisplay.py(411):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(412):     return ( x, y )
graphicsDisplay.py(432):           screen2 = self.to_screen2(pos)
 --- modulename: graphicsDisplay, funcname: to_screen2
graphicsDisplay.py(416):     ( x, y ) = point
graphicsDisplay.py(418):     x = (x + 1)*self.gridSize
graphicsDisplay.py(419):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(420):     return ( x, y )
graphicsDisplay.py(435):           wIsWall = self.isWall(xNum-1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(436):           eIsWall = self.isWall(xNum+1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(512):       return False
graphicsDisplay.py(437):           nIsWall = self.isWall(xNum, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(438):           sIsWall = self.isWall(xNum, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(439):           nwIsWall = self.isWall(xNum-1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(440):           swIsWall = self.isWall(xNum-1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(441):           neIsWall = self.isWall(xNum+1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(512):       return False
graphicsDisplay.py(442):           seIsWall = self.isWall(xNum+1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(512):       return False
graphicsDisplay.py(445):           if (not nIsWall) and (not eIsWall):
graphicsDisplay.py(448):           if (nIsWall) and (not eIsWall):
graphicsDisplay.py(450):             line(add(screen, (self.gridSize*WALL_RADIUS, 0)), add(screen, (self.gridSize*WALL_RADIUS, self.gridSize*(-0.5)-1)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(451):           if (not nIsWall) and (eIsWall):
graphicsDisplay.py(454):           if (nIsWall) and (eIsWall) and (not neIsWall):
graphicsDisplay.py(461):           if (not nIsWall) and (not wIsWall):
graphicsDisplay.py(464):           if (nIsWall) and (not wIsWall):
graphicsDisplay.py(466):             line(add(screen, (self.gridSize*(-1)*WALL_RADIUS, 0)), add(screen, (self.gridSize*(-1)*WALL_RADIUS, self.gridSize*(-0.5)-1)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(467):           if (not nIsWall) and (wIsWall):
graphicsDisplay.py(470):           if (nIsWall) and (wIsWall) and (not nwIsWall):
graphicsDisplay.py(477):           if (not sIsWall) and (not eIsWall):
graphicsDisplay.py(480):           if (sIsWall) and (not eIsWall):
graphicsDisplay.py(482):             line(add(screen, (self.gridSize*WALL_RADIUS, 0)), add(screen, (self.gridSize*WALL_RADIUS, self.gridSize*(0.5)+1)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(483):           if (not sIsWall) and (eIsWall):
graphicsDisplay.py(486):           if (sIsWall) and (eIsWall) and (not seIsWall):
graphicsDisplay.py(493):           if (not sIsWall) and (not wIsWall):
graphicsDisplay.py(496):           if (sIsWall) and (not wIsWall):
graphicsDisplay.py(498):             line(add(screen, (self.gridSize*(-1)*WALL_RADIUS, 0)), add(screen, (self.gridSize*(-1)*WALL_RADIUS, self.gridSize*(0.5)+1)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(499):           if (not sIsWall) and (wIsWall):
graphicsDisplay.py(502):           if (sIsWall) and (wIsWall) and (not swIsWall):
graphicsDisplay.py(428):       for yNum, cell in enumerate(x):
graphicsDisplay.py(429):         if cell: # There's a wall here
graphicsDisplay.py(430):           pos = (xNum, yNum)
graphicsDisplay.py(431):           screen = self.to_screen(pos)
 --- modulename: graphicsDisplay, funcname: to_screen
graphicsDisplay.py(408):     ( x, y ) = point
graphicsDisplay.py(410):     x = (x + 1)*self.gridSize
graphicsDisplay.py(411):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(412):     return ( x, y )
graphicsDisplay.py(432):           screen2 = self.to_screen2(pos)
 --- modulename: graphicsDisplay, funcname: to_screen2
graphicsDisplay.py(416):     ( x, y ) = point
graphicsDisplay.py(418):     x = (x + 1)*self.gridSize
graphicsDisplay.py(419):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(420):     return ( x, y )
graphicsDisplay.py(435):           wIsWall = self.isWall(xNum-1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(436):           eIsWall = self.isWall(xNum+1, yNum, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(512):       return False
graphicsDisplay.py(437):           nIsWall = self.isWall(xNum, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(512):       return False
graphicsDisplay.py(438):           sIsWall = self.isWall(xNum, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(439):           nwIsWall = self.isWall(xNum-1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(512):       return False
graphicsDisplay.py(440):           swIsWall = self.isWall(xNum-1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(513):     return walls[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(441):           neIsWall = self.isWall(xNum+1, yNum+1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(512):       return False
graphicsDisplay.py(442):           seIsWall = self.isWall(xNum+1, yNum-1, wallMatrix)
 --- modulename: graphicsDisplay, funcname: isWall
graphicsDisplay.py(509):     if x < 0 or y < 0:
graphicsDisplay.py(511):     if x >= walls.width or y >= walls.height:
graphicsDisplay.py(512):       return False
graphicsDisplay.py(445):           if (not nIsWall) and (not eIsWall):
graphicsDisplay.py(447):             circle(screen2, WALL_RADIUS * self.gridSize, wallColor, wallColor, (0,91), 'arc')
 --- modulename: graphicsUtils, funcname: circle
graphicsUtils.py(176):     x, y = pos
graphicsUtils.py(177):     x0, x1 = x - r - 1, x + r
graphicsUtils.py(178):     y0, y1 = y - r - 1, y + r
graphicsUtils.py(179):     if endpoints == None:
graphicsUtils.py(182):       e = list(endpoints)
graphicsUtils.py(183):     while e[0] > e[1]: e[1] = e[1] + 360
graphicsUtils.py(185):     return _canvas.create_arc(x0, y0, x1, y1, outline=outlineColor, fill=fillColor,
graphicsUtils.py(186):                               extent=e[1] - e[0], start=e[0], style=style, width=width)
 --- modulename: Tkinter, funcname: create_arc
Tkinter.py(2254):         return self._create('arc', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(448):           if (nIsWall) and (not eIsWall):
graphicsDisplay.py(451):           if (not nIsWall) and (eIsWall):
graphicsDisplay.py(454):           if (nIsWall) and (eIsWall) and (not neIsWall):
graphicsDisplay.py(461):           if (not nIsWall) and (not wIsWall):
graphicsDisplay.py(464):           if (nIsWall) and (not wIsWall):
graphicsDisplay.py(467):           if (not nIsWall) and (wIsWall):
graphicsDisplay.py(469):             line(add(screen, (0, self.gridSize*(-1)*WALL_RADIUS)), add(screen, (self.gridSize*(-0.5)-1, self.gridSize*(-1)*WALL_RADIUS)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(470):           if (nIsWall) and (wIsWall) and (not nwIsWall):
graphicsDisplay.py(477):           if (not sIsWall) and (not eIsWall):
graphicsDisplay.py(480):           if (sIsWall) and (not eIsWall):
graphicsDisplay.py(482):             line(add(screen, (self.gridSize*WALL_RADIUS, 0)), add(screen, (self.gridSize*WALL_RADIUS, self.gridSize*(0.5)+1)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(483):           if (not sIsWall) and (eIsWall):
graphicsDisplay.py(486):           if (sIsWall) and (eIsWall) and (not seIsWall):
graphicsDisplay.py(493):           if (not sIsWall) and (not wIsWall):
graphicsDisplay.py(496):           if (sIsWall) and (not wIsWall):
graphicsDisplay.py(499):           if (not sIsWall) and (wIsWall):
graphicsDisplay.py(502):           if (sIsWall) and (wIsWall) and (not swIsWall):
graphicsDisplay.py(504):             circle(add(screen2, (self.gridSize*(-2)*WALL_RADIUS, self.gridSize*(2)*WALL_RADIUS)), WALL_RADIUS * self.gridSize-1, wallColor, wallColor, (0,91), 'arc')
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: circle
graphicsUtils.py(176):     x, y = pos
graphicsUtils.py(177):     x0, x1 = x - r - 1, x + r
graphicsUtils.py(178):     y0, y1 = y - r - 1, y + r
graphicsUtils.py(179):     if endpoints == None:
graphicsUtils.py(182):       e = list(endpoints)
graphicsUtils.py(183):     while e[0] > e[1]: e[1] = e[1] + 360
graphicsUtils.py(185):     return _canvas.create_arc(x0, y0, x1, y1, outline=outlineColor, fill=fillColor,
graphicsUtils.py(186):                               extent=e[1] - e[0], start=e[0], style=style, width=width)
 --- modulename: Tkinter, funcname: create_arc
Tkinter.py(2254):         return self._create('arc', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(505):             line(add(screen, (self.gridSize*(-2)*WALL_RADIUS+1, self.gridSize*(1)*WALL_RADIUS)), add(screen, (self.gridSize*(-0.5), self.gridSize*(1)*WALL_RADIUS)), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(506):             line(add(screen, (self.gridSize*(-1)*WALL_RADIUS, self.gridSize*(2)*WALL_RADIUS-1)), add(screen, (self.gridSize*(-1)*WALL_RADIUS, self.gridSize*(0.5))), wallColor)
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsDisplay, funcname: add
graphicsDisplay.py(647):   return (x[0] + y[0], x[1] + y[1])
 --- modulename: graphicsUtils, funcname: line
graphicsUtils.py(232):   x0, y0 = here[0], here[1]
graphicsUtils.py(233):   x1, y1 = there[0], there[1]
graphicsUtils.py(234):   return _canvas.create_line(x0, y0, x1, y1, fill=color, width=width)
 --- modulename: Tkinter, funcname: create_line
Tkinter.py(2263):         return self._create('line', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(428):       for yNum, cell in enumerate(x):
graphicsDisplay.py(424):     for xNum, x in enumerate(wallMatrix):
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(198):     self.food = self.drawFood(layout.food)
 --- modulename: graphicsDisplay, funcname: drawFood
graphicsDisplay.py(516):     foodImages = []
graphicsDisplay.py(517):     color = FOOD_COLOR
graphicsDisplay.py(518):     for xNum, x in enumerate(foodMatrix):
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(519):       if self.capture and (xNum * 2) <= foodMatrix.width: color = TEAM_COLORS[0]
graphicsDisplay.py(520):       if self.capture and (xNum * 2) > foodMatrix.width: color = TEAM_COLORS[1]
graphicsDisplay.py(521):       imageRow = []
graphicsDisplay.py(522):       foodImages.append(imageRow)
graphicsDisplay.py(523):       for yNum, cell in enumerate(x):
graphicsDisplay.py(524):         if cell: # There's food here
graphicsDisplay.py(532):           imageRow.append(None)
graphicsDisplay.py(523):       for yNum, cell in enumerate(x):
graphicsDisplay.py(524):         if cell: # There's food here
graphicsDisplay.py(532):           imageRow.append(None)
graphicsDisplay.py(523):       for yNum, cell in enumerate(x):
graphicsDisplay.py(524):         if cell: # There's food here
graphicsDisplay.py(532):           imageRow.append(None)
graphicsDisplay.py(523):       for yNum, cell in enumerate(x):
graphicsDisplay.py(524):         if cell: # There's food here
graphicsDisplay.py(532):           imageRow.append(None)
graphicsDisplay.py(523):       for yNum, cell in enumerate(x):
graphicsDisplay.py(524):         if cell: # There's food here
graphicsDisplay.py(532):           imageRow.append(None)
graphicsDisplay.py(523):       for yNum, cell in enumerate(x):
graphicsDisplay.py(524):         if cell: # There's food here
graphicsDisplay.py(532):           imageRow.append(None)
graphicsDisplay.py(523):       for yNum, cell in enumerate(x):
graphicsDisplay.py(524):         if cell: # There's food here
graphicsDisplay.py(532):           imageRow.append(None)
graphicsDisplay.py(523):       for yNum, cell in enumerate(x):
graphicsDisplay.py(518):     for xNum, x in enumerate(foodMatrix):
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(519):       if self.capture and (xNum * 2) <= foodMatrix.width: color = TEAM_COLORS[0]
graphicsDisplay.py(520):       if self.capture and (xNum * 2) > foodMatrix.width: color = TEAM_COLORS[1]
graphicsDisplay.py(521):       imageRow = []
graphicsDisplay.py(522):       foodImages.append(imageRow)
graphicsDisplay.py(523):       for yNum, cell in enumerate(x):
graphicsDisplay.py(524):         if cell: # There's food here
graphicsDisplay.py(532):           imageRow.append(None)
graphicsDisplay.py(523):       for yNum, cell in enumerate(x):
graphicsDisplay.py(524):         if cell: # There's food here
graphicsDisplay.py(525):           screen = self.to_screen((xNum, yNum ))
 --- modulename: graphicsDisplay, funcname: to_screen
graphicsDisplay.py(408):     ( x, y ) = point
graphicsDisplay.py(410):     x = (x + 1)*self.gridSize
graphicsDisplay.py(411):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(412):     return ( x, y )
graphicsDisplay.py(526):           dot = circle( screen,
graphicsDisplay.py(527):                         FOOD_SIZE * self.gridSize,
graphicsDisplay.py(528):                         outlineColor = color, fillColor = color,
graphicsDisplay.py(529):                         width = 1)
 --- modulename: graphicsUtils, funcname: circle
graphicsUtils.py(176):     x, y = pos
graphicsUtils.py(177):     x0, x1 = x - r - 1, x + r
graphicsUtils.py(178):     y0, y1 = y - r - 1, y + r
graphicsUtils.py(179):     if endpoints == None:
graphicsUtils.py(180):       e = [0, 359]
graphicsUtils.py(183):     while e[0] > e[1]: e[1] = e[1] + 360
graphicsUtils.py(185):     return _canvas.create_arc(x0, y0, x1, y1, outline=outlineColor, fill=fillColor,
graphicsUtils.py(186):                               extent=e[1] - e[0], start=e[0], style=style, width=width)
 --- modulename: Tkinter, funcname: create_arc
Tkinter.py(2254):         return self._create('arc', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(530):           imageRow.append(dot)
graphicsDisplay.py(523):       for yNum, cell in enumerate(x):
graphicsDisplay.py(524):         if cell: # There's food here
graphicsDisplay.py(532):           imageRow.append(None)
graphicsDisplay.py(523):       for yNum, cell in enumerate(x):
graphicsDisplay.py(524):         if cell: # There's food here
graphicsDisplay.py(532):           imageRow.append(None)
graphicsDisplay.py(523):       for yNum, cell in enumerate(x):
graphicsDisplay.py(524):         if cell: # There's food here
graphicsDisplay.py(532):           imageRow.append(None)
graphicsDisplay.py(523):       for yNum, cell in enumerate(x):
graphicsDisplay.py(524):         if cell: # There's food here
graphicsDisplay.py(532):           imageRow.append(None)
graphicsDisplay.py(523):       for yNum, cell in enumerate(x):
graphicsDisplay.py(524):         if cell: # There's food here
graphicsDisplay.py(532):           imageRow.append(None)
graphicsDisplay.py(523):       for yNum, cell in enumerate(x):
graphicsDisplay.py(518):     for xNum, x in enumerate(foodMatrix):
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(519):       if self.capture and (xNum * 2) <= foodMatrix.width: color = TEAM_COLORS[0]
graphicsDisplay.py(520):       if self.capture and (xNum * 2) > foodMatrix.width: color = TEAM_COLORS[1]
graphicsDisplay.py(521):       imageRow = []
graphicsDisplay.py(522):       foodImages.append(imageRow)
graphicsDisplay.py(523):       for yNum, cell in enumerate(x):
graphicsDisplay.py(524):         if cell: # There's food here
graphicsDisplay.py(532):           imageRow.append(None)
graphicsDisplay.py(523):       for yNum, cell in enumerate(x):
graphicsDisplay.py(524):         if cell: # There's food here
graphicsDisplay.py(532):           imageRow.append(None)
graphicsDisplay.py(523):       for yNum, cell in enumerate(x):
graphicsDisplay.py(524):         if cell: # There's food here
graphicsDisplay.py(532):           imageRow.append(None)
graphicsDisplay.py(523):       for yNum, cell in enumerate(x):
graphicsDisplay.py(524):         if cell: # There's food here
graphicsDisplay.py(532):           imageRow.append(None)
graphicsDisplay.py(523):       for yNum, cell in enumerate(x):
graphicsDisplay.py(524):         if cell: # There's food here
graphicsDisplay.py(532):           imageRow.append(None)
graphicsDisplay.py(523):       for yNum, cell in enumerate(x):
graphicsDisplay.py(524):         if cell: # There's food here
graphicsDisplay.py(532):           imageRow.append(None)
graphicsDisplay.py(523):       for yNum, cell in enumerate(x):
graphicsDisplay.py(524):         if cell: # There's food here
graphicsDisplay.py(532):           imageRow.append(None)
graphicsDisplay.py(523):       for yNum, cell in enumerate(x):
graphicsDisplay.py(518):     for xNum, x in enumerate(foodMatrix):
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(519):       if self.capture and (xNum * 2) <= foodMatrix.width: color = TEAM_COLORS[0]
graphicsDisplay.py(520):       if self.capture and (xNum * 2) > foodMatrix.width: color = TEAM_COLORS[1]
graphicsDisplay.py(521):       imageRow = []
graphicsDisplay.py(522):       foodImages.append(imageRow)
graphicsDisplay.py(523):       for yNum, cell in enumerate(x):
graphicsDisplay.py(524):         if cell: # There's food here
graphicsDisplay.py(532):           imageRow.append(None)
graphicsDisplay.py(523):       for yNum, cell in enumerate(x):
graphicsDisplay.py(524):         if cell: # There's food here
graphicsDisplay.py(532):           imageRow.append(None)
graphicsDisplay.py(523):       for yNum, cell in enumerate(x):
graphicsDisplay.py(524):         if cell: # There's food here
graphicsDisplay.py(532):           imageRow.append(None)
graphicsDisplay.py(523):       for yNum, cell in enumerate(x):
graphicsDisplay.py(524):         if cell: # There's food here
graphicsDisplay.py(532):           imageRow.append(None)
graphicsDisplay.py(523):       for yNum, cell in enumerate(x):
graphicsDisplay.py(524):         if cell: # There's food here
graphicsDisplay.py(532):           imageRow.append(None)
graphicsDisplay.py(523):       for yNum, cell in enumerate(x):
graphicsDisplay.py(524):         if cell: # There's food here
graphicsDisplay.py(532):           imageRow.append(None)
graphicsDisplay.py(523):       for yNum, cell in enumerate(x):
graphicsDisplay.py(524):         if cell: # There's food here
graphicsDisplay.py(532):           imageRow.append(None)
graphicsDisplay.py(523):       for yNum, cell in enumerate(x):
graphicsDisplay.py(518):     for xNum, x in enumerate(foodMatrix):
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(519):       if self.capture and (xNum * 2) <= foodMatrix.width: color = TEAM_COLORS[0]
graphicsDisplay.py(520):       if self.capture and (xNum * 2) > foodMatrix.width: color = TEAM_COLORS[1]
graphicsDisplay.py(521):       imageRow = []
graphicsDisplay.py(522):       foodImages.append(imageRow)
graphicsDisplay.py(523):       for yNum, cell in enumerate(x):
graphicsDisplay.py(524):         if cell: # There's food here
graphicsDisplay.py(532):           imageRow.append(None)
graphicsDisplay.py(523):       for yNum, cell in enumerate(x):
graphicsDisplay.py(524):         if cell: # There's food here
graphicsDisplay.py(532):           imageRow.append(None)
graphicsDisplay.py(523):       for yNum, cell in enumerate(x):
graphicsDisplay.py(524):         if cell: # There's food here
graphicsDisplay.py(532):           imageRow.append(None)
graphicsDisplay.py(523):       for yNum, cell in enumerate(x):
graphicsDisplay.py(524):         if cell: # There's food here
graphicsDisplay.py(532):           imageRow.append(None)
graphicsDisplay.py(523):       for yNum, cell in enumerate(x):
graphicsDisplay.py(524):         if cell: # There's food here
graphicsDisplay.py(532):           imageRow.append(None)
graphicsDisplay.py(523):       for yNum, cell in enumerate(x):
graphicsDisplay.py(524):         if cell: # There's food here
graphicsDisplay.py(532):           imageRow.append(None)
graphicsDisplay.py(523):       for yNum, cell in enumerate(x):
graphicsDisplay.py(524):         if cell: # There's food here
graphicsDisplay.py(532):           imageRow.append(None)
graphicsDisplay.py(523):       for yNum, cell in enumerate(x):
graphicsDisplay.py(518):     for xNum, x in enumerate(foodMatrix):
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(519):       if self.capture and (xNum * 2) <= foodMatrix.width: color = TEAM_COLORS[0]
graphicsDisplay.py(520):       if self.capture and (xNum * 2) > foodMatrix.width: color = TEAM_COLORS[1]
graphicsDisplay.py(521):       imageRow = []
graphicsDisplay.py(522):       foodImages.append(imageRow)
graphicsDisplay.py(523):       for yNum, cell in enumerate(x):
graphicsDisplay.py(524):         if cell: # There's food here
graphicsDisplay.py(532):           imageRow.append(None)
graphicsDisplay.py(523):       for yNum, cell in enumerate(x):
graphicsDisplay.py(524):         if cell: # There's food here
graphicsDisplay.py(532):           imageRow.append(None)
graphicsDisplay.py(523):       for yNum, cell in enumerate(x):
graphicsDisplay.py(524):         if cell: # There's food here
graphicsDisplay.py(532):           imageRow.append(None)
graphicsDisplay.py(523):       for yNum, cell in enumerate(x):
graphicsDisplay.py(524):         if cell: # There's food here
graphicsDisplay.py(532):           imageRow.append(None)
graphicsDisplay.py(523):       for yNum, cell in enumerate(x):
graphicsDisplay.py(524):         if cell: # There's food here
graphicsDisplay.py(532):           imageRow.append(None)
graphicsDisplay.py(523):       for yNum, cell in enumerate(x):
graphicsDisplay.py(524):         if cell: # There's food here
graphicsDisplay.py(532):           imageRow.append(None)
graphicsDisplay.py(523):       for yNum, cell in enumerate(x):
graphicsDisplay.py(524):         if cell: # There's food here
graphicsDisplay.py(532):           imageRow.append(None)
graphicsDisplay.py(523):       for yNum, cell in enumerate(x):
graphicsDisplay.py(518):     for xNum, x in enumerate(foodMatrix):
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(519):       if self.capture and (xNum * 2) <= foodMatrix.width: color = TEAM_COLORS[0]
graphicsDisplay.py(520):       if self.capture and (xNum * 2) > foodMatrix.width: color = TEAM_COLORS[1]
graphicsDisplay.py(521):       imageRow = []
graphicsDisplay.py(522):       foodImages.append(imageRow)
graphicsDisplay.py(523):       for yNum, cell in enumerate(x):
graphicsDisplay.py(524):         if cell: # There's food here
graphicsDisplay.py(532):           imageRow.append(None)
graphicsDisplay.py(523):       for yNum, cell in enumerate(x):
graphicsDisplay.py(524):         if cell: # There's food here
graphicsDisplay.py(532):           imageRow.append(None)
graphicsDisplay.py(523):       for yNum, cell in enumerate(x):
graphicsDisplay.py(524):         if cell: # There's food here
graphicsDisplay.py(532):           imageRow.append(None)
graphicsDisplay.py(523):       for yNum, cell in enumerate(x):
graphicsDisplay.py(524):         if cell: # There's food here
graphicsDisplay.py(532):           imageRow.append(None)
graphicsDisplay.py(523):       for yNum, cell in enumerate(x):
graphicsDisplay.py(524):         if cell: # There's food here
graphicsDisplay.py(532):           imageRow.append(None)
graphicsDisplay.py(523):       for yNum, cell in enumerate(x):
graphicsDisplay.py(524):         if cell: # There's food here
graphicsDisplay.py(532):           imageRow.append(None)
graphicsDisplay.py(523):       for yNum, cell in enumerate(x):
graphicsDisplay.py(524):         if cell: # There's food here
graphicsDisplay.py(532):           imageRow.append(None)
graphicsDisplay.py(523):       for yNum, cell in enumerate(x):
graphicsDisplay.py(518):     for xNum, x in enumerate(foodMatrix):
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
graphicsDisplay.py(533):     return foodImages
graphicsDisplay.py(199):     self.capsules = self.drawCapsules(layout.capsules)
 --- modulename: graphicsDisplay, funcname: drawCapsules
graphicsDisplay.py(536):     capsuleImages = {}
graphicsDisplay.py(537):     for capsule in capsules:
graphicsDisplay.py(545):     return capsuleImages
graphicsDisplay.py(200):     refresh()
 --- modulename: graphicsUtils, funcname: refresh
graphicsUtils.py(195):       _canvas.update_idletasks()
 --- modulename: Tkinter, funcname: update_idletasks
Tkinter.py(967):         self.tk.call('update', 'idletasks')
graphicsDisplay.py(166):     self.drawAgentObjects(state)
 --- modulename: graphicsDisplay, funcname: drawAgentObjects
graphicsDisplay.py(203):     self.agentImages = [] # (agentState, image)
graphicsDisplay.py(204):     for index, agent in enumerate(state.agentStates):
graphicsDisplay.py(205):       if agent.isPacman:
graphicsDisplay.py(206):         image = self.drawPacman(agent, index)
 --- modulename: graphicsDisplay, funcname: drawPacman
graphicsDisplay.py(259):     position = self.getPosition(pacman)
 --- modulename: graphicsDisplay, funcname: getPosition
graphicsDisplay.py(397):     if agentState.configuration == None: return (-1000, -1000)
 --- modulename: game, funcname: __eq__
game.py(86):     if other == None: return False
graphicsDisplay.py(398):     return agentState.getPosition()
 --- modulename: game, funcname: getPosition
game.py(144):     if self.configuration == None: return None
 --- modulename: game, funcname: __eq__
game.py(86):     if other == None: return False
game.py(145):     return self.configuration.getPosition()
 --- modulename: game, funcname: getPosition
game.py(76):     return (self.pos)
graphicsDisplay.py(260):     screen_point = self.to_screen(position)
 --- modulename: graphicsDisplay, funcname: to_screen
graphicsDisplay.py(408):     ( x, y ) = point
graphicsDisplay.py(410):     x = (x + 1)*self.gridSize
graphicsDisplay.py(411):     y = (self.height  - y)*self.gridSize
graphicsDisplay.py(412):     return ( x, y )
graphicsDisplay.py(261):     endpoints = self.getEndpoints(self.getDirection(pacman))
 --- modulename: graphicsDisplay, funcname: getDirection
graphicsDisplay.py(401):     if agentState.configuration == None: return Directions.STOP
 --- modulename: game, funcname: __eq__
game.py(86):     if other == None: return False
graphicsDisplay.py(402):     return agentState.configuration.getDirection()
 --- modulename: game, funcname: getDirection
game.py(79):     return self.direction
 --- modulename: graphicsDisplay, funcname: getEndpoints
graphicsDisplay.py(278):     x, y = position
graphicsDisplay.py(279):     pos = x - int(x) + y - int(y)
graphicsDisplay.py(280):     width = 30 + 80 * math.sin(math.pi* pos)
graphicsDisplay.py(282):     delta = width / 2
graphicsDisplay.py(283):     if (direction == 'West'):
graphicsDisplay.py(285):     elif (direction == 'North'):
graphicsDisplay.py(287):     elif (direction == 'South'):
graphicsDisplay.py(290):       endpoints = (0+delta, 0-delta)
graphicsDisplay.py(291):     return endpoints
graphicsDisplay.py(263):     width = PACMAN_OUTLINE_WIDTH
graphicsDisplay.py(264):     outlineColor = PACMAN_COLOR
graphicsDisplay.py(265):     fillColor = PACMAN_COLOR
graphicsDisplay.py(267):     if self.capture:
graphicsDisplay.py(272):     return [circle(screen_point, PACMAN_SCALE * self.gridSize,
graphicsDisplay.py(273):                    fillColor = fillColor, outlineColor = outlineColor,
graphicsDisplay.py(274):                    endpoints = endpoints,
graphicsDisplay.py(275):                    width = width)]
 --- modulename: graphicsUtils, funcname: circle
graphicsUtils.py(176):     x, y = pos
graphicsUtils.py(177):     x0, x1 = x - r - 1, x + r
graphicsUtils.py(178):     y0, y1 = y - r - 1, y + r
graphicsUtils.py(179):     if endpoints == None:
graphicsUtils.py(182):       e = list(endpoints)
graphicsUtils.py(183):     while e[0] > e[1]: e[1] = e[1] + 360
graphicsUtils.py(183):     while e[0] > e[1]: e[1] = e[1] + 360
graphicsUtils.py(185):     return _canvas.create_arc(x0, y0, x1, y1, outline=outlineColor, fill=fillColor,
graphicsUtils.py(186):                               extent=e[1] - e[0], start=e[0], style=style, width=width)
 --- modulename: Tkinter, funcname: create_arc
Tkinter.py(2254):         return self._create('arc', args, kw)
 --- modulename: Tkinter, funcname: _create
Tkinter.py(2243):         args = _flatten(args)
Tkinter.py(2244):         cnf = args[-1]
Tkinter.py(2245):         if type(cnf) in (DictionaryType, TupleType):
Tkinter.py(2248):             cnf = {}
Tkinter.py(2249):         return getint(self.tk.call(
Tkinter.py(2250):             self._w, 'create', itemType,
Tkinter.py(2251):             *(args + self._options(cnf, kw))))
 --- modulename: Tkinter, funcname: _options
Tkinter.py(1102):         if kw:
Tkinter.py(1103):             cnf = _cnfmerge((cnf, kw))
 --- modulename: Tkinter, funcname: _cnfmerge
Tkinter.py(108):     if type(cnfs) is DictionaryType:
Tkinter.py(110):     elif type(cnfs) in (NoneType, StringType):
Tkinter.py(113):         cnf = {}
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(115):             try:
Tkinter.py(116):                 cnf.update(c)
Tkinter.py(114):         for c in _flatten(cnfs):
Tkinter.py(121):         return cnf
Tkinter.py(1106):         res = ()
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1108):             if v is not None:
Tkinter.py(1109):                 if k[-1] == '_': k = k[:-1]
Tkinter.py(1110):                 if hasattr(v, '__call__'):
Tkinter.py(1112):                 elif isinstance(v, (tuple, list)):
Tkinter.py(1124):                 res = res + ('-'+k, v)
Tkinter.py(1107):         for k, v in cnf.items():
Tkinter.py(1125):         return res
graphicsDisplay.py(207):         self.agentImages.append( (agent, image) )
graphicsDisplay.py(204):     for index, agent in enumerate(state.agentStates):
graphicsDisplay.py(211):     refresh()
 --- modulename: graphicsUtils, funcname: refresh
graphicsUtils.py(195):       _canvas.update_idletasks()
 --- modulename: Tkinter, funcname: update_idletasks
Tkinter.py(967):         self.tk.call('update', 'idletasks')
graphicsDisplay.py(169):     self.previousState = state
game.py(550):     self.numMoves = 0
game.py(554):     for i in range(len(self.agents)):
game.py(555):       agent = self.agents[i]
game.py(556):       if not agent:
game.py(561):       if ("registerInitialState" in dir(agent)):
game.py(562):         self.mute()
 --- modulename: game, funcname: mute
game.py(527):     if not self.muteAgents: return
game.py(563):         if self.catchExceptions:
game.py(582):           agent.registerInitialState(self.state.deepCopy())
 --- modulename: pacman, funcname: deepCopy
pacman.py(213):     state = GameState( self )
 --- modulename: pacman, funcname: __init__
pacman.py(207):     if prevState != None: # Initial state
pacman.py(208):       self.data = GameStateData(prevState.data)
 --- modulename: game, funcname: __init__
game.py(367):     if prevState != None:
game.py(368):       self.food = prevState.food.shallowCopy()
 --- modulename: game, funcname: shallowCopy
game.py(203):     g = Grid(self.width, self.height)
 --- modulename: game, funcname: __init__
game.py(159):     if initialValue not in [False, True]: raise Exception('Grids can only contain booleans')
game.py(160):     self.CELLS_PER_INT = 30
game.py(162):     self.width = width
game.py(163):     self.height = height
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(165):     if bitRepresentation:
game.py(204):     g.data = self.data
game.py(205):     return g
game.py(369):       self.capsules = prevState.capsules[:]
game.py(370):       self.agentStates = self.copyAgentStates( prevState.agentStates )
 --- modulename: game, funcname: copyAgentStates
game.py(391):     copiedStates = []
game.py(392):     for agentState in agentStates:
game.py(393):       copiedStates.append( agentState.copy() )
 --- modulename: game, funcname: copy
game.py(138):     state = AgentState( self.start, self.isPacman )
 --- modulename: game, funcname: __init__
game.py(118):     self.start = startConfiguration
game.py(119):     self.configuration = startConfiguration
game.py(120):     self.isPacman = isPacman
game.py(121):     self.scaredTimer = 0
game.py(139):     state.configuration = self.configuration
game.py(140):     state.scaredTimer = self.scaredTimer
game.py(141):     return state
game.py(392):     for agentState in agentStates:
game.py(394):     return copiedStates
game.py(371):       self.layout = prevState.layout
game.py(372):       self._eaten = prevState._eaten
game.py(373):       self.score = prevState.score
game.py(374):     self._foodEaten = None
game.py(375):     self._capsuleEaten = None
game.py(376):     self._agentMoved = None
game.py(377):     self._lose = False
game.py(378):     self._win = False
game.py(379):     self.scoreChange = 0
pacman.py(214):     state.data = self.data.deepCopy()
 --- modulename: game, funcname: deepCopy
game.py(382):     state = GameStateData( self )
 --- modulename: game, funcname: __init__
game.py(367):     if prevState != None:
game.py(368):       self.food = prevState.food.shallowCopy()
 --- modulename: game, funcname: shallowCopy
game.py(203):     g = Grid(self.width, self.height)
 --- modulename: game, funcname: __init__
game.py(159):     if initialValue not in [False, True]: raise Exception('Grids can only contain booleans')
game.py(160):     self.CELLS_PER_INT = 30
game.py(162):     self.width = width
game.py(163):     self.height = height
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(165):     if bitRepresentation:
game.py(204):     g.data = self.data
game.py(205):     return g
game.py(369):       self.capsules = prevState.capsules[:]
game.py(370):       self.agentStates = self.copyAgentStates( prevState.agentStates )
 --- modulename: game, funcname: copyAgentStates
game.py(391):     copiedStates = []
game.py(392):     for agentState in agentStates:
game.py(393):       copiedStates.append( agentState.copy() )
 --- modulename: game, funcname: copy
game.py(138):     state = AgentState( self.start, self.isPacman )
 --- modulename: game, funcname: __init__
game.py(118):     self.start = startConfiguration
game.py(119):     self.configuration = startConfiguration
game.py(120):     self.isPacman = isPacman
game.py(121):     self.scaredTimer = 0
game.py(139):     state.configuration = self.configuration
game.py(140):     state.scaredTimer = self.scaredTimer
game.py(141):     return state
game.py(392):     for agentState in agentStates:
game.py(394):     return copiedStates
game.py(371):       self.layout = prevState.layout
game.py(372):       self._eaten = prevState._eaten
game.py(373):       self.score = prevState.score
game.py(374):     self._foodEaten = None
game.py(375):     self._capsuleEaten = None
game.py(376):     self._agentMoved = None
game.py(377):     self._lose = False
game.py(378):     self._win = False
game.py(379):     self.scoreChange = 0
game.py(383):     state.food = self.food.deepCopy()
 --- modulename: game, funcname: deepCopy
game.py(200):     return self.copy()
 --- modulename: game, funcname: copy
game.py(195):     g = Grid(self.width, self.height)
 --- modulename: game, funcname: __init__
game.py(159):     if initialValue not in [False, True]: raise Exception('Grids can only contain booleans')
game.py(160):     self.CELLS_PER_INT = 30
game.py(162):     self.width = width
game.py(163):     self.height = height
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(165):     if bitRepresentation:
game.py(196):     g.data = [x[:] for x in self.data]
game.py(196):     g.data = [x[:] for x in self.data]
game.py(196):     g.data = [x[:] for x in self.data]
game.py(196):     g.data = [x[:] for x in self.data]
game.py(196):     g.data = [x[:] for x in self.data]
game.py(196):     g.data = [x[:] for x in self.data]
game.py(196):     g.data = [x[:] for x in self.data]
game.py(196):     g.data = [x[:] for x in self.data]
game.py(197):     return g
game.py(384):     state.layout = self.layout.deepCopy()
 --- modulename: layout, funcname: deepCopy
layout.py(86):     return Layout(self.layoutText[:])
 --- modulename: layout, funcname: __init__
layout.py(22):     self.width = len(layoutText[0])
layout.py(23):     self.height= len(layoutText)
layout.py(24):     self.walls = Grid(self.width, self.height, False)
 --- modulename: game, funcname: __init__
game.py(159):     if initialValue not in [False, True]: raise Exception('Grids can only contain booleans')
game.py(160):     self.CELLS_PER_INT = 30
game.py(162):     self.width = width
game.py(163):     self.height = height
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(165):     if bitRepresentation:
layout.py(25):     self.food = Grid(self.width, self.height, False)
 --- modulename: game, funcname: __init__
game.py(159):     if initialValue not in [False, True]: raise Exception('Grids can only contain booleans')
game.py(160):     self.CELLS_PER_INT = 30
game.py(162):     self.width = width
game.py(163):     self.height = height
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(165):     if bitRepresentation:
layout.py(26):     self.capsules = []
layout.py(27):     self.agentPositions = []
layout.py(28):     self.numGhosts = 0
layout.py(29):     self.processLayoutText(layoutText)
 --- modulename: layout, funcname: processLayoutText
layout.py(101):     maxY = self.height - 1
layout.py(102):     for y in range(self.height):       
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(102):     for y in range(self.height):       
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(113):       self.food[x][y] = True 
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(114):     elif layoutChar == 'o':    
layout.py(116):     elif layoutChar == 'P':    
layout.py(118):     elif layoutChar in ['G']:    
layout.py(121):     elif layoutChar in  ['1', '2', '3', '4']:
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(102):     for y in range(self.height):       
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(114):     elif layoutChar == 'o':    
layout.py(116):     elif layoutChar == 'P':    
layout.py(118):     elif layoutChar in ['G']:    
layout.py(121):     elif layoutChar in  ['1', '2', '3', '4']:
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(114):     elif layoutChar == 'o':    
layout.py(116):     elif layoutChar == 'P':    
layout.py(118):     elif layoutChar in ['G']:    
layout.py(121):     elif layoutChar in  ['1', '2', '3', '4']:
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(114):     elif layoutChar == 'o':    
layout.py(116):     elif layoutChar == 'P':    
layout.py(118):     elif layoutChar in ['G']:    
layout.py(121):     elif layoutChar in  ['1', '2', '3', '4']:
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(102):     for y in range(self.height):       
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(114):     elif layoutChar == 'o':    
layout.py(116):     elif layoutChar == 'P':    
layout.py(118):     elif layoutChar in ['G']:    
layout.py(121):     elif layoutChar in  ['1', '2', '3', '4']:
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(114):     elif layoutChar == 'o':    
layout.py(116):     elif layoutChar == 'P':    
layout.py(118):     elif layoutChar in ['G']:    
layout.py(121):     elif layoutChar in  ['1', '2', '3', '4']:
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(114):     elif layoutChar == 'o':    
layout.py(116):     elif layoutChar == 'P':    
layout.py(118):     elif layoutChar in ['G']:    
layout.py(121):     elif layoutChar in  ['1', '2', '3', '4']:
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(114):     elif layoutChar == 'o':    
layout.py(116):     elif layoutChar == 'P':    
layout.py(118):     elif layoutChar in ['G']:    
layout.py(121):     elif layoutChar in  ['1', '2', '3', '4']:
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(102):     for y in range(self.height):       
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(114):     elif layoutChar == 'o':    
layout.py(116):     elif layoutChar == 'P':    
layout.py(118):     elif layoutChar in ['G']:    
layout.py(121):     elif layoutChar in  ['1', '2', '3', '4']:
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(114):     elif layoutChar == 'o':    
layout.py(116):     elif layoutChar == 'P':    
layout.py(118):     elif layoutChar in ['G']:    
layout.py(121):     elif layoutChar in  ['1', '2', '3', '4']:
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(102):     for y in range(self.height):       
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(114):     elif layoutChar == 'o':    
layout.py(116):     elif layoutChar == 'P':    
layout.py(118):     elif layoutChar in ['G']:    
layout.py(121):     elif layoutChar in  ['1', '2', '3', '4']:
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(114):     elif layoutChar == 'o':    
layout.py(116):     elif layoutChar == 'P':    
layout.py(118):     elif layoutChar in ['G']:    
layout.py(121):     elif layoutChar in  ['1', '2', '3', '4']:
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(114):     elif layoutChar == 'o':    
layout.py(116):     elif layoutChar == 'P':    
layout.py(118):     elif layoutChar in ['G']:    
layout.py(121):     elif layoutChar in  ['1', '2', '3', '4']:
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(114):     elif layoutChar == 'o':    
layout.py(116):     elif layoutChar == 'P':    
layout.py(118):     elif layoutChar in ['G']:    
layout.py(121):     elif layoutChar in  ['1', '2', '3', '4']:
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(114):     elif layoutChar == 'o':    
layout.py(116):     elif layoutChar == 'P':    
layout.py(117):       self.agentPositions.append( (0, (x, y) ) )
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(102):     for y in range(self.height):       
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(102):     for y in range(self.height):       
layout.py(106):     self.agentPositions.sort()
layout.py(107):     self.agentPositions = [ ( i == 0, pos) for i, pos in self.agentPositions]
layout.py(107):     self.agentPositions = [ ( i == 0, pos) for i, pos in self.agentPositions]
layout.py(30):     self.layoutText = layoutText
game.py(385):     state._agentMoved = self._agentMoved
game.py(386):     state._foodEaten = self._foodEaten
game.py(387):     state._capsuleEaten = self._capsuleEaten
game.py(388):     return state
pacman.py(215):     return state
 --- modulename: searchAgents, funcname: registerInitialState
searchAgents.py(104):     if self.searchFunction == None: raise Exception, "No search function provided for SearchAgent"
searchAgents.py(105):     starttime = time.time()
searchAgents.py(106):     problem = self.searchType(state) # Makes a new search problem
 --- modulename: searchAgents, funcname: __init__
searchAgents.py(146):     self.walls = gameState.getWalls()
 --- modulename: pacman, funcname: getWalls
pacman.py(184):     return self.data.layout.walls
searchAgents.py(147):     self.startState = gameState.getPacmanPosition()
 --- modulename: pacman, funcname: getPacmanPosition
pacman.py(129):     return self.data.agentStates[0].getPosition()
 --- modulename: game, funcname: getPosition
game.py(144):     if self.configuration == None: return None
 --- modulename: game, funcname: __eq__
game.py(86):     if other == None: return False
game.py(145):     return self.configuration.getPosition()
 --- modulename: game, funcname: getPosition
game.py(76):     return (self.pos)
searchAgents.py(148):     if start != None: self.startState = start
searchAgents.py(149):     self.goal = goal
searchAgents.py(150):     self.costFn = costFn
searchAgents.py(151):     if warn and (gameState.getNumFood() != 1 or not gameState.hasFood(*goal)):
 --- modulename: pacman, funcname: getNumFood
pacman.py(160):     return self.data.food.count()
 --- modulename: game, funcname: count
game.py(208):     return sum([x.count(item) for x in self.data])
game.py(208):     return sum([x.count(item) for x in self.data])
game.py(208):     return sum([x.count(item) for x in self.data])
game.py(208):     return sum([x.count(item) for x in self.data])
game.py(208):     return sum([x.count(item) for x in self.data])
game.py(208):     return sum([x.count(item) for x in self.data])
game.py(208):     return sum([x.count(item) for x in self.data])
game.py(208):     return sum([x.count(item) for x in self.data])
 --- modulename: pacman, funcname: hasFood
pacman.py(187):     return self.data.food[x][y]
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
searchAgents.py(155):     self._visited, self._visitedlist, self._expanded = {}, [], 0
searchAgents.py(107):     self.actions  = self.searchFunction(problem) # Find a path
 --- modulename: search, funcname: depthFirstSearch
search.py(85):   "util.raiseNotDefined()"
searchAgents.py(108):     totalCost = problem.getCostOfActions(self.actions)
 --- modulename: searchAgents, funcname: getCostOfActions
searchAgents.py(208):     if actions == None: return 999999
searchAgents.py(109):     print('Path found with total cost of %d in %.1f seconds' % (totalCost, time.time() - starttime))
Path found with total cost of 999999 in 0.0 seconds
searchAgents.py(110):     if '_expanded' in dir(problem): print('Search nodes expanded: %d' % problem._expanded)
Search nodes expanded: 0
game.py(584):         self.unmute()
 --- modulename: game, funcname: unmute
game.py(536):     if not self.muteAgents: return
game.py(554):     for i in range(len(self.agents)):
game.py(586):     agentIndex = self.startingIndex
game.py(587):     numAgents = len( self.agents )
game.py(589):     while not self.gameOver:
game.py(591):       agent = self.agents[agentIndex]
game.py(592):       move_time = 0
game.py(593):       skip_action = False
game.py(595):       if 'observationFunction' in dir( agent ):
game.py(615):         observation = self.state.deepCopy()
 --- modulename: pacman, funcname: deepCopy
pacman.py(213):     state = GameState( self )
 --- modulename: pacman, funcname: __init__
pacman.py(207):     if prevState != None: # Initial state
pacman.py(208):       self.data = GameStateData(prevState.data)
 --- modulename: game, funcname: __init__
game.py(367):     if prevState != None:
game.py(368):       self.food = prevState.food.shallowCopy()
 --- modulename: game, funcname: shallowCopy
game.py(203):     g = Grid(self.width, self.height)
 --- modulename: game, funcname: __init__
game.py(159):     if initialValue not in [False, True]: raise Exception('Grids can only contain booleans')
game.py(160):     self.CELLS_PER_INT = 30
game.py(162):     self.width = width
game.py(163):     self.height = height
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(165):     if bitRepresentation:
game.py(204):     g.data = self.data
game.py(205):     return g
game.py(369):       self.capsules = prevState.capsules[:]
game.py(370):       self.agentStates = self.copyAgentStates( prevState.agentStates )
 --- modulename: game, funcname: copyAgentStates
game.py(391):     copiedStates = []
game.py(392):     for agentState in agentStates:
game.py(393):       copiedStates.append( agentState.copy() )
 --- modulename: game, funcname: copy
game.py(138):     state = AgentState( self.start, self.isPacman )
 --- modulename: game, funcname: __init__
game.py(118):     self.start = startConfiguration
game.py(119):     self.configuration = startConfiguration
game.py(120):     self.isPacman = isPacman
game.py(121):     self.scaredTimer = 0
game.py(139):     state.configuration = self.configuration
game.py(140):     state.scaredTimer = self.scaredTimer
game.py(141):     return state
game.py(392):     for agentState in agentStates:
game.py(394):     return copiedStates
game.py(371):       self.layout = prevState.layout
game.py(372):       self._eaten = prevState._eaten
game.py(373):       self.score = prevState.score
game.py(374):     self._foodEaten = None
game.py(375):     self._capsuleEaten = None
game.py(376):     self._agentMoved = None
game.py(377):     self._lose = False
game.py(378):     self._win = False
game.py(379):     self.scoreChange = 0
pacman.py(214):     state.data = self.data.deepCopy()
 --- modulename: game, funcname: deepCopy
game.py(382):     state = GameStateData( self )
 --- modulename: game, funcname: __init__
game.py(367):     if prevState != None:
game.py(368):       self.food = prevState.food.shallowCopy()
 --- modulename: game, funcname: shallowCopy
game.py(203):     g = Grid(self.width, self.height)
 --- modulename: game, funcname: __init__
game.py(159):     if initialValue not in [False, True]: raise Exception('Grids can only contain booleans')
game.py(160):     self.CELLS_PER_INT = 30
game.py(162):     self.width = width
game.py(163):     self.height = height
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(165):     if bitRepresentation:
game.py(204):     g.data = self.data
game.py(205):     return g
game.py(369):       self.capsules = prevState.capsules[:]
game.py(370):       self.agentStates = self.copyAgentStates( prevState.agentStates )
 --- modulename: game, funcname: copyAgentStates
game.py(391):     copiedStates = []
game.py(392):     for agentState in agentStates:
game.py(393):       copiedStates.append( agentState.copy() )
 --- modulename: game, funcname: copy
game.py(138):     state = AgentState( self.start, self.isPacman )
 --- modulename: game, funcname: __init__
game.py(118):     self.start = startConfiguration
game.py(119):     self.configuration = startConfiguration
game.py(120):     self.isPacman = isPacman
game.py(121):     self.scaredTimer = 0
game.py(139):     state.configuration = self.configuration
game.py(140):     state.scaredTimer = self.scaredTimer
game.py(141):     return state
game.py(392):     for agentState in agentStates:
game.py(394):     return copiedStates
game.py(371):       self.layout = prevState.layout
game.py(372):       self._eaten = prevState._eaten
game.py(373):       self.score = prevState.score
game.py(374):     self._foodEaten = None
game.py(375):     self._capsuleEaten = None
game.py(376):     self._agentMoved = None
game.py(377):     self._lose = False
game.py(378):     self._win = False
game.py(379):     self.scoreChange = 0
game.py(383):     state.food = self.food.deepCopy()
 --- modulename: game, funcname: deepCopy
game.py(200):     return self.copy()
 --- modulename: game, funcname: copy
game.py(195):     g = Grid(self.width, self.height)
 --- modulename: game, funcname: __init__
game.py(159):     if initialValue not in [False, True]: raise Exception('Grids can only contain booleans')
game.py(160):     self.CELLS_PER_INT = 30
game.py(162):     self.width = width
game.py(163):     self.height = height
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(165):     if bitRepresentation:
game.py(196):     g.data = [x[:] for x in self.data]
game.py(196):     g.data = [x[:] for x in self.data]
game.py(196):     g.data = [x[:] for x in self.data]
game.py(196):     g.data = [x[:] for x in self.data]
game.py(196):     g.data = [x[:] for x in self.data]
game.py(196):     g.data = [x[:] for x in self.data]
game.py(196):     g.data = [x[:] for x in self.data]
game.py(196):     g.data = [x[:] for x in self.data]
game.py(197):     return g
game.py(384):     state.layout = self.layout.deepCopy()
 --- modulename: layout, funcname: deepCopy
layout.py(86):     return Layout(self.layoutText[:])
 --- modulename: layout, funcname: __init__
layout.py(22):     self.width = len(layoutText[0])
layout.py(23):     self.height= len(layoutText)
layout.py(24):     self.walls = Grid(self.width, self.height, False)
 --- modulename: game, funcname: __init__
game.py(159):     if initialValue not in [False, True]: raise Exception('Grids can only contain booleans')
game.py(160):     self.CELLS_PER_INT = 30
game.py(162):     self.width = width
game.py(163):     self.height = height
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(165):     if bitRepresentation:
layout.py(25):     self.food = Grid(self.width, self.height, False)
 --- modulename: game, funcname: __init__
game.py(159):     if initialValue not in [False, True]: raise Exception('Grids can only contain booleans')
game.py(160):     self.CELLS_PER_INT = 30
game.py(162):     self.width = width
game.py(163):     self.height = height
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(164):     self.data = [[initialValue for y in range(height)] for x in range(width)]
game.py(165):     if bitRepresentation:
layout.py(26):     self.capsules = []
layout.py(27):     self.agentPositions = []
layout.py(28):     self.numGhosts = 0
layout.py(29):     self.processLayoutText(layoutText)
 --- modulename: layout, funcname: processLayoutText
layout.py(101):     maxY = self.height - 1
layout.py(102):     for y in range(self.height):       
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(102):     for y in range(self.height):       
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(113):       self.food[x][y] = True 
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(114):     elif layoutChar == 'o':    
layout.py(116):     elif layoutChar == 'P':    
layout.py(118):     elif layoutChar in ['G']:    
layout.py(121):     elif layoutChar in  ['1', '2', '3', '4']:
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(102):     for y in range(self.height):       
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(114):     elif layoutChar == 'o':    
layout.py(116):     elif layoutChar == 'P':    
layout.py(118):     elif layoutChar in ['G']:    
layout.py(121):     elif layoutChar in  ['1', '2', '3', '4']:
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(114):     elif layoutChar == 'o':    
layout.py(116):     elif layoutChar == 'P':    
layout.py(118):     elif layoutChar in ['G']:    
layout.py(121):     elif layoutChar in  ['1', '2', '3', '4']:
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(114):     elif layoutChar == 'o':    
layout.py(116):     elif layoutChar == 'P':    
layout.py(118):     elif layoutChar in ['G']:    
layout.py(121):     elif layoutChar in  ['1', '2', '3', '4']:
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(102):     for y in range(self.height):       
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(114):     elif layoutChar == 'o':    
layout.py(116):     elif layoutChar == 'P':    
layout.py(118):     elif layoutChar in ['G']:    
layout.py(121):     elif layoutChar in  ['1', '2', '3', '4']:
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(114):     elif layoutChar == 'o':    
layout.py(116):     elif layoutChar == 'P':    
layout.py(118):     elif layoutChar in ['G']:    
layout.py(121):     elif layoutChar in  ['1', '2', '3', '4']:
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(114):     elif layoutChar == 'o':    
layout.py(116):     elif layoutChar == 'P':    
layout.py(118):     elif layoutChar in ['G']:    
layout.py(121):     elif layoutChar in  ['1', '2', '3', '4']:
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(114):     elif layoutChar == 'o':    
layout.py(116):     elif layoutChar == 'P':    
layout.py(118):     elif layoutChar in ['G']:    
layout.py(121):     elif layoutChar in  ['1', '2', '3', '4']:
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(102):     for y in range(self.height):       
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(114):     elif layoutChar == 'o':    
layout.py(116):     elif layoutChar == 'P':    
layout.py(118):     elif layoutChar in ['G']:    
layout.py(121):     elif layoutChar in  ['1', '2', '3', '4']:
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(114):     elif layoutChar == 'o':    
layout.py(116):     elif layoutChar == 'P':    
layout.py(118):     elif layoutChar in ['G']:    
layout.py(121):     elif layoutChar in  ['1', '2', '3', '4']:
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(102):     for y in range(self.height):       
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(114):     elif layoutChar == 'o':    
layout.py(116):     elif layoutChar == 'P':    
layout.py(118):     elif layoutChar in ['G']:    
layout.py(121):     elif layoutChar in  ['1', '2', '3', '4']:
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(114):     elif layoutChar == 'o':    
layout.py(116):     elif layoutChar == 'P':    
layout.py(118):     elif layoutChar in ['G']:    
layout.py(121):     elif layoutChar in  ['1', '2', '3', '4']:
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(114):     elif layoutChar == 'o':    
layout.py(116):     elif layoutChar == 'P':    
layout.py(118):     elif layoutChar in ['G']:    
layout.py(121):     elif layoutChar in  ['1', '2', '3', '4']:
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(114):     elif layoutChar == 'o':    
layout.py(116):     elif layoutChar == 'P':    
layout.py(118):     elif layoutChar in ['G']:    
layout.py(121):     elif layoutChar in  ['1', '2', '3', '4']:
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(112):     elif layoutChar == '.':
layout.py(114):     elif layoutChar == 'o':    
layout.py(116):     elif layoutChar == 'P':    
layout.py(117):       self.agentPositions.append( (0, (x, y) ) )
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(102):     for y in range(self.height):       
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(104):         layoutChar = layoutText[maxY - y][x]  
layout.py(105):         self.processLayoutChar(x, y, layoutChar)
 --- modulename: layout, funcname: processLayoutChar
layout.py(110):     if layoutChar == '%':      
layout.py(111):       self.walls[x][y] = True
 --- modulename: game, funcname: __getitem__
game.py(169):     return self.data[i]
layout.py(103):       for x in range(self.width):
layout.py(102):     for y in range(self.height):       
layout.py(106):     self.agentPositions.sort()
layout.py(107):     self.agentPositions = [ ( i == 0, pos) for i, pos in self.agentPositions]
layout.py(107):     self.agentPositions = [ ( i == 0, pos) for i, pos in self.agentPositions]
layout.py(30):     self.layoutText = layoutText
game.py(385):     state._agentMoved = self._agentMoved
game.py(386):     state._foodEaten = self._foodEaten
game.py(387):     state._capsuleEaten = self._capsuleEaten
game.py(388):     return state
pacman.py(215):     return state
game.py(618):       action = None
game.py(619):       self.mute()
 --- modulename: game, funcname: mute
game.py(527):     if not self.muteAgents: return
game.py(620):       if self.catchExceptions:
game.py(660):         action = agent.getAction(observation)
 --- modulename: searchAgents, funcname: getAction
searchAgents.py(119):     if 'actionIndex' not in dir(self): self.actionIndex = 0
searchAgents.py(120):     i = self.actionIndex
searchAgents.py(121):     self.actionIndex += 1
searchAgents.py(122):     if i < len(self.actions):
 --- modulename: trace, funcname: _unsettrace
trace.py(80):         sys.settrace(None)
